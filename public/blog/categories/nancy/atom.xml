<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Nancy | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/nancy/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-03-18T19:50:13+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Nancy Module that Behaves like a Rails Controller... Mother of God]]></title>
    <link href="http://yobriefca.se/blog/2011/12/30/a-nancy-module-taht-behaves-like-a-rails-controller/"/>
    <updated>2011-12-30T20:46:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/12/30/a-nancy-module-taht-behaves-like-a-rails-controller</id>
    <content type="html"><![CDATA[<p>If <a href="http://nancyfx.org">Nancy</a> is inspired by Sinatra I thought I'd have a little fun a create an abstract class that created modules that kind of mimic the behaviour of Rails controllers.  Code first, ask questions later...</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">RailslikeControllerFor</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">NancyModule</span> <span class="n">where</span> <span class="n">TEntity</span> <span class="p">:</span> <span class="k">class</span>
</span><span class='line'><span class="err">{&lt;/</span><span class="nc">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="n">RailslikeControllerFor</span><span class="p">()</span> <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">&quot;/&quot;</span> <span class="p">+</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TEntity</span><span class="p">).</span><span class="n">Name</span> <span class="p">+</span> <span class="s">&quot;s&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Get</span><span class="p">[</span><span class="s">@&quot;/&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">Index</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Get</span><span class="p">[</span><span class="s">@&quot;/new&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">New</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Post</span><span class="p">[</span><span class="s">@&quot;/&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">Create</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Get</span><span class="p">[</span><span class="s">@&quot;/(?&amp;lt;id&amp;gt;[\d])&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">Show</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Get</span><span class="p">[</span><span class="s">@&quot;/(?&amp;lt;id&amp;gt;[\d])/edit&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">Edit</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Put</span><span class="p">[</span><span class="s">@&quot;/(?&amp;lt;id&amp;gt;[\d])&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">Update</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Delete</span><span class="p">[</span><span class="s">@&quot;/(?&amp;lt;id&amp;gt;[\d])&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">Destroy</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="k">virtual</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">Index</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="m">404</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">protected</span> <span class="k">virtual</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">New</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="m">404</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">protected</span> <span class="k">virtual</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">Create</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="m">404</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">protected</span> <span class="k">virtual</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">Show</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="m">404</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">protected</span> <span class="k">virtual</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">Edit</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="m">404</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">protected</span> <span class="k">virtual</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">Update</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="m">404</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">protected</span> <span class="k">virtual</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">Destroy</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="m">404</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="n">Nancy</span><span class="p">.</span><span class="n">Response</span> <span class="n">AsView</span><span class="p">(</span><span class="kt">object</span> <span class="n">model</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">method</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackTrace</span><span class="p">().</span><span class="n">GetFrame</span><span class="p">(</span><span class="m">1</span><span class="p">).</span><span class="n">GetMethod</span><span class="p">().</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">entity</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TEntity</span><span class="p">).</span><span class="n">Name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">View</span><span class="p">[</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}/{1}&quot;</span><span class="p">,</span> <span class="n">entity</span><span class="p">,</span> <span class="n">method</span><span class="p">),</span> <span class="n">model</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To use it you just subclass the class and override the necessary methods.  Like so.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">QuestionModule</span> <span class="p">:</span> <span class="n">RailslikeControllerFor</span><span class="p">&lt;</span><span class="n">Question</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">IQuestionsRepository</span> <span class="n">questions</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="nf">QuestionModule</span><span class="p">(</span><span class="n">IQuestionsRepository</span> <span class="n">questions</span><span class="p">)</span>
</span><span class='line'>    <span class="p">:</span> <span class="k">base</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="n">questions</span> <span class="p">=</span> <span class="n">questions</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protected</span> <span class="k">override</span> <span class="n">Response</span> <span class="nf">Index</span><span class="p">(</span><span class="n">dynamic</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">AsView</span><span class="p">(</span><span class="n">questions</span><span class="p">.</span><span class="n">GetAll</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What the base class does is create the necessary CRUDdy urls with a base route starting with the name of the entity you pass in, pluralised in the easiest way possible.  In this case <code>/questions</code>.  The rules match what you wold get for a controller in Rails.</p>

<table style="width:100%" border="1">
    <tbody>
        <tr style="background-color: #666;color:#fff;">
            <th style="padding:4px;font-weight:bold;">Verb </th>
            <th style="padding:4px;font-weight:bold;">Path</th>
            <th style="padding:4px;font-weight:bold;">Action </th>
            <th style="padding:4px;font-weight:bold;"></th>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions           </td>
            <td style="padding:4px;">index    </td>
            <td style="padding:4px;">display a list of all questions</td>
        </tr>
        <tr style="background-color: #fff;">
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions/new       </td>
            <td style="padding:4px;">new      </td>
            <td style="padding:4px;">return an <span class="caps">HTML</span> form for creating a new question</td>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">POST</span>    </td>
            <td style="padding:4px;">/questions           </td>
            <td style="padding:4px;">create   </td>
            <td style="padding:4px;">create a new question</td>
        </tr>
        <tr style="background-color: #fff;">
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions/:id       </td>
            <td style="padding:4px;">show     </td>
            <td style="padding:4px;">display a specific question</td>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions/:id/edit  </td>
            <td style="padding:4px;">edit     </td>
            <td style="padding:4px;">return an <span class="caps">HTML</span> form for editing a question</td>
        </tr>
        <tr style="background-color: #fff;">
            <td style="padding:4px;"><span class="caps">PUT</span>     </td>
            <td style="padding:4px;">/questions/:id       </td>
            <td style="padding:4px;">update   </td>
            <td style="padding:4px;">update a specific question</td>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">DELETE</span>  </td>
            <td style="padding:4px;">/questions/:id       </td>
            <td style="padding:4px;">destroy  </td>
            <td style="padding:4px;">delete a specific question</td>
        </tr>
    </tbody>
</table>


<br/>


<p>There is a teeny-tiny bit of sugar in the <code>AsView</code> method that will look up the corresponding view.  So the module above would resolve its <code>Index</code> method to <code>questions/index</code> and the view engine would find the correct file (eg. for Razor - <code>questions/index.cshtml</code>).</p>

<p>I've already said it's a bit of fun but I have actually used this at least once - there is probably more that could be added but it'll do for a first spike at least.  Any use to anyone?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nancy JSONP Hook]]></title>
    <link href="http://yobriefca.se/blog/2011/11/01/nancy-jsonp-hook/"/>
    <updated>2011-11-01T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/11/01/nancy-jsonp-hook</id>
    <content type="html"><![CDATA[<blockquote><p>3 Nov 2011: As of Nancy v0.9 this is part of the core (same logic applies)</p></blockquote>

<p>I needed to write a simple JSONP capable service recently and decided to run with <a href="http://nancyfx.org">Nancy</a>.  Turns out Nancy doesn't give us a way to do JSONP so I set about creating something that fitted my use case.  The fruits of my very very short labour (thanks to the super-hyper-flexible-powerfulness of the Nancy Pipeline) can be seen here.  The full source is available in the <a href="https://github.com/kouphax/nancy-jsonp">Github repo</a> and hopefully we can get this pushed into the core of Nancy shortly (or at least part of the official repo one way or another) - just for the geek cred of course :)</p>

<!--more-->


<h2>Implementation Rundown</h2>

<p>I took the same approach as the existing hooks (using the SassAndCoffee one as my implementation pattern) so created a static <code>Hooks</code> class with an <code>Enable</code> method that simply adds a new item to the end of the pipeline</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// Enable JSONP support in the application</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="c1">/// &lt;param name=&quot;pipeline&quot;&gt;Application Pipeline to Hook into&lt;/param&gt;</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Enable</span><span class="p">(</span><span class="n">IApplicationPipelines</span> <span class="n">pipeline</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">pipeline</span><span class="p">.</span><span class="n">AfterRequest</span><span class="p">.</span><span class="n">AddItemToEndOfPipeline</span><span class="p">(</span><span class="n">PrepareJsonp</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The meat of the work lies in the <code>PrepareJsonp</code> method</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">/// &lt;summary&gt;</span>
</span><span class='line'><span class="c1">/// Transmogrify original response and apply JSONP Padding</span>
</span><span class='line'><span class="c1">/// &lt;/summary&gt;</span>
</span><span class='line'><span class="c1">/// &lt;param name=&quot;context&quot;&gt;Current Nancy Context&lt;/param&gt;</span>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">PrepareJsonp</span><span class="p">(</span><span class="n">NancyContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">bool</span> <span class="n">isJson</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">==</span> <span class="s">&quot;application/json&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">hasCallback</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Query</span><span class="p">[</span><span class="s">&quot;callback&quot;</span><span class="p">].</span><span class="n">HasValue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">isJson</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">hasCallback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// grab original contents for running later</span>
</span><span class='line'>    <span class="n">Action</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Stream</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">original</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Contents</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">callback</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Query</span><span class="p">[</span><span class="s">&quot;callback&quot;</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// set content type to application/javascript so browsers can handle it by default</span>
</span><span class='line'>    <span class="c1">// http://stackoverflow.com/questions/111302/best-content-type-to-serve-jsonp</span>
</span><span class='line'>    <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/javascript&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Contents</span> <span class="p">=</span> <span class="n">stream</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// disposing of stream is handled elsewhere</span>
</span><span class='line'>        <span class="n">StreamWriter</span> <span class="n">writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">AutoFlush</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;{0}(&quot;</span><span class="p">,</span> <span class="n">callback</span><span class="p">);</span>
</span><span class='line'>        <span class="n">original</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
</span><span class='line'>        <span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;);&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let me highlight a few of the key areas here.</p>

<h3>Determine if Response need JSONP Padded</h3>

<p>I decided to take a basic approach to determining if the request should return a JSONP response,</p>

<ul>
<li>If the content type of the current response is <code>application/json</code></li>
<li>If there is a query string parameter called <code>callback</code></li>
</ul>


<p>Here is what we need to satisfy that,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">bool</span> <span class="n">isJson</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">==</span> <span class="s">&quot;application/json&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">hasCallback</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Query</span><span class="p">[</span><span class="s">&quot;callback&quot;</span><span class="p">].</span><span class="n">HasValue</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">isJson</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">hasCallback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I am sure this could be refined and open to suggestion (perhaps more applicable content types or extra possible configuration for the callback parameter).  I wonder if it is a bit safer to restrict requests that are GET requests seeing as that is the only way to do JSONP? Hmmmm.</p>

<p>Next thing I set the content type to <code>application/javascript</code> as that makes perfect sense</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/javascript&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally I wrap the original responses content in the JSONP "padding" (the callback function) and write everything out.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Contents</span> <span class="p">=</span> <span class="n">stream</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="c1">// disposing of stream is handled elsewhere</span>
</span><span class='line'><span class="n">StreamWriter</span> <span class="n">writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">AutoFlush</span> <span class="p">=</span> <span class="k">true</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;{0}(&quot;</span><span class="p">,</span> <span class="n">callback</span><span class="p">);</span>
</span><span class='line'><span class="n">original</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
</span><span class='line'><span class="n">writer</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;);&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So all in all very simple but damn I'm proud that I got off my arse and contributed to such a stellar community. hopefully someone finds this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Micro Web Frameworks in .NET Screencast: Nancy #1 - Hello World]]></title>
    <link href="http://yobriefca.se/blog/2011/05/23/nancy-1-screencast/"/>
    <updated>2011-05-23T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/05/23/nancy-1-screencast</id>
    <content type="html"><![CDATA[<p>  <p><iframe src="http://player.vimeo.com/video/24114023?byline=0&amp;portrait=0" width="601" height="428" frameborder="0"></iframe><p><a href="http://vimeo.com/24114023">Nancy #1 &#8211; Hello World</a> from <a href="http://vimeo.com/user7151248">James Hughes</a> on <a href="http://vimeo.com">Vimeo</a>.</p><p>Part of my Micro Web Frameworks in .<span class="caps">NET</span> series.  This time looking at Hello World in Nancy (http://nancyfx.org)</p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Micro Web Frameworks in .NET 101: Nancy]]></title>
    <link href="http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy/"/>
    <updated>2011-05-23T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy</id>
    <content type="html"><![CDATA[<p>  <blockquote class="announce">This post is the is part of series of posts covering the various <em>micro web frameworks</em> in the .<span class="caps">NET</span> world.  The frameworks I intend to cover will be linked as the series progresses.  For further discussion on the use of micro web framework in .<span class="caps">NET</span> please see my <a href="http://yobriefca.se/blog/2011/05/18/why-use-micro-web-frameworks-in-net/">previous post</a> The current series line up:<ul>    <li><a href="http://yobriefca.se/blog/2011/05/19/micro-web-frameworks-101-jessica/">Jessica</a></li>    <li><a href="http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy/">Nancy</a></li>    <li><a href="http://yobriefca.se/blog/2011/06/22/micro-web-frameworks-101-anna/">Anna</a></li>  <li><a href="http://yobriefca.se/blog/2011/07/18/micro-web-frameworks-101-tinyweb//">Tinyweb</a><br></li></ul></blockquote><p><a href="htttp://nancyfx.org">Nancy</a> is a different beast to <a href="http://jessicafx.org">Jessica</a> while on the surface it may appear like a micro web framework, once you scratch the surface it becomes debatable because there is just some much more than a nice <span class="caps">DSL</span> for creating lightweight web apps.  In fact this was <a href="http://tombell.org.uk/blog/2011/04/10/why-did-i-create-jessica/">one of the reasons</a> Jessica was created,</p><blockquote><p>Nancy has taken an approach to making many parts of the framework replaceable; if you don?t like the functionality of X you can create your own, and have Nancy use that instead. While this is a respectable goal for a web framework, the focus for Jessica has been to stay as simple and as close to Sinatra as possible. <em>Tom Bell.  Why Did I Create Jessica?</em></p></blockquote><p>Anyway we will touch on these aspects a bit later.  Lets get cracking.</p><h2>Getting Started &#8211; Hello World</h2><p>Getting <a href="htttp://nancyfx.org">Nancy</a> up and running is simple enough.  Starting with an empty <span class="caps">ASP</span>.<span class="caps">NET</span> web project<sup class="footnote" id="fnr1"><a href="#fn1">1</a></sup> we can use <a href="http://nuget.org/">NuGet</a> to install Nancy</p><p class="minimal-gist"><script src="https://gist.github.com/985446.js?file=InstallPackage.cs"></script></p><p>Also because we are hosting this in an <span class="caps">ASP</span>.<span class="caps">NET</span> environment (more on this later) we need to install the appropriate hosting package</p><p class="minimal-gist"><script src="https://gist.github.com/985450.js?file=InstallPackage.ps"></script></p><p>Next step requires us to add some stuff to the <code>web.config</code>.  If you&#8217;ve been smart and installed the hosting package from NuGet this steps is done for you but ultimately your minimal <code>web.config</code> should look like this.</p><script src="https://gist.github.com/985454.js?file=Web.config.xml"></script><p>The final step is to create the hello world module that will handle your route.  Again, like Jessica, it doesn&#8217;t matter where the module classes are placed but for neatness I just like to stick them in a <code>Modules</code> folder.  Our module will look very similar to the one we defined for Jessica.</p><script src="https://gist.github.com/985460.js?file=HelloWorldModule.cs"></script><p>And we&#8217;re done.  Fire the app up and behold the &#8220;Hello World&#8221;-yness of it all.</p><h2>Other Micro Framework Related Stuff</h2><p><a href="http://nancyfx.org">Nancy</a> has some features that aren&#8217;t technically related to the micro framework aspect  &#8211; specifically hosting but I&#8217;ll touch on that later.  <a href="http://nancyfx.org">Nancy</a> also has a lot of nice features that are related to the micro framework aspects so lets take a bit of a whirlwind tour around the main areas first.</p><h3>Routes</h3><p>Routes in <a href="http://nancyfx.org">Nancy</a> are pretty powerful.  Obviously you get the declare static routes (as demonstrated above) but dynamic routes (routes with variables for example) are also supported in a few of ways.  First of all you have named segments.  These can be expressed in 2 ways</p><ol> <li>Sinatra style variables <code>/user/:id</code>, or,</li>    <li>C#-esque <code>String.format</code> style <code>/user/{id}</code></li></ol><p>Declaring a route like this will cause the variable section to be pushed into a named variable within the dynamic object passedin into the route action. <code>/user/jameshu</code> matches <code>/user/:id</code> and the dynamic object passed into the action will have <code>x.id == "jameshu"</code></p><p>The other means of dynamic route matching is the use of regular expressions and named capture groups (or backreferences as they are sometimes known).  Using regular expressions as route parameters allows us to offer more fine grained route matching.  Take the following route as an example,</p><p class="minimal-gist"><script src="https://gist.github.com/985797.js?file=Route.cs"></script></p><p>This route will <span class="caps">ONLY</span> match routes whose variable section matches the expression, in this case a numeric value.  So not only have we specified a route variable but we are also limiting access to that action to &#8220;valid&#8221; values.  This means we could also offer another route that accepts only alphabetical characters.  Powerful enough.</p><h3>Route Conditions</h3><p>Taking routes another step further <a href="http://nancyfx.org">Nancy</a> also offers optional conditions that can be used to determine if a route should be executed for a given request.  Lets use this heavily contrived example to demonstrate this feature,</p><p class="minimal-gist"><script src="https://gist.github.com/985818.js?file=SecretRoute.cs"></script></p><p>So this route will match any route starting with <code>/user</code> however the condition (the second argument of the definition) will ensure that the route action will only get executed if the query string is populated with an argument called password with a value of secrets i.e <code>http://myserver/user?password=secrets</code> will match successfully.</p><h3>Views</h3><p><a href="http://nancyfx.org">Nancy</a> supports a decent range of view engines<sup class="footnote" id="fnr2"><a href="#fn2">2</a></sup></p><ul>    <li>Razor</li>  <li>Spark</li>  <li>NDjango and, obviously,</li>    <li>Static files</li></ul><p>Serving up dynamic vies is fairly simple</p><script src="https://gist.github.com/985832.js?file=ModuleWithView.cs"></script><p>We basically use the View object to specify the view and optionally pass in a view model as well.  By default Nancy will look in the <code>~/Views</code> folder for the views but you can also specify a full path if needs be.  The view is then matched against the available view engines and rendered as you would expect.  This is the Razor view specified above.</p><script src="https://gist.github.com/985835.js?file=View.cshtml"></script><h3>Responses</h3><p>Nancy is also capable of returning static content as different responses (similar to how Jessica does it).  Each route action is expected to return a Nancy Response object. The object itself has a number of convenience methods for serving static files and <acronym title="JavaScript Object Notation"><span class="caps">JSON</span></acronym> such as <code>Response.AsJs</code>, <code>Response.AsJson</code>, <code>Response.AsXml</code>, , <code>Response.AsRedirect</code> etc.</p><h2>Hosting</h2><p>This is were things move away from &#8220;micro framework&#8221; world a bit.  Nancy itself abstracts out the hosting environment making the entire framework portable allowing you to host in any number of places including (but not limited to),</p><ul>    <li>Self hosted (e.g. embedded within an executable)</li>   <li><span class="caps">ASP</span>.<span class="caps">NET</span>/<span class="caps">IIS</span> (as demonstrated above)</li>  <li><span class="caps">WCF</span> (yep thats right), and,</li>  <li>Some partial <a href="http://bvanderveen.com/a/dotnet-http-abstractions"><span class="caps">OWIN</span></a> support</li></ul><p>This, to me at least, is very interesting.  Being able to build an executable that accepts <span class="caps">HTTP</span> requests could be pretty powerful in the right hands and the <span class="caps">WCF</span> stuff sounds very interesting (is this similar to what the new <span class="caps">WCF</span> Web <span class="caps">API</span> is attempting to offer?).  I need to play some more in this area.  I&#8217;ll report back when I am done.</p><h2>Summing Up</h2><p>So that was a quick round up of the key features of Nancy and I think it&#8217;s another one worth looking at.  So hopefully you can also see how it differs from Jessica.  From a code perspective they seem quite similar (though Nancy has possibly a few more features) but the whole hosting abstraction layer is very interesting.  I have had people ask me if this introduced any new (or even old) security concerns and to be honest I don&#8217;t know but it might certainly be worth looking out for.</p><p>As always I may need corrections so please fire away.  Hopefully I can cover off these points with a few more screencasts over the next week.  Stay tuned.</p><p class="footnote" id="fn1"><a href="#fnr1"><sup>1</sup></a> In my <a href="http://jessicafx.org">Jessica</a> I laid out steps to strip the normal <span class="caps">ASP</span>.<span class="caps">NET</span> Web Project template out of all the unnecessary bits.  Lord knows why I didn&#8217;t just create an empty web project &lt;facepalm/&gt;</p><p class="footnote" id="fn2"><a href="#fnr2"><sup>2</sup></a> Apparently it also has a built in view engine called the Super Simple View Engine but as of yet I can&#8217;t seem to get it to work.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Would You Use Micro Web Frameworks in .NET?]]></title>
    <link href="http://yobriefca.se/blog/2011/05/18/why-use-micro-web-frameworks-in-net/"/>
    <updated>2011-05-18T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/05/18/why-use-micro-web-frameworks-in-net</id>
    <content type="html"><![CDATA[<p>  <blockquote><p><span class="caps">UPDATE</span>: Oh dear James &lt;shakeshead/&gt;.  So it seems someone was paying attention to my post and noticed my benchmarks were <strong>hideously</strong> flawed.  I have removed them because I don&#8217;t like looking like a total fool but I will be replacing the with <strong>honest, real and unstupified</strong> results as soon as I can.  Apologies for any distress this may have caused.  <acronym title="Fear Uncertainty Doubt"><span class="caps">FUD</span></acronym> is a powerful thing in the wrong hands but ignorance is worse.</p></blockquote><p>I&#8217;ve been doing a bit of research into micro web frameworks in the.<span class="caps">NET</span> world recently and I was posed a question by a colleague.</p><blockquote><p>Whats the point of a micro web framework?</p></blockquote><p>I gave the usual response &#8211; more lightweight, smaller foot print blah blah blah. To be honest I was barely convincing myself.  I suspected I had fallen into the trap of latching on to something because it was novel to me rather than any real reason.  I am not saying they don&#8217;t have a place in solutions technology stack, quite the opposite in fact, what I am saying is that I didn&#8217;t have sufficient justification for bothering with them.</p><p>So I&#8217;ve spent a bit more time looking at the background of these microframeworks rather than the techs themselves and hopefully the next time someone asks I can give a more convincing reply.</p><h2>What Is A Micro Web Framework</h2><p>Pretty much a micro web framework is a framework that provides the absolute minimum feature set required to create a web application.  Extra features can be added via extensions etc. but the sole purpose of a microframework is to allow the app to handle requests to certain URLs (routing) with a bit of basic error handling for 404&#8217;s etc. (possibly).  No feature creep, no bloated deployments just ultra-lean request/response handling.</p><p>The most famous microframework, and the one that started it all, comes from the Ruby world &#8211; <a href="http://www.sinatrarb.com/">Sinatra</a> and it&#8217;s &#8220;Hello World&#8221; example really highlights the ease of creating an app.</p><script src="https://gist.github.com/976291.js?file=Sinatra.rb"></script><p>Run this and navigate to <code>/hi</code> to see the amazing response of <code>Hello World</code>.</p><h2>Micro Web Frameworks in the .<span class="caps">NET</span> World</h2><p>So how does this compare to similar technologies in the .<span class="caps">NET</span> world.  Most .<span class="caps">NET</span> solutions take a lot of inspiration from <a href="http://www.sinatrarb.com/">Sinatra</a> (and why not it&#8217;s pretty much the blueprints for the microframeworks) and this one is written using <a href="http://jessicafx.org">Jessica</a>.</p><script src="https://gist.github.com/976293.js?file=JessicaModule.cs"></script><p>OK so there is a bit of extra language noise but this is to be expected when moving from Ruby to C# but it&#8217;s just as readable.  <a href="http://jessicafx.org">Jessica</a> isn&#8217;t the only microframework in the .<span class="caps">NET</span> world but it does seem to be one of the better ones (based on a very superficial amount of research &#8211; no offence meant to other frameworks &#8211; happy to be proven wrong).  The other frameworks considered &#8220;micro&#8221; include,</p><ul>    <li><a href="http://github.com/thecodejunkie/Nancy">Nancy</a></li>  <li><a href="http://github.com/martinrue/Tinyweb">Tinyweb</a></li>  <li><a href="http://github.com/jondot/nina">Nina</a></li>   <li><a href="http://github.com/carlhoerberg/NSinatra">NSinatra</a></li></ul><h2>What Makes Micro Frameworks Worthwhile?</h2><p>So lets expand on my original argument of <cite>&#8220;more lightweight, smaller foot print blah blah blah&#8221;</cite>.  The most obvious is that a microframework by design is going to be a lot more lightweight than a normal framework.  It&#8217;s lifecycle for a request is going to be greatly simplified and ultimately this should help increase performance per request (I currently have no figures to back this up yet but I am working on it).  As well as performance and increased throughput this lightweight approach should greatly reduce the memory footprint which will help your app scale a bit better<sup class="footnote" id="fnr1"><a href="#fn1">1</a></sup>.</p><p>Another reason to consider a microframework is that you are in control of everything and that is good in my book.  It&#8217;s one of my arguments for choosing <span class="caps">MVC</span> over WebForms.  No unnecessary injection of client side code or script managers or any of that sort of thing.  No overly complex view properties being populated for no reason.  Nothing but the stuff you put in.</p><p>Not exactly within the bounds of a microframework by definition but still worth mentioning is hosting.  <a href="http://nancyfx.org">Nancy</a> has a number of hosting options</p><ul>   <li>Standalone</li> <li>In a web app</li>   <li>In a <span class="caps">WCF</span> Service</li></ul><p>This sort of swappable hosting greatly increases portability of your app.  Now this is <a href="http://nancyfx.org">Nancy</a> specific but the effort required to create this sort of functionality with another microframework is trivial in comparison to the what it would be in <span class="caps">MVC</span> or WebForms.</p><p>Also many of the microframeworks have some sort of support for <a href="http://owin.org/"><span class="caps">OWIN</span></a> which is essentially a web abstraction that would allow your app to run on any <span class="caps">OWIN</span> supported server<sup class="footnote" id="fnr3"><a href="#fn3">3</a></sup>.  This sort of support would take longer to roll out across the larger frameworks which generally stick to <span class="caps">IIS</span>.  I&#8217;m not saying it won&#8217;t happen but the bigger your framework the slower change is going to happen.</p><p>That brings me to my final point &#8211; evolution.  <span class="caps">ASP</span>.<span class="caps">NET</span> <span class="caps">MVC</span> has evolved very fast since v1.0 and there is no sign of that progress abating any time soon.  Still it&#8217;s speed is hindered by it&#8217;s size. These microframeworks introduce new features (some experimental for the brave among us) much faster because of the fact they are small.  Extending these frameworks don&#8217;t require the creation of numerous classes to do simple things &#8211; there is generally a common extension point with a very small set of requirements.</p><h2>Conclusion</h2><p>I hope this has helped my colleagues get a better picture of why I think microframeworks are worthy of our time and why I am keen to do a bit of research on them.  I also hope this has broadened a few minds in terms of solution architectures in the .<span class="caps">NET</span> world.  Not everything needs to be some configurable, Enterprise ready, heavyweight application sometimes the simplest solution is all you need.</p><p class="footnote" id="fn1"><a href="#fnr1"><sup>1</sup></a> Provided you don&#8217;t do something stupid!</p><p class="footnote" id="fn2"><a href="#fnr2"><sup>2</sup></a> As a friend pointed out it&#8217;s easy to write a fast Hello World server so take these results with a healthy does of skepticism</p><p class="footnote" id="fn3"><a href="#fnr3"><sup>3</sup></a> It&#8217;s early days for <span class="caps">OWIN</span> but still worth mentioning.</p></p>
]]></content>
  </entry>
  
</feed>
