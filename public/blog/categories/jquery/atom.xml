<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>jQuery | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-12-28T20:10:10+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery 1.5 Released]]></title>
    <link href="http://yobriefca.se/blog/2011/02/01/jquery-1-5-released/"/>
    <updated>2011-02-01T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/02/01/jquery-1-5-released</id>
    <content type="html"><![CDATA[<p>  <p>Official Post: <a href="http://blog.jquery.com/2011/01/31/jquery-15-released/">http://blog.jquery.com/2011/01/31/jquery-15-released/</a></p><p>Quick post just spread the word that jQuery 1.5 dropped today which is right  on time according the the schedule :) .&nbsp; I guess it&rsquo;s a bit pointless because  the people that care already know this, but humour me!</p><h2>New Stuff</h2><p>There isn&rsquo;t a&nbsp;heap&nbsp;of &ldquo;new to jQuery&rdquo; stuff in this release which I guess is  a good thing.&nbsp; The MS contributed plugins have stayed just that&nbsp;&ndash; plugins.&nbsp;  Previous talk of templating becoming absorbed into the jQuery core in 1.5 has  failed to bear fruit.&nbsp; Good stuff&nbsp;&ndash; not sure why it should have been a core  function&nbsp;&ndash; there is no one right templating strategy/engine and putting one in  the core is sure to annoy as many people as it will please others.&nbsp; So what&rsquo;s  new?</p><h3>Deferred Objects</h3><p>Deferred Objects are objects that return a contract that will be adhered to  regardless of when actions are bound to it.&nbsp; This forms the heart of the Ajax  rewrite which I&rsquo;ll touch on in a minute.&nbsp; This is essentially the <a href="http://en.wikipedia.org/wiki/Futures_and_promises">Promise</a>&nbsp;implementation  pattern.&nbsp; Basically when you execute a function that returns a Deferred object  you can keep attaching callbacks to that object and they will get executed even  if they are bound after the function completes whatever operation it has to do.&nbsp;  The jQuery example demonstrates this very well,</p><p><script src="https://gist.github.com/805626.js"></script></p><p>So basically at any point in time we can attach callbacks to the ajax  promise, pass it around our system, let other functions attach handlers etc and  it will all get resolved/executed when the call has completed.&nbsp; It&rsquo;s nice stuff  though it may not have a TON of uses.</p><h3>jQuery.sub()</h3><p>Similar in a way to the YUI3 sandboxing technique jQuery.sub() lets us create  a clone or subclass of the global jQuery object and&nbsp;hack it to bits for our own  needs without affecting the global jQuery object.&nbsp; Again limited uses but when  you need it it can be a godsend.&nbsp; Here is a very contrived example,</p><p><script src="https://gist.github.com/805630.js"></script></p><p>You see what I am doing?&nbsp; Say I wanted to perform some sort of unit test  involving calls to the Ajax method.&nbsp; I could, in isolation, make the Ajax method  return whatever I want without worrying about breaking other tests.&nbsp;</p><h2>Improved/Refactored Stuff</h2><h3>Ajax Rewrite</h3><p>The ajax module has been rewritten entirely.&nbsp; It will now return a special  jQuery based XHR object (rather than a plain XHR object).&nbsp; This object is a  deferred object that I spoke about above.&nbsp; This means we can pass the ajax  request around and let components or modules attach their own handlers when  they need to.&nbsp; We can also bind multiple callbacks via the jQuery chaining  pattern (see example above)</p><h3>Moar Speed</h3><p>As usual many of the DOM traversal methods have been given performance tweaks  - .children(), .prev(), and .next().&nbsp; The&nbsp;official post&nbsp;has shiny graphs and  such so hop on over there for a full run down.</p><h2>Conclusion</h2><p>I hate that word but I don&rsquo;t have another word I like better&hellip;. Yes so I  haven&rsquo;t played with this a great deal recently, just some superficial tinkering  but it&rsquo;s a solid release that adds some nice features (with limited uses for  most I suspect).&nbsp; I mean they could have kept deferred objects internal&nbsp;&ndash; they  were implemented for the Ajax stuff&nbsp;&ndash; but why not make it public&nbsp;&ndash;&nbsp;could be  useful to many people, and that is a good attitude.&nbsp;</p><p>Also good decisions were made to keep templating out of the core I think  (others may disagree but that&rsquo;s life!). &nbsp;Finally this is going to be the jQuery version used in jQuery Mobile when it hits shortly!</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobilize! Adapting the ASP.NET MVC Project Template for jQuery Mobile]]></title>
    <link href="http://yobriefca.se/blog/2010/10/26/mobilize-adapting-the-asp-net-mvc-project-template-for-jquery-mobile/"/>
    <updated>2010-10-26T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/26/mobilize-adapting-the-asp-net-mvc-project-template-for-jquery-mobile</id>
    <content type="html"><![CDATA[<p>  <p class='img-holder'><img src="http://farm3.static.flickr.com/2413/5721975436_fb47349a04_o.png" alt=""></p><p style="text-align: right;"><em><span style="font-size: xx-small;"><span style="font-size: xx-small;">Image</span> courtesy of the  awesome </span></em><em><span style="font-size: xx-small;"><a href="http://www.threadless.com/">Threadless</a></span></em></p><p>Having tinkered with <a href="http://yobriefcase.posterous.com/practical-jquery-mobile-with-aspnet-mvc">jQuery  Mobile and MVC</a> a bit recently but I wanted to do a bit more.&nbsp; The first app  I wrote was read only which is actually pretty easy to accomplish regardless of  technology/framework.&nbsp; So I wanted to try a little something different,  something a kin to a real application.&nbsp; However time and coders block left me  with little inspiration for creating the worlds next amazing mobile app.&nbsp;  Sitting there with a new ASP.NET MVC project open in Visual Studio I couldn&rsquo;t  think of what to write.&nbsp; Then it struck me&hellip; don&rsquo;t write anything.&nbsp; The MVC  starter skeleton project was sitting right there why not just mobilise it?&nbsp; So I  did.&nbsp; Without modifying any server side code and only tweaking the views I found  I was able to create a fully jquery-mobilified version of the template.&nbsp; Here&rsquo;s  what I did.</p><h2>Clean House</h2><p>We need to strip some of the dead weight out of our project including some of  the mark up and resources,</p><h3>Resources</h3><p>First things first I dropped the current bundle of scripts (MS Ajax, jQuery  1.4.1, Validate etc.) and the Site.css.&nbsp; Next I added the jQuery Mobile  assets,</p><ul><li>jQuery 1.4.3 (jquery-1.4.3.js)</li><li>jQuery Mobile 1.0a1 (jquery.mobile-1.0a1.js)</li><li>jQuery Mobile CSS (jquery.mobile-1.0a1.css)</li><li>jQuery Mobile images</li></ul><p>In the following project structure</p><p class='img-holder'><img src='http://farm3.static.flickr.com/2696/5721416507_18861d0ae1_o.png'></p><h3>Site.Master</h3><p>Next I&nbsp;cut down the Site.Master to it&rsquo;s bare minimum and add the HTML5  DocType and the references to jQuery Mobile ,</p><p><script src="https://gist.github.com/646750.js"></script></p><p>I could have included the basic markup for a full page but I wanted to keep  it as flexible for now.&nbsp; I also removed the LogOnUserControl for now as I want  to just push it into the main page.</p><h2>Marking Up</h2><p>The next step was to tweak the markup of the pages so they comply with jQuery  Mobile and can be mobilised correctly.&nbsp; Most pages are marked up in the same way  so rather than list them all I&rsquo;ll just list the highlights.</p><h3>Home.aspx</h3><p><script src="https://gist.github.com/646756.js"></script></p><p>I have a top toolbar button for Login/Log Off (depending on context) and the  View.Message from the old page is included as the content of the page.</p><h3>Logon.aspx</h3><p><script src="https://gist.github.com/646757.js"></script></p><p>Gives us the login form and a link to the Register screen.&nbsp; I marked the  Register screen as a Dialog just to be a wee bit different.&nbsp; The Register screen  itself is marked up as a normal page (the framework handles the displaying of a  dialog automagically).&nbsp; I also added a different theme to the login button and a  &ldquo;pop&rdquo; transition to the Register dialog through the data- attributes.</p><p>One other thing I had to do was add a &ldquo;fieldcontain&rdquo; wrapper to the field  blocks as there was some layout issues.&nbsp; This is documented in the jQuery Mobile  docs.</p><h3>Register.aspx</h3><p><script src="https://gist.github.com/646760.js"></script></p><p>The most complex screen in the app.&nbsp; Nothing special added only some  different markup.</p><h2>Running It</h2><p>That was it.&nbsp; After adapting the rest of the pages (via manipulating markup)&nbsp;  I was left with a mobilized version of the MVC project template.&nbsp; Again I didn&rsquo;t  have to make any code changes&nbsp;&ndash; validation still worked, forms still worked,  login, register, change password&nbsp;&ndash; all worked as expected (screen shots&nbsp;from Chrome which has a few issues with rounded corners on fields in jQuery Mobile).</p><p class='img-holder'>  <img src='http://farm4.static.flickr.com/3502/5721975554_272b823481_o.png' width='200' style='border:1px solid #000;'>  <img src='http://farm3.static.flickr.com/2756/5721416629_4b4e7ebaed_o.png' width='200' style='border:1px solid #000;'>  <img src='http://farm3.static.flickr.com/2510/5721416689_20e25e2983_o.png' width='200' style='border:1px solid #000;'></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical jQuery Mobile with ASP.NET MVC]]></title>
    <link href="http://yobriefca.se/blog/2010/10/22/practical-jquery-mobile-with-asp-net-mvc/"/>
    <updated>2010-10-22T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/22/practical-jquery-mobile-with-asp-net-mvc</id>
    <content type="html"><![CDATA[<p>  <p>That's a bit of a mouthful.&nbsp; I wanted to write a post about creating a basic  jQuery Mobile app but as I started putting the code together MVC became more and  more involved so I combined the 2.</p><p>The end solution?&nbsp; Lets create a phone directory with 2 main views,</p><ol><li>A filterable list of all people with quick info (telephone extension and  name) that is grouped and sorted alphabetically, and,</li><li>A disclosure view of a selected person showing more details including a  photo</li></ol><p>[[posterous-content:FddxCHuIgArIuezHEbcn]]</p><h2>MVC (The Server Side)</h2><p>jQuery Mobile works by progressive enhancement and uses Ajax to load and  parse external links so it has more control over page transitions and Ajax  history.&nbsp; This means that we create a plain old website that will work without  jQuery Mobile, Ajax or any JavaScript.&nbsp; So I started with the ASP.NET MVC 2 Web  Application Visual Studio Template and ripped out everything bar the Home  Controller and the 2 views.&nbsp; I also stripped the Site.Master down to the bare  bones.</p><p>Next I created my model with data access methods,</p><p><script src="https://gist.github.com/640270.js"></script></p><p>You can implement your own data access there or just hard code some values.&nbsp;  Next I updated the HomeController to return the right models&nbsp; to the views</p><p><script src="https://gist.github.com/640281.js"></script></p><p>I updated the views to&nbsp;display the information in a straightforward way.&nbsp;</p><p>Index.aspx</p><p><script src="https://gist.github.com/640303.js"></script></p><p>About.aspx</p><p><script src="https://gist.github.com/640304.js"></script></p><p>This leaves us with a normal, not so pretty but fully functioning site.&nbsp;</p><p>[[posterous-content:DblJukiumuFlvvqlHokq]]</p><p>Now lets inject some mobile niceness into it,</p><h2>jQuery Mobile</h2><p>First things first lets put reference to jQuery and jQuery Mobile&nbsp; (script  and css) into our site master and update our DOCTYPE to the HTML5 DOCTYPE  leaving us with,</p><p><script src="https://gist.github.com/640308.js"></script></p><p>Now we need to tell jQuery Mobile how to layout the pages and mobilise.&nbsp; This  isn&rsquo;t necessarily done in script as you might think.&nbsp; jQuery Mobile makes use of  HTML5&rsquo;s data- attributes to identify how the page should be laid out and mark  areas to specific roles.</p><p>Index.aspx</p><p><script src="https://gist.github.com/640312.js"></script></p><p>About.aspx</p><p><script src="https://gist.github.com/640313.js"></script></p><p>So what have we added here?&nbsp;</p><ul><li>data-roles&nbsp;&ndash; telling jQuery Mobile what each div actually represents e.g.     <ul><li>page&nbsp;&ndash; a single view (a single html page can have multiple views)</li><li>header&nbsp;&ndash; the header of a page</li><li>content&nbsp;&ndash; the pages content</li><li>footer&nbsp;&ndash; the footer of a page</li><li>list-view&nbsp;&ndash; a special&nbsp;role to&nbsp;specifying &nbsp;that the content is a list</li><li>list-divider&nbsp;&ndash; a divide for a list that doesn&rsquo;t do anything but look  different</li></ul></li><li>data-filter&nbsp;&ndash; telling jQuery Mobile that&nbsp;it should provide filtering on this  view</li><li>ui-li-aside class identifies that this is some aside information for this  list item</li></ul><p>And that is it.&nbsp; We have taken a static site and without writing any code  (bar markup) created a mobile app.&nbsp; Probably might be a good idea to include an  application cache manifest file as well so there is some semblance of offline  capability provided.&nbsp; But that's for another day.</p><p>[[posterous-content:pJHwwsHHmrfAkJIJFkrp]]</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webforms & jQuery: A Comparison]]></title>
    <link href="http://yobriefca.se/blog/2010/10/18/webforms-jquery-a-comparison/"/>
    <updated>2010-10-18T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/18/webforms-jquery-a-comparison</id>
    <content type="html"><![CDATA[<p>  <p><em>This one has been pulled from the archives but I still think it is quite relevant</em></p><p>I tend to be a bit picky when it comes to seeing what is generated by server-side technologies. The first thing I do when I write a page (JSP, ASPX &ndash; whatever) that uses some sort of tag library or user control is check the resultant HTML/CSS/Javascript. When it comes to ASPX&rsquo;s this has always been a major issue for me &ndash; the code it generates, the JS it pulls down, the amount of redundant traffic, the actual quality of the code &ndash; all of it annoys me. Just out of curiosity I wanted to do a &ldquo;contrast and compare&rdquo; study to see the differences between the DIY approach and using Webforms&hellip;</p><p>The use case for the study is simple</p><ul><li>A simple screen with a star rating (1-5)</li><li>User selects a rating by clicking a star</li><li>The result is posted back, via ajax, to the server</li><li>The front end is updated with message indicating the selection and the rating system is disabled</li></ul><h2>Technologies Used</h2><table><tr><td><h3>Webforms</h3></td><td><h3>&nbsp;&nbsp; &nbsp;jQuery</h3></td></tr><tr><td valign="top"><p>ASP.NET ScriptManager Control</p><p>ASP.NET Update Panel Control</p><p>ASP.NET Ajax Toolkit Star Rating Control</p><p>ASP.NET Label Control</p></td><td valign="top"><p>&nbsp;&nbsp; &nbsp;ASP.NET MVC Framework</p><p>&nbsp;&nbsp; &nbsp;jQuery v1.3.2</p><p>&nbsp;&nbsp; &nbsp;<a href="http://www.fyneworks.com/jquery/star-rating/">jQuery Star Rating</a></p></td></tr></table><p>There is not much really to draw from this table except for Webforms the majority of the technology is server-side whereas the jQuery stuff is more client side focused. This is one of the big arguments that people use when arguing about webforms. It&rsquo;s all server side work which reduces client side scripting &ndash; but that&rsquo;s a bit blind. It&rsquo;s server-side for the developer but the end code isn&rsquo;t any less client side (it&rsquo;s simply auto-generated).</p><h2>Development Effort Required</h2><p>I&rsquo;m going to end up being biased on this. I am 10,000 times more familiar with the MVC paradigm and jQuery than I am with Webforms. Ultimately it took me about the same amount of time to knock up both applications. But here are some points to note.</p><h3>Webforms</h3><p>Drag and drop of all the controls to knock up a simple page. The bulk of the work came from my lack of understanding I guess. I initially stuck the Star Rating control on the page and set up the CSS Classes, this failed as I didn&rsquo;t have the ScriptManager control added to the page. The next issue I faced was that my server side code wasn&rsquo;t actually having any effect &ndash; I had to turn AutoPostBack on for it to work but this wasn&rsquo;t Ajax-y. I got around this by wrapping the code in an UpdatePanel.</p><p>[[posterous-content:bBdcwIItewquatsyfJyv]]</p><p>Default.aspx</p><p>[[posterous-content:vfJuAxpqzbFsFoFBFwAE]]</p><p>Default.aspx.cs &nbsp;(Code Behind)</p><h3>jQuery</h3><p>I used ASP.NET MVC framework to generate my empty page, and controller. I then added a simple one liner Action to my controller to handle the Ajax response. I included jQuery and Star Rating (JS &amp; CSS) to my page and 5 radio buttons that act as the star rating (automatic progressive enhancement) and wrote the initializer code for the star rating stuff. For me that was it &ndash; completely straight forward with little configuration.</p><p>[[posterous-content:xqpnygHdsdJiruvDqkpf]]</p><p>Index.aspx</p><p>[[posterous-content:kgpqwhjHGDbiqHJCCvCA]]</p><p>RatingController.cs</p><h2>Resultant Page Weight &amp; Render Time</h2><h3>Webforms</h3><p>[[posterous-content:uCAmokcAGoyHstBqGxsj]]</p><p>Page Weight</p><p>[[posterous-content:nDxjAJoJDbwurDtdAnvx]]</p><p>Render Time</p><h3>jQuery</h3><p>[[posterous-content:cHfxHIJCwxwiGDCgCIuw]]</p><p>Page Weight</p><p>[[posterous-content:zsChEvClgasifCgquBpo]]</p><p>Render Time</p><p>Now the real differences are starting to show. The jQuery Solution is light years ahead when it comes to page weight (with marginally faster render times). It&rsquo;s also worth noting here that the Webform solution automatically used GZIP compression for it&rsquo;s scripts whereas the MVC didn&rsquo;t so the results are actually skewed in favour of Webforms (not that it makes a difference).</p><p>Here in lies one of my issues with the Webform solution &ndash; it pulls down the massive ASP.NET JavaScript framework even though it doesn&rsquo;t use 99.9% of it. jQuery is a complete framework but it&rsquo;s ethos is that it gives you the bare minimum set of tools to get the job done. Look at my code (both server side and client side) &ndash; is it at all complex? Not really.</p><p>One argument I guess you could use here is that as the page grows the Webform solution, because it has most of the scripts it needs, shouldn&rsquo;t grow much bigger, where as the jQuery solution will. I haven&rsquo;t tested this so I could be wrong but it&rsquo;s a valid argument. That said given any situation I&rsquo;d be willing to bet I could at the very least match page weight and render time against any Webform solution using jQuery (and MVC).</p><h2>Server Responses</h2><h3>Webforms</h3><p>[[posterous-content:rChlEcegkzzzEgEkxiAc]]</p><p>Request Parameters</p><p>[[posterous-content:gIgansGldxpvrcfvkapa]]</p><p>Response Body</p><h3>jQuery</h3><p><img src="http://blogs.kainos.com/jameshu/files/2009/04/jquery-postparams.png" height="21" alt="jquery-postparams" width="70"></p><p>Request Parameters</p><p><img src="http://blogs.kainos.com/jameshu/files/2009/04/jquery-postresponse.png" height="21" alt="jquery-postresponse" width="70"></p><p>Response Body</p><p>Again there is a big difference here. Because a lot of stuff is automated on the Webform side there is a lot of configuration (Viewstate etc) that needs to be passed about. Even for this simple solution the overhead is considerable &ndash; Firefox is giving me traffic (response only sans headers) of 1 byte for jQuery and 3k for Webforms &ndash; now multiply that by 2 to roughly include the request as well.</p><p>Which is easier to understand here?</p><h2>Conclusion</h2><p>A lot of the arguments and observations brought up here aren&rsquo;t purely Webform vs jQuery related &ndash; a lot have to do with Client vs Server programming but they are still valid. I admit I have a firm grasp of client side coding so the choice for me is obvious but the results here speak for themselves &ndash; there is a considerable overhead involved in the Webform world that must be accepted if you want to be able to drag and drop controls and save possibly a small amount of development time.</p><p>I am in no way a veteran Webform developer and I am sure there are folks out there that could strip my example down to the bare minimum and get similar results and to them I open floor &ndash; bring it &ndash; I haven&rsquo;t begun!</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile Quick Look]]></title>
    <link href="http://yobriefca.se/blog/2010/10/18/jquery-mobile-quick-look/"/>
    <updated>2010-10-18T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/18/jquery-mobile-quick-look</id>
    <content type="html"><![CDATA[<p>  <p>jQuery Mobile was <span style="color: #1f497d;"><a href="http://jquerymobile.com/2010/10/jquery-mobile-alpha-1-released/">released</a></span> over the weekend or at least the alpha version of it was (full release scheduled for some time on 2011).&nbsp;</p><p>So what is it like?&nbsp; Well first things first it's early days, there are certainly more than few rough edges but given the development timeline (~2 months) it is quite an impressive effort put in by the <span style="color: #1f497d;"><a href="http://www.filamentgroup.com/">Filament Group</a></span> and others.</p><h2>iThings</h2><p>The first question most people will ask (or the first thing they will try and do) will probably be</p><blockquote><p style="padding-left: 30px;">So how does it look on the various iThings (iPad, iPhone, iPhone 4)?&nbsp;</p></blockquote><p>Well it looks good for the most part.&nbsp; There are some issues around page transitions and displaying dialogs (especially on the iPad) - things like page flickering, hidden content becoming visible after the page has loaded etc. and while they are a bit annoying they don't "break" anything.</p><p>As the framework isn't targeting iOS specifically there are some behaviours that would wouldn't necessarily expect if you used this as a native app (using PhoneGap or whatever).&nbsp; Toolbars aren't explicitly fixed and when they are fixed disappear on scroll and repositioned after scrolling has finished.&nbsp; Select boxes don't display the normal pickers found in native iOS but instead use a custom dialog for selection.&nbsp; Again these aren't criticisms, they work well, but I have heard people already complaining because they expect the framework to produce a fully native looking app.</p><h2>Sencha Touch</h2><p>When comparing frameworks many peoples first thoughts will be</p><blockquote><p style="padding-left: 30px;">How does it compare to <span style="color: #1f497d;"><a href="http://www.sencha.com/products/touch/">Sencha Touch</a></span>&nbsp;</p></blockquote><p>To be honest&nbsp; the comparison is like comparing apples to oranges, or jQueryUI to ExtJS.&nbsp; Both projects have also different goals.&nbsp; While Sencha currently aims to provide a rich native like experience on a small subset of mobile browsers (specifically iOS and Android), jQuery Mobile aims to create a consistent, mobile/touch capable experience across a much <span style="color: #1f497d;"><a href="http://jquerymobile.com/gbs/Touch">wider range of mobile browsers</a></span>.&nbsp; This is by no means easy.&nbsp; An interaction style one device may not be suitable for another.</p><h2>FOUC</h2><p>One of the goals of jQuery Mobile is to progressively enhance the base page to become more mobile capable.&nbsp; Because of this the base page is very basic with jQuery Mobile specific stylers applied when the DOM is ready.&nbsp; This can lead to some initial FOUC (Flash of Unstyled Content).&nbsp; We can get around this by applying some of the basic jQuery Mobile styles to begin with and I suspect we will see this tactic being used on future releases.</p><p>[[posterous-content:EeHJJwvCqFJrzcdxeEEb]]</p><h2>Accessibility</h2><p>One thing I never really though of in a Mobile Framework is accessibility.&nbsp; This is just short sightedness on my part as it is as relevant in the mobile world as it is in the desktop world.&nbsp; jQuery Mobile aiming to be fully accessible through it's use of ARIA roles and progressive enhancement.</p><h2>The Technicals</h2><p>From a technical/developer stand point jQuery Mobile is quite nice.&nbsp; Lets look at a few of the highlights,</p><h3>Pages</h3><p>Sites can be built as a single page with sub sections being marked as "pages" that jQuery Mobile can navigate.&nbsp; External pages are load using ajax (rather than simply navigating to them), this give jQuery Mobile better control over transitions, and history management.&nbsp; A simple page looks like this,</p><p><script src="https://gist.github.com/631896.js"></script></p><p>So lets break this down and pick out the interesting parts,</p><p><script src="https://gist.github.com/631897.js"></script></p><p>HTML5 DocType which older browsers can handle gracefully</p><p><script src="https://gist.github.com/631899.js"></script></p><p>Scripts and styles included.&nbsp; Now from a mobile perspective this is still quite a bit of script especially over some flaky 3G connections but in comparison to some of the frameworks out there it is still quite small.</p><p><script src="https://gist.github.com/631900.js"></script></p><p>This section describes 2 pages.&nbsp; A page is marked as a page by its <code>data-role</code> attribute and can contain 3 elements marking a header, the page content and the footer.&nbsp; Unless stipulated the first page will be first page in the DOM.&nbsp; Navigation between pages is handled using location.hash changes (page 1s button links to Page 2 in the example).</p><h3>Themeing</h3><p>Themeroller will see an overhaul on the official release which will allow you to create custom themes a la jQueryUI.&nbsp; Currently jQuery Mobile comes with 2 themes both of which have a number of swtaches.&nbsp; This is intended to create contrast between UI elements (e.g. for marking mandatory fields, or highlight primary buttons on a form etc.)</p><h3>Dialogs</h3><p>Dialogs in jQuery Mobile are simply pages with a <code>data-rel="dialog"</code> added to them so the same rules apply as above.</p><h3>Form Elements</h3><p>Forms in jQuery Mobile are plain old HTML(5) forms which is actually a VERY nice feature.&nbsp; Sencha/ExtJS forms are nice but when using SELECTs etc. can become a real pain to manage.&nbsp; jQuery Mobile uses a much lighter approach.&nbsp; Some screenshots (iPhone 4)</p><p>[[posterous-content:qipBwFyayBhuztrHFpJI]] So thats a very quick overview of jQuery Mobile.  I encourage you to play around with and get those bugs filed. &nbsp;As I've said it's early days but it's a big goal they are aiming for and they are currently well on track to produce a very nice framework come the official release.</p></p>
]]></content>
  </entry>
  
</feed>
