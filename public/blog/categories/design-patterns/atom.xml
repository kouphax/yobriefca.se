<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Design Patterns | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2013-01-21T12:00:38+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dependencies in JavaScript: Constructor, Setter or Global]]></title>
    <link href="http://yobriefca.se/blog/2012/08/21/dependencies-in-javascript-constructor/"/>
    <updated>2012-08-21T07:59:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/08/21/dependencies-in-javascript-constructor</id>
    <content type="html"><![CDATA[<p>There has been an interesting conversation on Twitter over the last number of hours between @derickbailey and a number of other people and it all started with this tweet,</p>

<blockquote class="twitter-tweet tw-align-center"><p>anyone have links to articles on why setter injection is evil? /cc <a href="https://twitter.com/jbogard"><s>@</s><b>jbogard</b></a> <a href="https://twitter.com/jeremydmiller"><s>@</s><b>jeremydmiller</b></a> <a href="https://twitter.com/jflanagan"><s>@</s><b>jflanagan</b></a> <a href="https://twitter.com/chadmyers"><s>@</s><b>chadmyers</b></a></p>&mdash; derickbailey (@derickbailey) <a href="https://twitter.com/derickbailey/status/237658824163614720" data-datetime="2012-08-20T21:14:13+00:00">August 20, 2012</a></blockquote>


<script src="http://yobriefca.se//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The conversation has been around using DI and IoC in JavaScript (yes I know they are not one in the same, and I know a Container is not a necessary part of DI or IoC thank you very much).  Simple answer is this - good patterns have a place in any language provided they aren't abused mercilessly.  But lets get back to the discussion - why would you use constructor injection over setter injection?  Is setter injection evil?  Obviously no strategy is actually evil per-say - just used in the wrong place at the wrong time. So lets go back to the first question - constructor injection vs. setter injection.</p>

<h2>Constructor Injection or Setter Injection</h2>

<p>The simplest answer to this was one I gave @derickbailey earlier,</p>

<blockquote class="twitter-tweet tw-align-center" data-in-reply-to="237664796298854401"><p><a href="https://twitter.com/derickbailey"><s>@</s><b>derickbailey</b></a> resolve mandatory dependenciesvia constructor injection, optional dependencies via setter.  This is a common convention.</p>&mdash; James Hughes (@kouphax) <a href="https://twitter.com/kouphax/status/237792703826522112" data-datetime="2012-08-21T06:06:13+00:00">August 21, 2012</a></blockquote>


<script src="http://yobriefca.se//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>This little bit of knowledge I've had since living down in the guts of Spring MVC about 5 years ago and it makes a lot of sense regardless of how those dependencies are getting in there.</p>

<h2>Fail Early</h2>

<p>When your code goes into an invalid state you want to fail as quickly as possible, this makes debugging much easier and prevents an avalanche of unexpected behaviour.  Using constructor injection (and asserting the existence of dependencies) gives you this ability.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">MyThingy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requiredA</span><span class="p">,</span> <span class="nx">requiredB</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">requiredA</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">requiredB</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// rest of my code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doAThing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span><span class="p">.</span><span class="nx">magic</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span><span class="p">.</span><span class="nx">beepboop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyThing</span><span class="p">();</span> <span class="c1">// FAIL FAIL FAIL</span>
</span><span class='line'><span class="nx">thing</span><span class="p">.</span><span class="nx">doAThing</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you tried to achieve the same thing with setter injection you would be failing much later in the proceedings,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">MyThingy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setRequiredA</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requiredA</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span> <span class="o">=</span> <span class="nx">requiredA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setRequiredB</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requiredB</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span> <span class="o">=</span> <span class="nx">requiredB</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doAThing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span><span class="p">.</span><span class="nx">magic</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span><span class="p">.</span><span class="nx">beepboop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyThing</span><span class="p">();</span>
</span><span class='line'><span class="nx">thing</span><span class="p">.</span><span class="nx">doAThing</span><span class="p">();</span> <span class="c1">// FAIL FAIL FAIL</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now imagine that the last two lines are miles apart in code-lines, you've gone and lost all context when debugging.  Sure in this trivial example it would be fairly easy to resolve this but if you've gone and lost the plot and created a heavily nested object graph you'll be crying before they day is out.</p>

<p>Now setter injection does have it's place - for <strong>optional</strong> dependencies,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">MyThingy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requiredA</span><span class="p">,</span> <span class="nx">requiredB</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">requiredA</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">requiredB</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// rest of my code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setOptionalC</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">optionalC</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">optionalC</span> <span class="o">=</span> <span class="nx">optionalC</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doAThing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">optionalC</span><span class="p">)</span> <span class="nx">optionalC</span><span class="p">(</span><span class="s2">&quot;doing a thing...&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span><span class="p">.</span><span class="nx">magic</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span><span class="p">.</span><span class="nx">beepboop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyThing</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">thing</span><span class="p">.</span><span class="nx">setOptionalC</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'><span class="nx">thing</span><span class="p">.</span><span class="nx">doAThing</span><span class="p">();</span> <span class="c1">// logs &quot;doing a thing...&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So the extension of the rule is that</p>

<blockquote><p>Anything injected via <strong>setter injection</strong> needs to be either defaulted initially or checked for existence before use.</p></blockquote>

<h2>Readability</h2>

<p>By following this convention, heck by following any agreed convention, you get better visibility of the expected behaviour of your code.  You know what the object needs to get the job done.  That feels like a poor argument but I think it still warrants a mention here.</p>

<h2>Over Engineering and Deep Graphs</h2>

<p>Obviously if you've over-designed your classes or it has grown out of control this approach becomes difficult to manage.  I've seen something akin to this in some projects,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CoordinatorOfAllTheThings</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">p</span><span class="p">....)</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Someone has decided to make every bit of functionality it's own little class or module and so the dependency graph has become incredibly broad.  In fact this might suggest they are creating a deep graph as well and simply passing the dependencies down the chain.  <strong>If you have a lot of dependencies then there is something wrong with the object you are creating</strong>.</p>

<p>For fine grained, inter-object communication dependency injection is fine but when you are scaling up to more coarse, inter-module or component communication an evented or message based approach is almost always a better option.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// rest of previous code</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doAThing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">EventStream</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;doneathing&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">EventStream</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">trigger</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</span><span class='line'>    <span class="nx">on</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">OtherThing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requiredD</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">EventStream</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;doneathing&quot;</span><span class="p">,</span> <span class="nx">requiredD</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyThingy</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">other</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OtherThing</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;stuff done&quot;</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">thing</span><span class="p">.</span><span class="nx">doAThing</span><span class="p">();</span> <span class="c1">// logs &quot;stuff done&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is a rather contrived example but it should server a point.</p>

<h3>The Global Issue</h3>

<p>You'll notice the EventStream object in the code above is global, you'll also notice I have skipped part of this posts title  (... or Global).  Lets come to that now.  It is possible to achieve the same results as constructor/setter injection using global scope,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">MyThingy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">global</span><span class="p">.</span><span class="nx">requiredA</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">global</span><span class="p">.</span><span class="nx">requiredB</span><span class="p">)</span> <span class="k">throw</span> <span class="s2">&quot;Missing Dependency&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// rest of my code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doAThing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">global</span><span class="p">.</span><span class="nx">requiredA</span><span class="p">.</span><span class="nx">magic</span><span class="p">()</span> <span class="o">+</span> <span class="nx">global</span><span class="p">.</span><span class="nx">requiredB</span><span class="p">.</span><span class="nx">beepboop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyThing</span><span class="p">();</span> <span class="c1">// FAIL FAIL FAIL</span>
</span><span class='line'><span class="nx">thing</span><span class="p">.</span><span class="nx">doAThing</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So rather than inject the necessary dependencies in we are relying on the fact they exist in global scope.  This works fine in some situations.  The EventStream object above is a global hub that can be used throughout the application.  I'm ok with that.  The risk of global scope is that it's easy for objects to be redefined by other actors in your system so existence or behaviour is never guaranteed.  So use sparingly.</p>

<h2>Moptional</h2>

<p>The other alternative approach would be to make everything Moptional.  That is, anything mandatory should be instantiated with a default and provide setter injection for changing default behaviour.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">MyThingy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DefaultRequiredA</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DefaultRequiredB</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// rest of my code</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setRequiredA</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requiredA</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span> <span class="o">=</span> <span class="nx">requiredA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setRequiredB</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requiredB</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span> <span class="o">=</span> <span class="nx">requiredB</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MyThingy</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doAThing</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredA</span><span class="p">.</span><span class="nx">magic</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">requiredB</span><span class="p">.</span><span class="nx">beepboop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">thing</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyThing</span><span class="p">();</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setRequiredB</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomRequiredB</span><span class="p">())</span>
</span><span class='line'><span class="nx">thing</span><span class="p">.</span><span class="nx">doAThing</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You kind of get the best of worlds here - not having to worry about default behaviour but have the ability to override this (for example in testing).  But then you need to think about this.  Why are you providing this sort of strategy?  Are you simply hiding all implementation for an object but providing setters and getter to simply aid testing?  If that's the case - STOP.  Your code should be testable but you should not change your code to simply aid testing.  Perhaps its time to go back and re-think your strategy?  Also, for testing - it's entirely possible, given the dynamic nature of JavaScript, to redefine the internal dependencies prior to them being instantiated in your object anyway.  Don't add features or behaviour that you don't actually need to deliver the solution.</p>

<h2>Wrap Up</h2>

<p>This was playing over and over on my ride into work this morning (I cycle I have a lot of thinking time) and I wanted to get it out there.  Hopefully be useful to people asking some questions on this topic.</p>

<p>Oh and IoC <strong>Containers</strong> in JavaScript...... don't.</p>

<p>My $0.02</p>
]]></content>
  </entry>
  
</feed>
