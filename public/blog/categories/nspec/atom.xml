<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>nspec | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/nspec/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-10-06T10:26:40+01:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging NSpec Tests: The DebuggerShim]]></title>
    <link href="http://yobriefca.se/blog/2011/07/05/nspec-debuggershim/"/>
    <updated>2011-07-05T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/07/05/nspec-debuggershim</id>
    <content type="html"><![CDATA[<p>  <p>Busy busy busy.  I&#8217;ve been working away on a lot of projects and not had a lot of time to stick anything up on this blog in a while.  I&#8217;ve got a growing &#8220;To Blog&#8221; list but no time to do it, woe is me!!!<br><img src="http://yobriefca.se/images/woeisme.png" style="float:right;"></p><p>Enough about my perfectly normal life, well almost.  Some of my current work has me going full tilt with <span class="caps">TDD</span> on a little C# project and I decided that <a href="http://nspec.org">NSpec</a> would help me with unit testing.  So I went about writing failing tests, writing code, passing tests on and on and on.  Things went along fairly well until I hit a little bit of a wall around a little edge case.  My tests kept failing and I couldn&#8217;t understand why.  The stack trace made little to no sense and my code looked sound.  The problem I had was that <a href="http://nspec.org">NSpec</a>, out of the box at least, doesn&#8217;t have any nice integration with Visual Studio or TestDriven.<span class="caps">NET</span>.  Initially I was using a throw away console application and debugging through it but as you can imagine that was time consuming.</p><p>It wasn&#8217;t long though until I was pointed in the <a href="http://twitter.com/#!/amirrajan/status/87174922782253056">right direction</a>.</p><p><!-- http://twitter.com/#!/amirrajan/status/87174922782253056 --> <style type='text/css'>.bbpBox87174922782253056 {background:url(http://a0.twimg.com/images/themes/theme1/bg.png) #C0DEED;padding:20px;} p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px} p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6} p.bbpTweet span.metadata span.author{line-height:19px} p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px} p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}</style> <div class='bbpBox87174922782253056'><p class='bbpTweet'>If you want to have debugger support for you NSpec specifications, use this: <a href="http://t.co/6SwZcVL" rel="nofollow">http://t.co/6SwZcVL</a> /cc @<a class="tweet-url username" href="http://twitter.com/kouphax" rel="nofollow">kouphax</a> @<a class="tweet-url username" href="http://twitter.com/mattflo" rel="nofollow">mattflo</a><span class='timestamp'><a title='Sat Jul 02 15:04:55 +0000 2011' href='http://twitter.com/#!/amirrajan/status/87174922782253056'>less than a minute ago</a> via web <a href='http://twitter.com/intent/favorite?tweet_id=87174922782253056'><img src='http://si0.twimg.com/images/dev/cms/intents/icons/favorite.png'> Favorite</a> <a href='http://twitter.com/intent/retweet?tweet_id=87174922782253056'><img src='http://si0.twimg.com/images/dev/cms/intents/icons/retweet.png'> Retweet</a> <a href='http://twitter.com/intent/tweet?in_reply_to=87174922782253056'><img src='http://si0.twimg.com/images/dev/cms/intents/icons/reply.png'> Reply</a></span><span class='metadata'><span class='author'><a href='http://twitter.com/amirrajan'><img src='http://a2.twimg.com/profile_images/1326219901/1613d80124a605829d755d9df0fc8b9e_normal.jpeg'></a><strong><a href='http://twitter.com/amirrajan'>Amir Rajan</a></strong><br>amirrajan</span></span></p></div> <!-- end of tweet --></p><p>The gist, in full below, provides a simple debugger shim over nspec that allows you to hook into the Visual Studio debugger (through something like TestDriven.<span class="caps">NET</span> for example).  I simply right clicked on the shim and select &#8220;Run With Debugger&#8221; and boom my stupid mistake was displayed to me rather quickly.</p><script src='https://gist.github.com/1065724.js?file=DebuggerShim.cs'></script><noscript><pre><code>using System;using NUnit.Framework;using NSpec.Domain;using System.Reflection;using NSpec;namespace DynamicBlog.Tests{    [TestFixture]    public class DebuggerShim    {        [Test]        public void debug()        {            //the specification class you want to test            //this can be a regular expression            var testClassYouWantToDebug = "describe_Blog";            //initialize NSpec's specfinder            var finder = new SpecFinder(                Assembly.GetExecutingAssembly().Location,                 new Reflector(),                 testClassYouWantToDebug);                        //initialize NSpec's builder            var builder = new ContextBuilder(                finder,                 new DefaultConventions());            //this line runs the tests you specified in the filter            new ContextRunner(builder).Run();        }    }}</code></pre></noscript><p>Handy until a more concrete solution appears.  One more thing &#8211; really enjoying nspec, it seems to be fitting well with the way I work.</p></p>
]]></content>
  </entry>
  
</feed>
