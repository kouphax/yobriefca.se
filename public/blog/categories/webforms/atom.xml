<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>WebForms | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/webforms/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-03-19T13:41:13+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webforms & jQuery: A Comparison]]></title>
    <link href="http://yobriefca.se/blog/2010/10/18/webforms-jquery-a-comparison/"/>
    <updated>2010-10-18T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/18/webforms-jquery-a-comparison</id>
    <content type="html"><![CDATA[<p>  <p><em>This one has been pulled from the archives but I still think it is quite relevant</em></p><p>I tend to be a bit picky when it comes to seeing what is generated by server-side technologies. The first thing I do when I write a page (JSP, ASPX &ndash; whatever) that uses some sort of tag library or user control is check the resultant HTML/CSS/Javascript. When it comes to ASPX&rsquo;s this has always been a major issue for me &ndash; the code it generates, the JS it pulls down, the amount of redundant traffic, the actual quality of the code &ndash; all of it annoys me. Just out of curiosity I wanted to do a &ldquo;contrast and compare&rdquo; study to see the differences between the DIY approach and using Webforms&hellip;</p><p>The use case for the study is simple</p><ul><li>A simple screen with a star rating (1-5)</li><li>User selects a rating by clicking a star</li><li>The result is posted back, via ajax, to the server</li><li>The front end is updated with message indicating the selection and the rating system is disabled</li></ul><h2>Technologies Used</h2><table><tr><td><h3>Webforms</h3></td><td><h3>&nbsp;&nbsp; &nbsp;jQuery</h3></td></tr><tr><td valign="top"><p>ASP.NET ScriptManager Control</p><p>ASP.NET Update Panel Control</p><p>ASP.NET Ajax Toolkit Star Rating Control</p><p>ASP.NET Label Control</p></td><td valign="top"><p>&nbsp;&nbsp; &nbsp;ASP.NET MVC Framework</p><p>&nbsp;&nbsp; &nbsp;jQuery v1.3.2</p><p>&nbsp;&nbsp; &nbsp;<a href="http://www.fyneworks.com/jquery/star-rating/">jQuery Star Rating</a></p></td></tr></table><p>There is not much really to draw from this table except for Webforms the majority of the technology is server-side whereas the jQuery stuff is more client side focused. This is one of the big arguments that people use when arguing about webforms. It&rsquo;s all server side work which reduces client side scripting &ndash; but that&rsquo;s a bit blind. It&rsquo;s server-side for the developer but the end code isn&rsquo;t any less client side (it&rsquo;s simply auto-generated).</p><h2>Development Effort Required</h2><p>I&rsquo;m going to end up being biased on this. I am 10,000 times more familiar with the MVC paradigm and jQuery than I am with Webforms. Ultimately it took me about the same amount of time to knock up both applications. But here are some points to note.</p><h3>Webforms</h3><p>Drag and drop of all the controls to knock up a simple page. The bulk of the work came from my lack of understanding I guess. I initially stuck the Star Rating control on the page and set up the CSS Classes, this failed as I didn&rsquo;t have the ScriptManager control added to the page. The next issue I faced was that my server side code wasn&rsquo;t actually having any effect &ndash; I had to turn AutoPostBack on for it to work but this wasn&rsquo;t Ajax-y. I got around this by wrapping the code in an UpdatePanel.</p><p>[[posterous-content:bBdcwIItewquatsyfJyv]]</p><p>Default.aspx</p><p>[[posterous-content:vfJuAxpqzbFsFoFBFwAE]]</p><p>Default.aspx.cs &nbsp;(Code Behind)</p><h3>jQuery</h3><p>I used ASP.NET MVC framework to generate my empty page, and controller. I then added a simple one liner Action to my controller to handle the Ajax response. I included jQuery and Star Rating (JS &amp; CSS) to my page and 5 radio buttons that act as the star rating (automatic progressive enhancement) and wrote the initializer code for the star rating stuff. For me that was it &ndash; completely straight forward with little configuration.</p><p>[[posterous-content:xqpnygHdsdJiruvDqkpf]]</p><p>Index.aspx</p><p>[[posterous-content:kgpqwhjHGDbiqHJCCvCA]]</p><p>RatingController.cs</p><h2>Resultant Page Weight &amp; Render Time</h2><h3>Webforms</h3><p>[[posterous-content:uCAmokcAGoyHstBqGxsj]]</p><p>Page Weight</p><p>[[posterous-content:nDxjAJoJDbwurDtdAnvx]]</p><p>Render Time</p><h3>jQuery</h3><p>[[posterous-content:cHfxHIJCwxwiGDCgCIuw]]</p><p>Page Weight</p><p>[[posterous-content:zsChEvClgasifCgquBpo]]</p><p>Render Time</p><p>Now the real differences are starting to show. The jQuery Solution is light years ahead when it comes to page weight (with marginally faster render times). It&rsquo;s also worth noting here that the Webform solution automatically used GZIP compression for it&rsquo;s scripts whereas the MVC didn&rsquo;t so the results are actually skewed in favour of Webforms (not that it makes a difference).</p><p>Here in lies one of my issues with the Webform solution &ndash; it pulls down the massive ASP.NET JavaScript framework even though it doesn&rsquo;t use 99.9% of it. jQuery is a complete framework but it&rsquo;s ethos is that it gives you the bare minimum set of tools to get the job done. Look at my code (both server side and client side) &ndash; is it at all complex? Not really.</p><p>One argument I guess you could use here is that as the page grows the Webform solution, because it has most of the scripts it needs, shouldn&rsquo;t grow much bigger, where as the jQuery solution will. I haven&rsquo;t tested this so I could be wrong but it&rsquo;s a valid argument. That said given any situation I&rsquo;d be willing to bet I could at the very least match page weight and render time against any Webform solution using jQuery (and MVC).</p><h2>Server Responses</h2><h3>Webforms</h3><p>[[posterous-content:rChlEcegkzzzEgEkxiAc]]</p><p>Request Parameters</p><p>[[posterous-content:gIgansGldxpvrcfvkapa]]</p><p>Response Body</p><h3>jQuery</h3><p><img src="http://blogs.kainos.com/jameshu/files/2009/04/jquery-postparams.png" height="21" alt="jquery-postparams" width="70"></p><p>Request Parameters</p><p><img src="http://blogs.kainos.com/jameshu/files/2009/04/jquery-postresponse.png" height="21" alt="jquery-postresponse" width="70"></p><p>Response Body</p><p>Again there is a big difference here. Because a lot of stuff is automated on the Webform side there is a lot of configuration (Viewstate etc) that needs to be passed about. Even for this simple solution the overhead is considerable &ndash; Firefox is giving me traffic (response only sans headers) of 1 byte for jQuery and 3k for Webforms &ndash; now multiply that by 2 to roughly include the request as well.</p><p>Which is easier to understand here?</p><h2>Conclusion</h2><p>A lot of the arguments and observations brought up here aren&rsquo;t purely Webform vs jQuery related &ndash; a lot have to do with Client vs Server programming but they are still valid. I admit I have a firm grasp of client side coding so the choice for me is obvious but the results here speak for themselves &ndash; there is a considerable overhead involved in the Webform world that must be accepted if you want to be able to drag and drop controls and save possibly a small amount of development time.</p><p>I am in no way a veteran Webform developer and I am sure there are folks out there that could strip my example down to the bare minimum and get similar results and to them I open floor &ndash; bring it &ndash; I haven&rsquo;t begun!</p></p>
]]></content>
  </entry>
  
</feed>
