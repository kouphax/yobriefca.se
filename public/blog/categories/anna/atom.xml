<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Anna | Yo Briefcase!]]></title>
  <link href="http://kouphax.github.com/blog/categories/anna/atom.xml" rel="self"/>
  <link href="http://kouphax.github.com/"/>
  <updated>2012-02-26T20:14:52+00:00</updated>
  <id>http://kouphax.github.com/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Micro Web Frameworks in .NET 101: Anna]]></title>
    <link href="http://kouphax.github.com/blog/2011/06/22/micro-web-frameworks-101-anna/"/>
    <updated>2011-06-22T00:00:00+01:00</updated>
    <id>http://kouphax.github.com/blog/2011/06/22/micro-web-frameworks-101-anna</id>
    <content type="html"><![CDATA[<p>  <blockquote class="announce">This post is the is part of series of posts covering the various <em>micro web frameworks</em> in the .<span class="caps">NET</span> world.  The frameworks I intend to cover will be linked as the series progresses.  For further discussion on the use of micro web framework in .<span class="caps">NET</span> please see my <a href="http://kouphax.github.com/blog/2011/05/18/why-use-micro-web-frameworks-in-net/">previous post</a> The current series line up:<ul>  <li><a href="http://kouphax.github.com/blog/2011/05/19/micro-web-frameworks-101-jessica/">Jessica</a></li>  <li><a href="http://kouphax.github.com/blog/2011/05/23/micro-web-frameworks-101-nancy/">Nancy</a></li>  <li><a href="http://kouphax.github.com/blog/2011/06/22/micro-web-frameworks-101-anna/">Anna</a></li>    <li><a href="http://kouphax.github.com/blog/2011/07/18/micro-web-frameworks-101-tinyweb//">Tinyweb</a><br></li></ul></blockquote><p>It&#8217;s been a while since I visited this subject (at least in my blog) and I&#8217;ve still to record a lot of screencasts around Nancy.  Anyway I thought I&#8217;d give a quick mention to <a href="https://github.com/jfromaniello/Anna/">Anna</a> that has just come up on my radar.  Now the project is still in the very early stages but it&#8217;s possibly one of the best uses of <a href="http://msdn.microsoft.com/en-us/data/gg577609">Rx</a> and worth a quick look.  Now I am a bit rusty in the old Rx stuff so sorry if I say something stupid.</p><h2>Getting Started &#8211; Hello World</h2><p><a href="https://github.com/jfromaniello/Anna/">Anna</a> aims to be an asynchronous event-driven <span class="caps">HTTP</span> server in a similar vein to <a href="http://nodejs.org/">node.js</a>.  At it&#8217;s core is the <code>HttpServer</code> object that allows us to wire up routes.</p><p>There is no configuration required &#8211; just install <a href="https://github.com/jfromaniello/Anna/">Anna</a>  from the Nuget Package Console via <code>Install-Package Anna</code> and you are good to go.  Just create a console application with the infamous <code>Program.cs</code> and a few lines of code gives you the <code>Hello World</code> solution,</p><script src='https://gist.github.com/1038740.js?file=Program.cs'></script><noscript><pre><code>using (var server = new HttpServer("http://localhost:1234/")){    server.GET("/").Subscribe(context =&gt;         context.Respond("Hello World"));    Console.ReadLine();}</code></pre></noscript><p>I added the <code>Console.ReadLine()</code> to stop the console app exiting and cleaning things up.  Running the app and going to <code>http://localhost:1234</code> gives you the result.  The <code>HttpServer</code> object has a number of methods for the various <span class="caps">HTTP</span> verbs and these methods all return instances of <code>IObservable</code> which means you can subscribe to them and apply all those filters, transforms etc. the Rx offers.</p><h2>Other Anna Features</h2><p>As I said <a href="https://github.com/jfromaniello/Anna/">Anna</a>  is still in the early stages so once you grab a route there isn&#8217;t a <span class="caps">MASSIVE</span> amount you can do with but respond.  Responses however are chainable so you can create an almost middleware like stack for requests e.g.</p><script src='https://gist.github.com/1038778.js?file=Anna.cs'></script><noscript><pre><code>var route = server.GET("/");route.Subscribe(context =&gt; context.Respond("Hello "));route.Subscribe(context =&gt; context.Respond("World"));</code></pre></noscript><p>This gives you the same output as the original Hello World sample.</p><p>But from what I can see thats about as far as you can get.  In <a href="http://nodejs.org/">node.js</a> there is a framework called <a href="http://senchalabs.github.com/connect/">Connect</a> now I&#8217;m not sure if <a href="https://github.com/jfromaniello/Anna/">Anna</a>  is intending to go in this sort of direction but I think it could be moulded into something like this with a bit of <span class="caps">TLC</span>.  The problem is at the minute I don&#8217;t see any sort of object passed along the subscription chain e.g. a <code>dynamic</code> bag or something. I don&#8217;t even know how to easily manage response headers.</p><h3>Routes and Route Fragments</h3><p><a href="https://github.com/jfromaniello/Anna/">Anna</a>  supports creating different routes including routes with dynamic sections <code>/name/{name}</code> that are used to populated a <code>UriFragments</code> property,</p><script src='https://gist.github.com/1038812.js?file=Fragments.cs'></script><noscript><pre><code>server.GET("/hello/{name}").Subscribe(context =&gt; context.Respond(    string.Format("Hello {0}", context.Request.UriArguments.name)));</code></pre></noscript><h3>Conditional Routes</h3><p>Thanks to the power of Rx and Linq it is possible to create conditional routes an create chains that have pre-response checks.  For example we can have a route that only triggers a response if the QueryString has a secret parameter.</p><script src='https://gist.github.com/1038831.js?file=Secret.cs'></script><noscript><pre><code>var route = server.GET("/");route.Subscribe(context =&gt; context.Respond("&lt;h1&gt;Hello World<p>&#8220;));<br>route.Where(ctx =&gt; ctx.Request.QueryString.secret == &#8220;letmein&#8221;)<br>     .Subscribe(ctx =&gt; ctx.Respond(&#8220;<h2>Secret Message</h2>&#8221;));</code></pre></noscript><p><p>So if you hit <code>http://localhost:1234/</code> you get Hello World.  Hit that again with the param <code>?/secret=letmein</code> and you get the super secret message.</p><h2>Conclusion</h2><p>Thats about it for now but I think I&#8217;ll be keeping an eye on this project and see were it goes.  Even though it&#8217;s still early days I like the concept behind the library and the fresh approach it&#8217;s taking.  I&#8217;ll push some of my sample code up to Github and update this post in the next few days.  In the meantime Jose the creator of Anna has <a href="http://joseoncode.com/2011/06/17/event-driven-http-server-in-c-with-rx-and-httplistener/">some nice examples</a> of Rx based HttpServer stuff on his blog featuring a long polling example.</p></p>
]]></content>
  </entry>
  
</feed>
