<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Miscellaneous | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/miscellaneous/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-04-17T22:30:33+01:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Alfred Hack for Web Developers]]></title>
    <link href="http://yobriefca.se/blog/2012/04/03/alfred-hack-for-web-developers/"/>
    <updated>2012-04-03T17:24:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/04/03/alfred-hack-for-web-developers</id>
    <content type="html"><![CDATA[<p>I've been a fan of <a href="http://www.alfredapp.com/">Alfred</a> for some time and use it to make pretty much everything a keystroke away.  I've thrown a very small little extension that reduces the time to jump between console and newly started web app.  Generally during development we need to run our app jump to <code>localhost:PORT</code> and make sure it's working.  If, like me, you have a lot of different apps and platforms (Scala, Jekyll, Rails, Sinatra, Express to name a few) then <code>PORT</code> becomes the one thing you always need to type and the browsers auto predict is generally not that helpful in this situation.</p>

<p>Alfred to the rescue here, just create a script as shown below and then running alfred and typing <code>l 9000</code> you can launch your default browser at <code>http://localhost:9000</code>.  Very simple but saves me heaps of time at the minute.</p>

<p><img class="borderless" src="/images/blog/alfredscript.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking the Stairs]]></title>
    <link href="http://yobriefca.se/blog/2012/03/06/taking-the-stairs/"/>
    <updated>2012-03-06T23:22:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/03/06/taking-the-stairs</id>
    <content type="html"><![CDATA[<p>Ya'll about ready for another silly analogy?  I sure am....</p>

<p>I work on the 6th floor and recently decided to start taking the stairs.  Mostly because I've let myself go and I really need to drop a few pounds and those stairs are a bit of a hard slog.  But it's worth it.  <!-- more --> It's funny how much of a better understanding of the building layout I get by just putting in the extra effort and going up the stairs.  The stairwell itself is pretty bland but I see extra doors, and I now know were many of doors could lead.</p>

<p>So the analogy... Taking the stairs is a bit like the whole software craftsmanship thing.  Sure I could just take the prescribed route, the default stack so to speak, and as with the stairs I'd probably get where I was going for a lot of the time.  But you know what?  I'd not know much more than the average person.  What if that lift was over capacity, out of order or just smelling of urine - I'd be able to manage just fine without getting stranded on a random floor wondering what to do next, if that door I never tried went were I wanted.  Imagine the stress involved if I was already late for a meeting.  Crickey!</p>

<p>So I put the extra effort in to understand things, and it's already given me a better perspective on things.  It's shown me other options, the ability to decide if the what I am doing is a good approach or perhaps there is a quicker, better, healthier route.</p>

<p>How does that grab you?</p>

<p>I really need to get off this analogy trip I'm on FFS!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Estimation 4x4]]></title>
    <link href="http://yobriefca.se/blog/2012/02/12/the-estimation-4x4/"/>
    <updated>2012-02-12T19:36:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/02/12/the-estimation-4x4</id>
    <content type="html"><![CDATA[<blockquote><p>This post is dedicated to one of the most influential managers I've ever had the pleasure to work with.</p></blockquote>

<p>I'm of the opinion that the moment you start trying to apply complex mathematical rigour and time to estimation you've entered into a broken system. <!-- more --> You're wasting time trying to protect yourself from finger pointing managers or getting a kicking from old school "us or them" lawyer types. None of that adds anything to the project except a big stick to beat people with and make sure they work themselves to death based a a random stab in the dark that is somehow made more realistic by the application if science. Ultimately though if the initial guesswork is wrong, and it's seldom on the nose, the science means sweet FA. So why bother? You're pleasing the wrong people. But then those people hold a lot of power.  So as long as we can keep them happy with the minimum of effort life should be sweet.</p>

<h2>The Answer</h2>

<p>Ladies and gentlemen I bring you the <strong>Estimation 4x4</strong> - guaranteed to knock those super science estimation techniques out of the park.</p>

<h2>The Science Bit</h2>

<p>Got a project to estimate?  I've done your homework for you - <strong>4 people, 4 weeks</strong>.  BOOM!  Mind Blown!  Now get on with delivering that project bro.  Oh wait it's a big ass project - 4 people, 4 months.  Oh wait you're limited by deadlines and/or resourcing - adjust as needed (3 people, 5 weeks or 5 people, 3 weeks).</p>

<h2>Balancing Act</h2>

<p>Careful now, 9 women dont make a baby in 1 month so don't assume that scaling one side up to cater for the other will get the same results.  Theres a balance that needs addressed.  This is real science after all - repsect the rule and the rule will respect you.</p>

<h2>You Gotta Be Kidding Me</h2>

<p>Dont believe me?  Try it out next time.  Do your pseudo-scientific enterprise-ready finger in the air analysis.  But hey see when that project is finished see how close the 4x4 would have brought you to the real result.  I bet 9 times out of 10 it was as accurate as your real estimate, except you could have started much sooner....</p>

<p> #winning</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caveat Abstractor]]></title>
    <link href="http://yobriefca.se/blog/2012/02/09/caveat-abstractor/"/>
    <updated>2012-02-09T08:37:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/02/09/caveat-abstractor</id>
    <content type="html"><![CDATA[<p><em>Ramblings from 30,000ft.  The word abstraction is starting to sound odd.</em></p>

<p>Every time you create an abstraction there is a very good chance you've introduced unnecessary complexity into a solution.  It should never be done alone - it should be a team decision.  The goal of an abstraction is to simplify but in its untamed natural form an abstraction will only add complexity.</p>

<!-- more -->


<p>As programmers it's easy to fall into the trap whereby we want the code that we write to be the last time anyone ever has to write that code again.  We dream of creating reusable works of art that ever other developer will use and never be concerned with the low level implementation ever again.</p>

<p>This is wrong and impossible.  An anti-pattern even!</p>

<p>It baffles me that anyone would create an abstraction that they didn't have a need for at the time. It's wasteful and degrades the readability, grokability and all those other good "ilities" we use.  Of course I say this like i don't do it myself but I'd be lying to you and myself.</p>

<p>An abstraction, by definition, is an intentional hiding of implementation and knowledge but surely understanding of these things will lead to a higher chance of success in a project?  The person that created the abstraction has that understanding but it's like they dont want anyone else to know how it works.  They're ready to take that secret to their grave.</p>

<p>When you start to abstract you need to remind yourself you are building a specific solution and not a framework (unless you are of course).  Abstractions should be done only within the scope of the project and you should have a strong case to back up its creation (make the decision a team effort).  This may sound like overhead but if you find it difficult to justify the creation odds are the abstraction is unnecessary.</p>

<p>Abstractions should not be grand, they should be light and convey their intent clearly by other people (pair programming and peer review will help weed out any verbose abstractions).</p>

<p>If you are creating an abstraction for anything other than DRY, odds are youre probably creating it for YAGNI.  You'll start considering irrelevant use cases and having to cater for insane edge cases.  This will happen even if you are taking a strong test driven approach - you'll concern youself with the workings of the abstraction rather then the problem you are solving and begin creating endless "what if" tests to cater for all those "0.00000001% chance of happening" edge cases. When this happens youre going to end up in mediocrity.  Mediocre abstractions attract more abstraction.  Even in a shared codebase bad abstractions create a certain amount of implied ownership to the person that created it. Inevitably someone will come along and create an abstraction around your abstraction (even if they have access to the original source).  This in turn will likely become YAMA (Yet Another Mediocre Abstraction) attracting yet more abstraction.... You can guess where I am going with that one... Its abstractions all the way down and everytime you abstract you've decreased system comphension and likely destroyed another future developers soul.</p>

<p>In the same way guns dont kill people, people do - Abstraction dont kill projects, developers do.  You've only got yourself to blame (been there done that, will be again).  A nice simple abstraction, at the right time (e.g. When needed) can be expressive and helpful but too often we put the abstraction before the need.</p>

<p>So consider abstractions as “guilty until proven innocent” not the other way around.  Solve YOUR problem - not every other problem, not until you need to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Craftmanship and Understanding, I Guess]]></title>
    <link href="http://yobriefca.se/blog/2012/01/31/on-craftmanship/"/>
    <updated>2012-01-31T16:53:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/01/31/on-craftmanship</id>
    <content type="html"><![CDATA[<p>You can stand at the station and wait for the train.  You know the one. It's the one that's always late, always packed with people, head down staring at the ground.  Or, you can walk the tracks with your own two feet. When you walk the tracks you take in your surroundings, you understand the route and you see the alternatives.  You wont beat the train everytime but when you walk the tracks you'll have better stories to tell when you get there.</p>
]]></content>
  </entry>
  
</feed>
