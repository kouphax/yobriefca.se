<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Miscellaneous | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/miscellaneous/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-07-18T22:57:55+01:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin: Here's What I Think (For Now)]]></title>
    <link href="http://yobriefca.se/blog/2012/07/15/kotlin-heres-what-i-think/"/>
    <updated>2012-07-15T16:43:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/07/15/kotlin-heres-what-i-think</id>
    <content type="html"><![CDATA[<blockquote><p>Before I go shooting my mouth off here - a word of warning - I haven't really done anything with Kotlin.  I've read the docs, played with the <a href="https://github.com/dodyg/Kotlin101">Kotlin 101 samples</a> and written a few small console type apps.  So take what you want from this post.</p></blockquote>

<p>Want to hear something zany?  There actually are people - real living people, with a fully working brain, many much smarter than me - that are "happy" with Java.</p>

<p>Seriously.</p>

<p>I made a move from Java to .NET about 5 years ago and have dipped back in a few times over that period.  Trying new languages is a sure fire way, for some at least, to make you realise Java is not a language that makes coding fun, or productive.  Java put me right of the JVM.  Any language that makes woking with collections (something you'll do alot) so long winded and noisy deserves to be shunned.  But this isn't a Java rant - the JVM is great but it's just marketed badly because of Java.</p>

<p>But all the JVM-hate that Java instilled in me 5 years ago; the last 6 months of working with Scala has replaced with love.  So I've been looking around the JVM world and discovered <a href="http://kotlin.jetbrains.org/">Kotlin</a> a new JVM based language from JetBrains.  Its much closer to Java than what Scala or Clojure is (intentionally).</p>

<p>One main thing that Kotlin brings to the table is pragmatism.  Without trying to belittle Kotlin - it's almost like CoffeeScript for Java (yep kind of like what <a href="http://www.eclipse.org/xtend/">Xtend</a> is.  Kotlin removes all those annoying necessities in Java that make your code verbose (checked exceptions, semi-colons, null reference checks etc.).  It also adds things that make your life much easier (extension methods, functional collection manipulation etc.).</p>

<p>When you write Ruby for the first time you notice that many things just work out like you'd expect, the syntax is quite natural.  The same cannot be said for Java - there is just way too much boilerplate.  Kotlin helps reduce that boilerplate.  So, by extension, it could be said that Kotlin makes you more productive.  A person who knows Java will find Kotlin no challenge to start using - the syntax is nicely aligned, just without the noise.</p>

<p>Many people, when trying to get their team to adopt Scala, use the "you can use Scala like Java til you get used to it" mantra.  I don't agree with that.  Academically it's true but the minute you start working with other peoples Scala code - you've just gotta know Scala and when they have a slew of Implicits thrown in your Scala as Java stuff goes out the window.  Kotlin, on the other hand, has some of the nice functional patterns from Scala but none of the "magic-to-a-newcomer" features that can make grown men weep.  Now the Kotlin docs themselves even go as far as stating</p>

<blockquote><p>  If you are happy with Scala, you probably don't need Kotlin.</p></blockquote>

<p>But I think they are selling themselves short - I think plenty of people use Scala but could easily use Kotlin in its place and find themselves in a better place (easier upskilling, less cryptic codebase).</p>

<p>Anyway this is a bit of a ramble, what I'm saying is - Kotlin has some really rather nice features (Groovy Like DSL Builders, Pattern Matching, the <code>when</code> expression, lambdas, Kotlin to JavaScript compilation(!) etc.) and people happy with either Java OR Scala should give it a go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology in the Cloud]]></title>
    <link href="http://yobriefca.se/blog/2012/07/12/technology-in-the-cloud/"/>
    <updated>2012-07-12T13:59:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/07/12/technology-in-the-cloud</id>
    <content type="html"><![CDATA[<p>The Cloud.  As much as the term has been pummelled into meaningless marketing sputum by the guys in expensive suits and fake smiles it does exist and is distinct from a typical "throw all your stuff in a data center" setup.</p>

<p>The Cloud is distinct, as well, in terms of how you think about your solution architecture.  The typical old school approach would be to just create big monoliths to process your data but that doesn't work out so well in the cloud.  Of course the considerations for the cloud aren't new, hell no - things like SOA have been around for an age, but if you want to harness the benefits of the cloud as the internet intended you will be narrowing your options.  No more just cobbling common bits together and crossing your fingers.</p>

<p>So fine - architecting for the cloud has some special considerations but thats not what I want to talk about - there are better people than me to cover that.</p>

<p>What I want to talk about is use of technology within that architecture.  I've never been a fan of the one-size-fits-all-painful-or-not technology stack driven almost solely by a need to avoid unnecessary education of developers.  And, now I feel the cloud is strengthening my view that a default stack is more trouble than it's worth.  More importantly it's really adding momentum to the whole polyglot architecture, or simply using the right tools for the job.</p>

<p>Let me explain.  Any default stack, by definition, needs to cater to many user cases and as such brings a certain amount of sacrifice with it.  Sacrifices come in many forms but usually in performance, memory footprint and/or verbose configuration.  In the cloud you are, in essence, in a Pay-As-You-Go model, every clock cycle and every bit of storage costs.  Now that heavy ORM with its less than ideal queries and slow relationship mapping is starting to cost you money EVERY request.  <span class='pullquote-right' data-pullquote='"In the cloud the default stack can easily bleed money." '> In fact, it's probably backed by that storage heavy relational database for all your non-relational data.  Same for that rather large web framework you've got there.... every time to deal with a spike and scale that badboy out and you're having to use medium instances rather than small.  That SOAP based webservice that requires triple the bandwidth to service a request... ugh you get the point. "In the cloud the default stack can easily bleed money."
</span></p>

<p>I guess this is less about the default stack and more about just using the right tools to get the job done in the most effective manner - afterall you're paying for this stuff now.  You kind of were before but in such a coarse grained manner it didn't matter - it does now.</p>

<p>In summary - the cloud has started to make technology decisions more accountable and we need to ensure that those decisions aren't costing our stakeholders more money than necessary.</p>

<p>PS.</p>

<p>I'm not going to sit here and preach about the which specific technologies to use but come on - if your storing Session State in a Oracle database, switch to Riak, or Redis.  If you're building a nice scalable API then use something like Scala which promotes immutable state and concurrency out of the box over something like vanilla Java (or perhaps just a better framework Spring-WS vs Dropwizard for example).  JSON over XML or a binary format (Protobuf for example) for machine to machine communication.  A small node.js web site over ASP.NET Webforms for simple sites.  The list goes on.  That is to say consider this advice against the other factors driving technical decisions - dont JUST go for the smallest, lightest tools because it MIGHT be cheaper.  Do the research.</p>

<p>Finally, perhaps you've got another IT team needing to support this new solution?  Bring them along this journey too, educate them as you educate yourself, dont just throw the finished thing over the wall with a 1 week handover and a pat on the back.</p>

<p>Don't be afraid - it's a super fun world we live in!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quitsies, Well Sort Of]]></title>
    <link href="http://yobriefca.se/blog/2012/07/03/quitsies/"/>
    <updated>2012-07-03T19:08:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/07/03/quitsies</id>
    <content type="html"><![CDATA[<blockquote><p>You know when you start to question why you write these things it's probably time to quit, or at least take a break.</p>

<p> ~ me, just there now</p></blockquote>

<p>This more of an FYI to anyone who may read this blog than a horrible diatribe about how I am wasting my life with meaningless exercises or technologies I'll never get to use to a bunch of people that don't really care, what would be the point?  Plus - it's probably not even true.</p>

<p>So rather than pottering on about cool and interesting technologies that will make everyones (read, developers) life infinitely better 100% guaranteed I've decided to devote my time to,</p>

<ol>
<li>Working on some startup-py type things that have been milling around the back of my head for some time, and,</li>
<li>Generally getting stuff done</li>
</ol>


<p>Yep, like a hipster band, this little testament to bike-shedding is going on indefinite hiatus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Years]]></title>
    <link href="http://yobriefca.se/blog/2012/05/26/5-years/"/>
    <updated>2012-05-26T22:11:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/05/26/5-years</id>
    <content type="html"><![CDATA[<p>So I am sitting here, here being London - 315(ish) miles away from my family, halfway through the <a href="http://nhshackday.com">NHS Hack Day</a> and having a bit of a personal crisis.  I often have these little episodes but this one has been languishing in my dusty old head for a good while - refusing to go away, nagging me every time I have a chance to ponder things.  It's the same old thing - why am I doing any of this stuff I do?  I don't generally get a great amount of opportunity in work to really stretch my creative urges.  That sort of thing happens on my own time and therefore given my other responsibilities (my wife, family and lifes associated activities) is done under a fairly tight deadline.  Add this to the fact I bore easily of things that aren't really benefiting people immediately - I tend to flit, easily, between little unfinished projects.  But wait....  I did it again.  You see back there, about 2 sentences ago I just sidelined my entire life.  Thrown between two looming brackets I relegated my wife and family to a byline yet again.  Oy vey.</p>

<p>And this brings me, neatly enough, to the point of this entire ramble.</p>

<p>Five years ago I married my awesome wife and in that time I've done a heap of things - relocated twice, had two kids bought a house, got promoted, pissed everyone off, seen a few countries and bought/traded three cars (which get smaller every time oddly enough).  And through all this hopping around my wife has been the one true constant.  She thinks, most of the time, I don't care about her - after all I'm in London participating in a hackathon on our 5th wedding anniversary because I stupidly didn't put two and two together and notice the clash.  So yeah it may damn well seem like she comes in a close second to my hobby/career stuff (you know the stuff I already mentioned was pulling into crisis mode).  But it's not true.  I can't help the fact I am "emotionally retarded", as my sister once called it, but perhaps once in a while I really should let her know that she means more than she thinks she does.  And here it is.  A little bit of emotional letting if you will.</p>

<p>Dear Emma - happy anniversary, I hope we have plenty more, thank you for putting up with me, you're aces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Little Sacrifices]]></title>
    <link href="http://yobriefca.se/blog/2012/04/29/the-little-sacrifices/"/>
    <updated>2012-04-29T23:24:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/04/29/the-little-sacrifices</id>
    <content type="html"><![CDATA[<p>Late night ramblings...</p>

<p>Productivity can plateau very quickly - especially in a technical process.  No matter how good you get at the process or approach, if you keep doing the same thing you can only get so good at it or do it so fast.  It's possible, however, by sacrificing some of your precious time to go beyond that plateau.  There are things we, the developers, do as part of our development process that are so small and insignificant that we do them without thinking</p>

<ul>
<li>Clearing down the values in LocalStorage when debugging a web app</li>
<li>Copying assets from one folder to another (aka the macgyver deploy)</li>
<li>Navigating to <code>http://localhost:8000</code> or <code>9000</code> or some other port</li>
<li>Typing <code>rake generate preview</code> into the terminal about 20 times an hour</li>
<li>These are but a few things I've had to consider today alone</li>
</ul>


<p>Generally these things are so small we'd just do them by hand, right?  But if you take the time to automate these processes or even just refine them in some way it can do wonders for you productivity going forward.</p>

<p>For example the clearing of LocalStorage in Chrome - spent a few minutes writing a bookmarklet that you can execute with 1 click.  The macgyver deploy?  Write a rake/make/jake/psake/cake task for it.  Better yet use <a href="https://github.com/guard/guard">Guard</a> or <a href="https://github.com/mynyml/watchr">Watchr</a> and perform the deploy on save!  Navigatin to various different localhost ports?  Try my <a href="http://yobriefca.se/blog/2012/04/03/alfred-hack-for-web-developers/">alfred script</a> to minimise the keystrokes. <code>rake generate preview</code> - alias that bad boy to <code>rgp</code>!  Save yourself those extra keystrokes - you might need them later.</p>

<p>Listen - specifics aren't important here.  You'll have your own small repetitive tasks and you'll be able to find your own ways to automate, improve or refine them - but this is the point.  You probably don't.  At least not as often as you should.  Losing a second here and there on one task means very little in the small.  In the large, across many of these tasks, well thats a different story.  It's hard to justify spending 10 or 20 minutes on something to automate a task that takes 5 seconds to run but even if the time doesn't repay for a while then the fact you have less of a cognitive shift between your primary task and this secondary one should allow you stay in the highly effective, productive mindset to get the job done.</p>

<p>So give it a go, even as a thought experiment - think about the habitual development tasks you do and how you could automate them - you could well suprise yourself (like I have been recently).</p>
]]></content>
  </entry>
  
</feed>
