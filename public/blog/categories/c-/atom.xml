<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>C# | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-11-05T08:53:00+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wednesday Tip: C# Type aliases]]></title>
    <link href="http://yobriefca.se/blog/2011/11/16/wednesday-.net-tip/"/>
    <updated>2011-11-16T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/11/16/wednesday-.net-tip</id>
    <content type="html"><![CDATA[<p>Ever written code that looks quite like this?</p>

<p>{% codeblock lang:csharp %}
Dictionary&lt;string, KeyValuePair&lt;string, string>> cache = new Dictionary&lt;string, KeyValuePair&lt;string,string>();
{% endcodeblock %}</p>

<p>I have.  Ugly and noisy isn't it!  <!--more--> OK you could make it <em>slightly</em> less noisy by using <code>var</code></p>

<p>{% codeblock lang:csharp %}
var cache = new Dictionary&lt;string, KeyValuePair&lt;string,string>();
{% endcodeblock %}</p>

<p>Or I suppose you could ahead and create yet another random type to abstract the implementation out of the way but thats just too much work for something internal to a class.</p>

<p>Turns out you can make use of alises.  I've always known about using alises for namespaces to either resolve possible type conflicts or to make code a bit more understandable</p>

<p>{% codeblock lang:csharp %}
using CoreWeb = System.Web
...
var x = new CoreWeb.Request()
{% endcodeblock %}</p>

<p>So this works with namespaces <strong>AND</strong> types.</p>

<p>{% codeblock lang:csharp %}
using Cache = Dictionary&lt;string, KeyValuePair&lt;string,string>();
{% endcodeblock %}</p>

<p>This allows us to make the declaration above in a much nicer manner,</p>

<p>{% codeblock lang:csharp %}
Cache cache = new Cache();
{% endcodeblock %}</p>

<p>OK so there are way to many uses of the word cache there but you get the gist.  Handy to know.  Never knew this until today #youlearnsomethingneweveryday</p>
]]></content>
  </entry>
  
</feed>
