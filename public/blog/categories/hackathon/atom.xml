<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Hackathon | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/hackathon/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-03-18T19:50:13+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hackathon #2: Mobile]]></title>
    <link href="http://yobriefca.se/blog/2011/09/15/hackathon-2-mobile/"/>
    <updated>2011-09-15T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/09/15/hackathon-2-mobile</id>
    <content type="html"><![CDATA[<p>So as I've already said in a <a href="/blog/2011/08/29/hackathon-retorspective/">previous post</a> our first hackathon was well recieved.  So why not, we thought, do another one?  And indeed why not?</p>

<p>This time we are changing things up.  Rather than everyone coming together to bang out a solution we are going to have small teams working on the same project on different mobile platforms.  With musical chairs.  Yeah you heard right right.  Musical Chairs.  Kind of.</p>

<p>Heres the deal</p>

<ul>
<li>A number of stations are set up in a room.</li>
<li>Each station is set up to host a particular development platform (iOS Native, Android Native, PhoneGap, Web, Windows Phone 7 etc.).</li>
<li>Each station will have 2 x Developers assigned to them for pairing and 1 X Technology Expert that will act as an advisory role for that stations technology platform</li>
<li>There will be 1 product owner and 1 idea.</li>
<li>Each station will produce the solution in the best way possible for that platform</li>
</ul>


<p>Now here's the catch.</p>

<ul>
<li>Development will be done in sprints lasting 1 hour.  At the end of the sprint the 2 devs at each station get up and move to the next station giving a 5 minute handover to the next team.  This keeps happneing until the Hackathon (24hrs this time) is over.</li>
</ul>


<p>Thats the musical chairs bit.  But why?  Well this allows people to get some exposure to each platform, see the relevant pain points and above all else learn to work as a team rather than being a bunch of selfish pricks (#joke).  Sure the first full cycle will probably be painful for most people but like women who live in the same house - after the first cycle everyone should be roughly in sync (#jokeagain).</p>

<p>It's a grand idea but it's easily broken.  We need to prevent that happening.  Here's how I think we can do that.</p>

<ul>
<li><strong>People</strong>.  People are key to this one.  More specifically numbers.  We need 3 people per station and 1 product owner.  If people drop out we have to start cutting stations, if numbers aren't right some teams will be too big/small and that wont work.  We got 12 people last time which dropped to about 6 after 24 hours because some people just couldn't hack the pace.  this time people need to commit and stay commited or we fail and that would suck!</li>
<li><strong>Planning</strong>.  Everything needs to be ready for this one.  It's got a mobile focus and that should remain the focus.  This means all the backend services need to be available and working upfront.  This means user stories need to be defined beforehand and even a few broken down into tasks so devs can get cracking immediatley while the rest are fleshed out.  This means stations needs to be up and running with everything installed and working.  So lots to do.</li>
<li><strong>Server/Services</strong>.  As I've said these need to be in place and rather than roll our own we are looking at the potentially awesome <a href="https://www.parse.com/">Parse</a> as it will have everything we need for all platforms thanks to the minimum of a RESTful API.  Still under review but it's looking good so far</li>
<li><strong>Idea</strong>.  We need an idea that is sufficiently small but also feature rich enough to make the implementations different (device integration etc.).  We have some but we need to narrow this down to something that would be beneficial.</li>
<li><strong>Infrastructure</strong>.  All the infrastructure needs to be in place.  All dev software installed, source control ready, <a href="http://agilezen.com/">AgileZen</a> subscriptions bought, test devices ready blah blah blah</li>
</ul>


<p>I'm sure there's more - I mean it's early days.</p>

<p>So that is where we are right now, lots to think about and lots to do.  We are aiming for a November/December slot if we can get the people and a weekend they are all free.  Excited++.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathon Retrospective]]></title>
    <link href="http://yobriefca.se/blog/2011/08/29/hackathon-retorspective/"/>
    <updated>2011-08-29T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/08/29/hackathon-retorspective</id>
    <content type="html"><![CDATA[<p>  <p>So my first ever Hackathon (48hr) is done and dusted and has been for over a week (lazy!!).  All in all it was a great experience and plenty of stuff was learnt &#8211; we got some technology evaluation (good and bad), ways we could streamline the process and things that burnt time way too fast.</p><p>This event was intended as a kind of dry run to see if there is any benefit in Kainos running more events of this nature.  Perhaps external ones for charity or educational endeavor.  Does that mean I&#8217;ll be doing it again?  Hope so.  I guess the best question to ask then is what did I want to get out of it.  Well I went in a bit open minded &#8211; mainly I wanted to have the experience but I also wanted to try and get some of the techs I have been tinkering with and see how they faired in a semi-real life environment.  I think I actually wanted to have produced something really usable too but perhaps I was expecting too much?  I mean what we produced wasn&#8217;t a total failure but it needs a lot of work.</p><h1>The End Result</h1><p>We ended up producing a web app for giving continuous feedback to colleagues.  The idea was to allow people to give and ask for feedback as well as facilitating a more formal career review workflow.  Social appraisals as it were.</p><p><img src="http://yobriefca.se/images/appraisr.png" alt="" style="width:100%;"></p><p>We had some basic features such as integrated Windows Authentication and user information look up etc, autocomplete on peoples name, pretty relative time output and some commenting features.  So yeah it&#8217;s pretty sparse but hey it&#8217;s a start.  Whats more interesting is the process and things we observed.</p><h1>The Story</h1><p>The team was a mix of Technical Architects, placement students, software and senior software engineers and even a project manager we had a few no shows and a few people who intended to drop in for a while and leave again.  We also had a person who thought going out the night before was a good idea &#8211; it wasn&#8217;t (hahaha sucker).  But hey at least he showed up.  I have no problem with people not turning up as long as they let someone know but not turning up and not telling me&#8230;. bad form folks.</p><p>Anyway the majority of us gathered in our office at 9ish on Saturday morning and started pitching ideas to attempt.  We ended up with a decent pile of good ideas and started aggressively throwing ideas in the bin until, after some debate, we ended up with the one we decided to run with.  After that we started thrashing out user stories as a group and ended up with a decent amount. The whole process, including getting food, took about 3 or 4 hours.  We then all got stuck into various tasks, I started getting the build server functioning, a few people sat with the product owner and started fleshing out the user stories, a few people looked at the domain model and some people started writing acceptance tests.  This was the bit that cost us a lot of time.  Rather than each person or group working on vertical slice through the system we went horizontally and started arguing over things that never even made it into the end solution.  Everyone fell into their comfort zone cause thats the way Kainos projects typically run &#8211; old school waterfall for the most part.  So yeah no <span class="caps">REAL</span> work actually got done, people were just keen to start and I didn&#8217;t really pull it under control until it was just too late .  It would have been nice to have a Scrum Master type person who was overseeing everything too.  I was too busy doing my own horizontal slice :-S.</p><p>So things went on like this for a while, a lot of &#8220;getting things in place&#8221; and some people had to drop off.  Eventually we hit a point when we realised that our rate of work was nowhere near what it should be and something needed to change.  At about this point everyone but me decided to get some shut eye and I slipped my headphones in, played some Bon Iver and got stuck into fleshing out what we already had.  This formed the basis of the work the next day (this was about 4AM on Sunday morning) when the remaining team (5 left out of the initial 12) kicked of the final leg.  Due to our earlier stumble there wasn&#8217;t very much for our product owner/tester to do for most of the day which was a shame.  Eventually we ended up with what you seen above (finishing up at about 6PM on Sunday night).  The Sunday was less frantic, lots of pairing, lots of trying new technologies and was so much more productive</p><h1>The Technologies</h1><p>We used quite an interesting array of technologies</p><ul>  <li><span class="caps">ASP</span>.<span class="caps">NET</span> <span class="caps">MVC</span> 3</li>    <li><span class="caps">SQL</span> Server Compact 4 (due to issues with <span class="caps">SQL</span> Server on the last leg)</li>   <li><a href="http://www.toptensoftware.com/petapoco/">PetaPoco</a></li> <li><a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a></li>  <li><a href="http://documentcloud.github.com/backbone/">Backbone.js</a></li>    <li><a href="http://jquery.com/">jQuery</a></li>    <li><a href="http://jqueryui.com/">jQueryUI</a></li>    <li><a href="https://github.com/dradovic/MigSharp">Mig#</a></li>    <li><a href="https://github.com/JamesKovacs/psake">Psake</a></li>   <li><a href="http://www.nunit.org/">NUnit</a> which I have discovered is a massive impediment to writing tests after the silky smooth experience of <a href="http://www.nspec.org/">NSpec</a></li>  <li><a href="http://should.codeplex.com/">Should.Fluent</a></li>    <li>Git</li></ul><p>In terms of supporting technologies we used the awesome AgileZen for our Kanban board and HipChat for some shared chatting (we had Lync but it&#8217;s inability to persist conversations is a deal breaker in my book).  Finally, we used TeamCity as our build and continuous integration server which was a much much better experience than CC.<span class="caps">NET</span></p><h1>Hackathon Review</h1><p>I guess my story above probably sounds more negative than it really was cause thats the way I write.  It wasn&#8217;t &#8211; it was great craic.  We held a review post-hackathon with everyone involved and the following point were raised.</p><h2>Likes</h2><ol>    <li>Experience with new technologies e.g. CoffeeScript, PetaPoco</li>   <li>Experience with things such as user stories, kanban etc.</li>   <li>People got to do things that they just don?t get the chance to do. E.g. Andrew was designing screens.</li>  <li>Pair programming</li>   <li>Great craic!</li></ol><h2>Dislikes</h2><ol> <li>People didn&#8217;t know what to do when there were bottlenecks</li>    <li>Lunches and dinners were taken at different times. This affected communication.</li>    <li>People thought they weren&#8217;t productive with no/little sleep.</li> <li>Tester/Product Owner wasn&#8217;t used as much as they could&#8217;ve been on the second day.</li>  <li>Facilities room has a motion sensor on the lights</li>  <li>A yoga mat is not good for sleeping on</li></ol><h2>Improvements</h2><ol>   <li>Add an equivalent of a Scrum master to the team.</li>   <li>Agree an idea prior to the hackathon so it doesn&#8217;t eat into dev time.</li>    <li>Create a couple of use cases going into the hackathon so the dev team don&#8217;t have to wait on  the business people</li> <li>Set up infrastructure prior to the hackathon</li>   <li>Choose a few technologies before hand so that people can learn a bit about them before. e.g. the software for source control can be decided in advance.</li>    <li>Make sure people aren&#8217;t going to the shops/getting food at different times</li>   <li>Clone James for tech leader/troubleshooter/developer</li>   <li>Have <strong>less</strong> team work. We found that the entire team was focused on some tasks that didn&#8217;t require it because, well, teamwork is great.</li>   <li>Focus on core functionality instead of e.g. logins which can be done later. Or prep login functionality before.</li>    <li>Use hackathon specific machines</li>    <li>If there&#8217;s another weekend hackathon, people should go get some sleep to rest eyes and minds!</li></ol><p>So all in all it was a great learning experience and I don&#8217;t think anyone said &#8220;I&#8217;m never doing that again&#8221; which was a result and I am certain we will attempt something else in a similar vein and take on board all those improvements to produce something that changes the world or something.  So many things to try&#8230;. what you all doing next weekend :-P</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking about Hackathons]]></title>
    <link href="http://yobriefca.se/blog/2011/06/19/thinking-about-hackathons/"/>
    <updated>2011-06-19T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/06/19/thinking-about-hackathons</id>
    <content type="html"><![CDATA[<p>  <div class="update"><p>This post is a bit of a brain dump so expect some incoherence and repetition.  I&#8217;m buzzed on coffee and feel like a kid in a toy shop so I just want to get it out there and if anyone has any experience of hackathons feel free to pitch in.  In fact please do :)</p><p>Also sorry for the blogging overload.</p></div><h2>Background</h2><p>So I recently started walking to and from work.  The walk is about 3.5 miles which takes about 50 minutes.  This gives me a lot of time to think, even over think but even I bore myself sometimes so I decided to give podcasts a try.  I grabbed a load of <a href="http://hanselminutes.com">Hanselminutes</a> and <a href="http://herdingcode.com/">Herding Code</a> episodes to maybe learn something new.  One of the <a href="http://herdingcode.com/">Herding Code</a> podcasts really caught my attention &#8211; <a href="http://herdingcode.com/?p=310">109: Harmony Hackathon</a>.  The podcast tells the story of a group of people that got together and spent 48 hours designing and developing a solution for a charity organisation.  I&#8217;ve heard of hackathons before but hearing these guys talk about their experiences while using a technology stack that is my bread and butter (.<span class="caps">NET</span>) just got me all tingly inside.</p><p>I wanted to do this.  I know it sounds pathetic but the experience of hashing something out, cutting code and working totally agile without the bureaucracy of management slowing things up<sup class="footnote" id="fnr1"><a href="#fn1">1</a></sup> sounds really fun to me.  I tend to get bored on long running projects.  I really want to try new things in real projects but convincing managers or customers is a near impossible task as the &#8220;play it safe&#8221; attitude makes a lot more sense to them.  Come on guys who cares about money when there is fun to be had?</p><p>So anyway this got me thinking.  How would I go about this, why would I go about this and how would I get other people to give 24 or 48 straight hours of their life for something like this?  I mean I live in Belfast, Northern Ireland not exactly a <span class="caps">MAJOR</span> hub of geek activity.</p><h2>Hackathon Goals</h2><p>So why would we do this?  Having clear goals upfront is really going help sell this to people.  They will also act as guidance and help drive the entire event to the finish line.  There are plenty of reasons, perhaps even contradictory ones,</p><ul> <li>A finished product or prototype</li>    <li>Education of technologies and techniques</li>   <li>The experience</li> <li>Technology evaluation</li>  <li>Networking</li> <li>Something to put on your CV</li></ul><p>I realise that much of this is done on a per person basis but unless each persons goals are aligned in some way there is a risk the whole thing would fall apart.  Personally I think people wanting to leverage it for any sort of networking, CV building or taking unfounded punts on technology need not apply.  I am not adverse to a bit of risk taking in the technology stakes but they need to be calculated risks rather than a <em>&#8220;ohhh shiny lets use this&#8221;</em> attitude.  If it&#8217;s putting all the other goals at risk it&#8217;s not worth it.</p><ul> <li>A finished product or prototype</li>    <li>Education of technologies and techniques</li>   <li>The experience</li> <li><del>Technology evaluation</del></li>   <li><del>Networking</del></li>  <li><del>Something to put on your CV</del></li></ul><p>I&#8217;d be happy working with people who agree with me on at least 2 of the points above.  But of course this isn&#8217;t a hard and fast rule and I remain open for the greater good.</p><h2>The Idea</h2><p>So what would we do?  I don&#8217;t think it would work very well if we just played around with some technologies and produced a few prototypes.  No, addressing a real work problem or need that is of sufficient size and complexity that allows us to drive a spike right through the entire solution gives us something to work towards.  Actually producing something that works or at least proves that the idea is viable seems almost mandatory.  The thought of walking away after the 24 or 48 hours with something that you can show people is a noble goal.  Whether that be for charity, something internal for your company or something for the open source community.</p><p>I have plenty of ideas I would go for but this isn&#8217;t a dictatorship (not at this point anyway) this is only going to work if people feel really involved, after all when the &#8220;mid way slump&#8221; starts kicking in you&#8217;re only going to make it through if you <span class="caps">WANT</span> it to work and are invested in experience.  I guess what I am saying is you&#8217;d get people together &#8211; potential developers, product owners, investors up front and brainstorm, plan and argue.  This brings me on to another point&#8230;.</p><h2>The 7 P&#8217;s</h2><p>Prior Preparation and Planning Prevent Piss Poor Performance.  The more I think about this hackathon thing the more I come to the conclusion that it is so much bigger than the 24 or 48 hours of design and development.  Like all good adventures you have to go in prepared.  What would you need upfront?</p><ul>   <li>You need your goals clearly defined</li>    <li>You need a few user stories so there is something for people to do while things are getting established</li>    <li>You need your stack and approach mapped out (including source control, <acronym title="Continuous Integration"><span class="caps">CI</span></acronym> and Build Server etc.)</li>   <li>The participants need to at least have a fair idea what they are doing</li> <li>You need to have some sort of rough plan or schedule</li>   <li>You need food, drink, beer, alternative entertainment</li>  <li>You need a venue, a comfortable venue with internet access</li> <li>Oh and I guess you need to invest in whiteboards.  Lots and lots of whiteboards, and markers, and cue cards and possibly deodorant.</li></ul><h2>People involved</h2><p>Agile makes sense here, of course it does.  So it&#8217;s not just a matter of locking a few devs away with coffee and vitamin pills.  No you need product owners at hand, you need someone testing and you need some sort of <span class="caps">BDFL</span> (Benevolent Dictator for Life).  I guess a <span class="caps">BDFL</span> isn&#8217;t mandatory but a technical lead who has the final say is certainly going to make the decision making process a lot quicker &#8211; be that good or bad.</p><p>Motivational people are another thing that would come in handy.  Having people see something and be like &#8220;yeah that&#8217;s nice, good job&#8221; is going to keep those flagging energy levels up.</p><p>Developer headcount is another balancing act.  You need enough people to make the goals achievable but you also can&#8217;t have too many people or you risk stamping on each others feet.  I guess it depends on the size/complexity of the idea you want to implement but a finger in the air guess I&#8217;d say between 4-8 developers with a product owner and a tester (could be the same person) would be a nice number.</p><h2>Development Approach</h2><p>I&#8217;ve already said agile seems like a perfect fit and I think the whole ecosystem that agile brings in fits well.  <acronym title="Test Driven Development"><span class="caps">TDD</span></acronym>/<acronym title="Behaviour Driven Design"><span class="caps">BDD</span></acronym> almost seems mandatory here &#8211; at least some level of it.  Checking in code with no tests around it is going to cause a headache when you hit a bug that takes and hour to track down.  A strict regime of constant branching, merging and checkins (every 20 minutes or less) along with a fast continuous build system will help discover problems <span class="caps">ASAP</span>.</p><h2>Atmosphere and Communication</h2><p>An entire project condensed into 24/48 hours is going to magnify the pain points and tensions will rise.  Techniques such as Pomodoro would come in handy to make sure people aren&#8217;t burning themselves out too fast.  A quiet room and alternative non-computer based entertainment will give people a quick escape on their pomodoro break and a chance to get their head showered.  Communication <span class="caps">NEEDS</span> to flow so regular standups (every 30 minutes to an hour) are essential to spot problems early and find a way to resolve them quickly.  Again having some sort <acronym title="Benevolent Dictator for Life"><span class="caps">BDFL</span></acronym> could really help in this situation.</p><h2>Where now?</h2><p>You know what &#8211; someway, somehow I am going to do this.  Consider it part of my career bucket list.  Something I want to do before I join the great geek scrapheap in the sky.  Could I get the people? Yeah I reckon I could.  Could I get the sponsorship/support?  Most likely.  Could I find a suitable idea to run with?  Hells yeah.  So what is stopping me?  Hmmmmmm nothing.  <span class="caps">BRB</span> got a hackathon to organise&#8230;&#8230;..<sup class="footnote" id="fnr2"><a href="#fn2">2</a></sup></p><p class="footnote" id="fn1"><a href="#fnr1"><sup>1</sup></a> Not all managers are created equal but they have a job to do and process, meetings, documents etc. all get in the way.</p><p class="footnote" id="fn2"><a href="#fnr2"><sup>2</sup></a> Yeah really.  No joke.  I can but try.</p></p>
]]></content>
  </entry>
  
</feed>
