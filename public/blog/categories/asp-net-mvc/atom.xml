<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>ASP.NET MVC | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/asp-net-mvc/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-04-20T21:53:44+02:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobile Redirection for Web Applications in ASP.NET MVC]]></title>
    <link href="http://yobriefca.se/blog/2011/02/24/mobile-redirection-for-web-applications-in-asp-net-mvc/"/>
    <updated>2011-02-24T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/02/24/mobile-redirection-for-web-applications-in-asp-net-mvc</id>
    <content type="html"><![CDATA[<p>  <p><span style=""> </span>Mobile redirection is simple stuff but what happens when you need to deep link into the mobile application?</p><p>On a recent project we needed to produce mobile (iPad specifically)  equivalent.  The desktop app itself was developed using ExtJS (3.3.1) and had  three primary entry points,</p><ol><li>Logon Screen</li><li>Home Screen</li><li>Product Screen (New/View/Edit)</li></ol><p>Due to the way the project was implemented these became as 3 distinct  pages/controllers/actions.  Users could receive emails with links to a  particular product and they would go directly to that view (with a login  redirect if not previously authenticated).  The mobile solution, however,  written using Sencha Touch (consistent development experience, native-esque UI  with little effort) is a single page application.  This presents a problem when  the user is on a compatible mobile device and they receive a link to a  particular placement &ndash; how do we push that sort of deep linking into a single  page app.  Well on the client side frameworks such as Backbone.js, jQuery Mobile  and Sencha Touch [anyone got more please?] all offer history support using hash  navigation.  That's the client side sorted but how do we translate, say,  /Product/Show/12345 into /Mobile#placement/12345?</p><h2>MobileRedirectAttribute</h2><p>Firstly I created an extension of the AuthorizationAttribute that will act as  an interim redirection and request parser between the mobile and desktop  solutions.  Here&rsquo;s the code (usage follows),</p><p><script src="https://gist.github.com/841958.js"></script></p><h2>Usage</h2><p>So for our 3 entry points into our application we attribute the controller  actions with the MobileRedirectAttribute and give it a client fragment.</p><p><script src="https://gist.github.com/841961.js"></script></p><p>The client fragment is capable of translating tokens embedded within it ( as  :&lt;token_name&gt;) and replacing the token with a matching route value or  request parameter.  The ProductController Index action is a good example of  this.  A request to /Product/Index/12345 on a mobile device would translate  to /Mobile/#product/12345</p><h2>How It Works</h2><p>Pretty simple really.</p><ul><li>The attribute checks if the device is a compatible/mobile device.</li><li>If it is the retrieves the client fragment and extracts the tokens &ndash;  :&lt;token_name&gt;</li><li>It attempts to match the token names against request parameters first</li><li>If there is no parameter it then looks into the route values (eg. :id in the  above url isn;t a parameter but rather a route value)</li><li>It replaces the token with the real value</li><li>It performs a redirect to /Mobile#&lt;client_fragment&gt; which cancels the  execution of the action.</li></ul><h2>Other Points</h2><ul><li>It&rsquo;s probably not the most robust solution in that more complex scenarios  may not work as expected but it&rsquo;s a decent base that can be extended. </li><li>I have hardcoded the mobile route as it fitted my needs so I think that  should be externalised as well.</li><li>The determination of whether a device is a compatible device is facilitated  through Browser.IsMobileDevice.  This is for demonstration purposes only.  In  the project we use a different solution but it is a bit more long winded to  explain here.</li><li>The &ldquo;redirect to logon&rdquo; handling is performed within the app itself so that  is why the Logon view&rsquo;s fragment is simply &ldquo;home&rdquo;.</li></ul><p><h2 style="font-size: 1.5em;">Demo</h2></p><p>I've pushed a very quick and dirty demo of this onto GitHub for anyone interested -&nbsp;<a href="https://github.com/kouphax/mobileredirect-mvc/">https://github.com/kouphax/mobileredirect-mvc/</a> . &nbsp;It uses a really quick UserAgent.Contains("iPad") check for "mobile" detection so use and iPad or set your User Agent to try it out.</p><ul></ul><p>Any use to anyone out there?  Any problems with it?  Let me know.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MvcConf2: Post Conference Rubdown]]></title>
    <link href="http://yobriefca.se/blog/2011/02/09/mvcconf2-post-conference-rubdown/"/>
    <updated>2011-02-09T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/02/09/mvcconf2-post-conference-rubdown</id>
    <content type="html"><![CDATA[<p>  <p>So MvcConf has been and gone.&nbsp; Lots of interesting talks though sadly I hit a  ton of technical issues with laggy video and eventually total audio/video loss.&nbsp;  To my ISP &ndash; shame on you!&nbsp; Luckily I did get to see most of the things I wanted  (or at least hear).&nbsp; Here&rsquo;s the final outlay of talk I attended (green for  attended, yellow for not attended),</p><p class='img-holder'><img src='http://farm4.static.flickr.com/3660/5720976997_50da11c786_o.png' style='width:100%;'></p><p>I kind&nbsp;of wanted to attend,</p><ul><li>Talks that I already had some experience in to see if my thoughts where  aligned with others, and, </li><li>Talks that I had not experience in but had an interest in. </li></ul><p>Problem was that in some of these talks I felt a bit out of my depth which  wasn&rsquo;t helped by the fact my video was busy drawing part of slides 4 and 5 when  the presenter was already on slide 7 :(.&nbsp; Other times I felt I had already dived  deeper than the talk was covering.&nbsp; I guess it happens!&nbsp; Anyway enough  complaining lets see what we covered,</p><h2>Real World Application Development with Mvc3 NHibernate, FluentNHibernate  and Castle Windsor</h2><p>Presenter: Chris Canal</p><p>I went into this talk wanting to get a quick glance at NHibernate  specifically.&nbsp; I&rsquo;ve had no exposure to any of these technologies (bar MVC3 of  course) and I think I suffered because of it.&nbsp; It was very Castle Windsor  focused and I think I would have been better jumping into a pure NHibernate talk  if there was one.&nbsp; That said I really should have a look at Castle Windsor.</p><h2>BDD in ASP.NET MVC using SpecFlow, WatiN and WatiN Test Helpers</h2><p>Presenter: Brandon Satrom</p><p>I recently attended a talk on using Cucumber to provide Automated UI testing  on our projects (held internally in our company) so I wanted to see what  SpecFlow brought to the table over running Ruby and Cucumber.&nbsp; I was very  impressed with what I seen.&nbsp; Nice explanation of the theory behind BDD.&nbsp; I like  the whole &ldquo;Working Software&rdquo; vs &ldquo;Working Software <strong>That Matters</strong>&rdquo;  comparison.</p><p>In terms of SpecFlow itself I like the tighter integration into .NET, the  ability to debug your steps is very nice and might help increase acceptance in a  team when compared to introducing Ruby.&nbsp; I can see the arguments for using  Ruby&nbsp;&ndash; Cucumber is a more mature, Ruby is faster to setup and tear down, using  the right tool for the right job etc. but I can also see the arguments against.&nbsp;  At least both farmeworks use the Gherkin language so writing the scenarios is  done in the same way.&nbsp; This is something I have to mull over a bit more.</p><h2>Quality Driven Web Acceptance Testing</h2><p>Presenter: Amir Barylko</p><p>I had a few audio and video problems during this presentation.&nbsp; It touched on  some theory behind Acceptance testing, Green Field vs Brown Field and things  like that then dropped into using Cucumber for some acceptance testing.&nbsp; Having  just attended the same type of talk a few days previous there wasn&rsquo;t anything  new here, and given the bad connection I skipped the rest of the talk.</p><h2>Keynote</h2><p>Presenter: Scott Guthrie</p><p>The Gu talking about stuff&nbsp;&ndash; nuff said.&nbsp; Nice to see him describing how cross  pollination of the three platforms (WebMatrix, WebForms, MVC) works (Razor from  WM, Routing from MVC etc.).&nbsp; Also nice to hear that we can expect an MVC release  on a near annual basis with plenty of preview releases inbetween!</p><h2>CQRS and Event Sourcing with MVC 3</h2><p>Presenter: Ashic Mahtab</p><p>Wow&nbsp;&ndash; CQRS is something I&rsquo;d heard of previously and it&rsquo;s a pretty big buzz  word in the Silverlight world at the minute so I wanted to check it out.&nbsp;  My&nbsp;head was thoroughly melted&nbsp;after this one.&nbsp; Quite fast paced and I could have  benefited from getting some prior reading in and around the CQRS concept.&nbsp; Will  revisit this once the video and slides are available.</p><p>One&nbsp;unexpected thing I got out of this talk was <a href="https://github.com/machine/machine.specifications">MSpec</a>.&nbsp; I always  wondered how things like cucumber and spec flow handled lower level unit testing  and it seems they aren&rsquo;t really suited to that sort of thing.&nbsp; <a href="https://github.com/machine/machine.specifications">MSpec</a>, as I have  discovered, is essentially a unit level focused BDD framework.&nbsp; Going to check  this out very soon.</p><h2>Deploy ASP.NET MVC with No Effort</h2><p>Presenter: Troels Thomsen</p><p>Honorable mention here as my connection was flat out dying on this room.&nbsp; I  couldn;t make out video or audio very well.&nbsp; I did spend a few hours a few days  ago looking at <a href="https://appharbor.com/">appharbor</a> and it looks like,  as the name says, &ldquo;Azure done right&rdquo;.&nbsp; Love the use of git as a deployment  framework, love the minimal interface, love the pricing model, just love the  whole thing&nbsp;&ndash; so I&rsquo;m sorry I had to miss the presentation.&nbsp; Another one to check  out later.</p><h2>Entity Framework "Code First": Domain Driven CRUD</h2><p>Presenter: Chris Zavaleta</p><p>Having been playing with EF CTP5 recently I wanted this one to see if there  was anything worth expanding on.&nbsp; Turns out there is some nice stuff I didn&rsquo;t  see during my tinkering.&nbsp; Especially around the use of Configuration Categories  to break apart the OnModelCreating configuration and the Seeding stuff to  populate the DB with data.&nbsp; Again my audio was dropping off constantly and my  video was struggling so I had to drop out early on this one and throw in the  towel.</p><h2>Summing Up</h2><p>All in all a decent conference I could have done with reading up on some of  the subjects before hand.&nbsp; I will be visiting many of talks again when they come  online to get a better picture (pun intended) of the topics.&nbsp; Big thanks to all  involved.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better JSON Serialisation for ASP.NET MVC]]></title>
    <link href="http://yobriefca.se/blog/2010/11/20/better-json-serialisation-for-asp-net-mvc/"/>
    <updated>2010-11-20T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/11/20/better-json-serialisation-for-asp-net-mvc</id>
    <content type="html"><![CDATA[<p>  <p><p>The Json() method of controllers is a nice little convenience method for  serialising server side data into JSON for handy consumption on the client side  but it&rsquo;s not without it&rsquo;s issues.&nbsp; Firstly it just cant serialise dates in any  nice way due to no hard and fast standard in JSON for dates.</p><p><script src="https://gist.github.com/708168.js"></script></p><p>Simply gets spat back to the front end as a string like so,</p><p><script src="https://gist.github.com/708170.js"></script></p><p>Not exactly the most useful thing in the world. &nbsp;You are going to need to make use of JSON's reviver callback to parse this accordingly.</p><p>Another issue is lack of configurability.&nbsp; C# coding standards recommend the  use of PascalCased property names whereas in JavaScript land the standard is  camelCase (and many frameworks assume this casing which can cause issues behind  the scenes <em>cough</em>ExtJS<em>cough</em>).&nbsp; You can fix this by adding DataContract and  DataMember attributes to your model object but it gets a bit messy and open to  error if an attribute is left out accidentally.&nbsp; Or what if you don&rsquo;t have  access to the model code?</p><h2>JSON.NET</h2><p><a href="http://json.codeplex.com/">Json.NET</a> is my JSON de/serialiser of  choice.&nbsp; It&rsquo;s fast and widely configurable plus it fixes the problems I&rsquo;ve  mentioned above (among many many other things).&nbsp; Not to mention some BSON  (Binary JSON) support which could come in handy in the future.</p><h2>JsonNetResult</h2><p>So lets fix things.&nbsp; Lets wrap Json.NET up in an ActionResult type and offer  a configurable entry point.</p><p><script src="https://gist.github.com/708173.js"></script></p><p>As you can see I have exposed the JsonSerializerSettings object allow  developers to tune the serialisation all they want.&nbsp; We can also make things  even simpler by providing a Controller extension method that we can call without  having to create the object directly,</p><p><script src="https://gist.github.com/708175.js"></script></p><p>Simple stuff but still pretty powerful, lets see it in action.</p><h2>The Date Problem</h2><p>We can fix the date problem in a number of ways via converters.&nbsp; Converters  give us a custom way to convert values of objects and Json.NET provides a number  of converters out of the box &ndash; IsoDateTimeConverter, JavaScriptDateTimeConverter  and an abstract base DateTimeConverter to roll your own.&nbsp; Lets use the  JavaScriptDateTimeConverter for this example,</p><p><script src="https://gist.github.com/708176.js"></script></p><p>The resultant JSON object will generate a JSON object with a JavaScript Date  constructor</p><p><script src="https://gist.github.com/708178.js"></script></p><p>While not strictly valid JSON native JSON parsers and JSON2 handle it  fine.</p><h2>The Casing Issue</h2><p>We can use Json.NET&rsquo;s contract resolver to automagically convert PascalCased  property names of C# to camelCased property names of JavaScript.</p><p><script src="https://gist.github.com/708179.js"></script></p><p>Which gives us a response like so,</p><p><script src="https://gist.github.com/708183.js"></script></p><p>Fixed.</p><h2>Wrap Up</h2><p>So we have managed to create a much more powerful JSON serialisation  technique without having to sacrifice too much of the convenience of the Json()  method in the controller.&nbsp; Anyone got any recommendations/enhancements they are  willing to share? &nbsp;</p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Razor View Engine]]></title>
    <link href="http://yobriefca.se/blog/2010/11/18/the-razor-view-engine/"/>
    <updated>2010-11-18T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/11/18/the-razor-view-engine</id>
    <content type="html"><![CDATA[<p>  <p><em>Sorry for the poor syntax highlighting on the source code... not much support for Razor ATM</em></p><p>I&rsquo;ve been holding off trying to form an opinion on this until we got the full  package so to speak.&nbsp; With MVC 3 RC1 being released last week I guess it&rsquo;s time  to share my thoughts on the <a href="http://blog.robertgreyling.com/2010/07/is-razor-just-wolf-in-sparks-clothing.html">mildly  contentious</a> view engine.&nbsp; First things first though &ndash; lets be extremely  superficial and compare a a bit of code.&nbsp; Specifically lets look a using a loop  to output a list of &ldquo;really useful&rdquo; list items.&nbsp; In the older WebForms view  engine you&rsquo;d do something like this.</p><p><script src="https://gist.github.com/705755.js"></script></p><p>Even for a very trivial example it does look a bit messy - lots of redundant  start and end markers etc.&nbsp; Lets look at the equivalent in Razor,</p><p><script src="https://gist.github.com/705756.js"></script></p><p>Now excuse me while I go off on a tiny bit of a tangent.&nbsp; There are two  things you probably notice about the equivalent Razor syntax,</p><ol><li>It&rsquo;s much cleaner because of some very clever parsing </li><li>It&rsquo;s still embedding code in a view.&nbsp; THE HORROR!!!! </li></ol><p>Yeah I know in this day and age when everyone is trying to eradicate every  suggestion of server code in a view Microsoft have went right ahead and actually  enabled you to do it in neat/cleaner manner.&nbsp; It works though &ndash; doesn&rsquo;t it?&nbsp; I  mean why abstract C# when your view is going to get compiled into C#?&nbsp; Why try  and mimic HTML/XML when technically speaking your custom markup is pretty much  meaningless?&nbsp; What&rsquo;s wrong with being able to see when server side syntax  finishes and front end syntax takes over?&nbsp; It makes a lot of sense to me  actually.</p><h2>The Truth Will Out</h2><p>I&rsquo;ve been holding off judgement on Razor for a while until it was more  &ldquo;complete&rdquo;.&nbsp; Truth be told for a long time I could have easily summed it up  as</p><blockquote><p><span style="color: #000000;">It&rsquo;s the WebForms View Engine with the &lt;% %&gt;  replaced with @</span></p></blockquote><p>In some ways thats true but at an extremely basic level.&nbsp; I misjudged it.&nbsp; I  was wrong.&nbsp; I actually kind of like it now.</p><h2>But what about Spark?</h2><p>I&rsquo;ve been an advocate of the <a>Spark View  Engine</a> for sometime in my company and I&rsquo;ve used it on a few projects very  successfully.&nbsp; It&rsquo;s a great engine but has suffered from a lack of tooling &ndash;  there are plenty of developers that simply reject or get a negative impression  of something because of the lack of tooling for the tech.&nbsp; Spark, especially in  comparison to Razor, has very limited tooling support in VS2010 &ndash; sure you have  SparkSense but it&rsquo;s currently not a patch on Razor support (which is still in  itself RC status) and I can&rsquo;t help but feel they&rsquo;ll always be playing catch-up  with in house developed/supported stuff.&nbsp; Would I have like to see Spark being  adopted by MS rather than them rolling their own view engine?&nbsp; Perhaps, but  variety is the spice of life and I&rsquo;m happy to have Razor around.</p><p>So what will I use on future projects?&nbsp; I&rsquo;m tending towards Razor for now but  perhaps that&rsquo;s because it&rsquo;s new and I&rsquo;m a technology magpie.&nbsp; Also it easier to  justify the use of a technology to a customer when they are provided pre-bundled  and supported by such a large entity.</p><p>&lt;/opinion piece&gt;</p><h2>Back On Track</h2><p>Now I&rsquo;ve had my little digression lets look at some of the features of  Razor.</p><h3>Syntax</h3><p>As I showed above the syntax is much more terse.&nbsp; The parser is clever enough  to detect when you mean server code and when you mean client code.&nbsp; This reduces  the need to use a lot of bulky delimiters like &lt;% and %&gt;.&nbsp; Also the parser  is able to determine if the @ you just wrote is a server side delimiter or just  plain text &ndash; most of the time.&nbsp; Alternatively you can fall back on the @@ syntax  to use a literal @.&nbsp;</p><p>The parser does choke sometimes when you don&rsquo;t wrap text in an appropriate  element or tag</p><p><script src="https://gist.github.com/705758.js"></script></p><p>fails whereas</p><p><script src="https://gist.github.com/705760.js"></script></p><p>is fine.&nbsp; If you really insist on not using an HTML element you can fall back  on one of two things.&nbsp; Using a &lt;text&gt; element that is a Razor tag for  marking an area for processing as plain text or a slightly shorter single line  equivalent of @:</p><p><script src="https://gist.github.com/705762.js"></script></p><h3>Layouts and Sections</h3><p>Razor (obviously) has support for master pages and rending content sections  including optional sections.&nbsp; Syntax for it is pretty simple, lets start with  our master page <em>Layout.cshtml</p><p><script src="https://gist.github.com/705766.js"></script></p><p>Couple of features worth mentioning,</p><ol><li>Use of RenderSection() to render named sections from the view, also able to  specify if the section is a required or optional section throught the use of the required argument (i.e. if it needs to or  doesn&rsquo;t need to be included in the view during render - if required is true and the section is missing you'll get a runtime error when you attempt to access the page).&nbsp; Another option for  optional sections is to use the IsSectionDefined method e.g. <p><script src="https://gist.github.com/705769.js"></script><p><p>This way we can, as demonstrated, provide some sort of default as well.</p></li><li>RenderBody convenience method.&nbsp; This is used to render the body of the  view.&nbsp; Unlike WebForms view engine Razor doesn&rsquo;t require you to wrap the main  body in a content area &ndash; similar to Spark.&nbsp;</li></ol><p>So an appropriate view that this master layout can &ldquo;consume&rdquo; could look like  this</p><p><script src="https://gist.github.com/705776.js"></script></p><p>Notice I have left out the footer but that&rsquo;s not an issue as it has been  marked as optional.&nbsp; Also notice that the body is at the root level of the view  and sections are wrapped in a section marker.&nbsp; This all adds a more minimal look  and feel to the whole view.</p><h3></em>ViewStart.cshtml</h3><p>Another leaf from the Spark world (and probably many other&nbsp;&ndash; sorry to  everyone else that supports/implements this sort of feature) is the ability to  provide a global place to put code that applies to every view.&nbsp; Using the  _ViewStart.cshtml file we could easily just put the Layout declaration from the  view code above into a single global location.&nbsp; We can also add helpers and  functions there too which I&rsquo;ll talk about now.</p><h2>Helpers</h2><p>Helpers enable use to provide context aware reusable HTML &ldquo;templates&rdquo; in our  views.&nbsp; Imagine a view that listed Top Selling, New and Top Rated products in 3  lists.&nbsp; The most basic way to implement this would be 3 loops like so</p><p><script src="https://gist.github.com/705778.js"></script></p><p>But that&rsquo;s not exactly DRY is it?&nbsp; Helpers can help us out here (hence the  name I guess :-P).&nbsp; Lets create a helper that does the repeatable stuff for  us,</p><p><script src="https://gist.github.com/705784.js"></script></p><p>And the rest of the view&hellip;</p><p><script src="https://gist.github.com/705788.js"></script></p><p>Much simpler, cleaner, whateverer.&nbsp; Again with the Spark similarities&nbsp;&ndash; these  are similar to macros.</p><h2>Functions</h2><p>Razor also makes it easier to embed arbitrary methods on your page which I  guess can be useful for formatting and things like that.&nbsp; This give us the power  to extend the Razor view engine and adapt it to suit our needs&nbsp;&ndash; powerful yes  but also open to abuse as you might guess.&nbsp; Here&rsquo;s a simple function in  action,</p><p><script src="https://gist.github.com/705790.js"></script></p><p>The function&nbsp;applies a highly technical string encryption&nbsp;technique to a  string value returning the result.</p><h2>Inline Templates</h2><p>One more feature before I head off to watch telly or sleep or something.&nbsp;  Razor allows you to pass little html nuggets or templates as arguments to  helpers and functions.&nbsp; There is a details blog post about this over at <a href="http://blog.andrewnurse.net/2010/08/02/InsideRazorPart3Templates.aspx">Vibrant  Code</a>&nbsp;and my example is heavily inspired/plagiarised from that.&nbsp; Lets see  what we can do,</p><p><script src="https://gist.github.com/705794.js"></script></p><p>Look at the second to last line see that little block of html preceded by the  Razor marker (@)?&nbsp; See how in our Times&nbsp;function the HTML block it is getting translated transparently as a  Func&lt;int, object&gt; the we can call and manipulate in the helper function anyway we want?&nbsp; Can  you see how powerful that could be in the&nbsp;right place?&nbsp; Me too.&nbsp; Me too.</p><h2>Done&nbsp;For Now</h2><p>There is more to Razor than all this stuff including the ability to use it  outside of the view context so it could simply be a&nbsp;templating language if needs  be.&nbsp; There is even more than that too but thats for another time.&nbsp; Imagine  though&hellip;. I started out this blog post more or less telling you I used to think  Razor was simply the WebForms view engine but with @&rsquo;s instead of &lt;% %&gt;&rsquo;s  and hopefully you can see why I was wrong and why I was happy to admit it.&nbsp; My  only gripe is that the Razor documentation could be a bit more available.&nbsp; There  isn&rsquo;t really a great deal out there ATM.&nbsp; However this has been promised for the  official release so I am looking forward to that.</p><p>Oh Misfits is about to start&hellip;&hellip;</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Validation in ASP.NET MVC 3 RC1]]></title>
    <link href="http://yobriefca.se/blog/2010/11/10/remote-validation-in-asp-net-mvc-3-rc1/"/>
    <updated>2010-11-10T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/11/10/remote-validation-in-asp-net-mvc-3-rc1</id>
    <content type="html"><![CDATA[<p>  <p><em><strong>UPDATE</strong>: &nbsp;Added some words around the extra configuration options available</em></p><p>Remote validation has finally landed in RC1 of <a href="http://weblogs.asp.net/scottgu/archive/2010/11/09/announcing-the-asp-net-mvc-3-release-candidate.aspx">ASP.NET  MVC 3</a>.&nbsp; It&rsquo;s a&nbsp;weird area as more often than not people tend to over  complicate something that is really pretty simple.&nbsp; Thankfully the MVC  implementation is fairly straightforward by simply providing wiring allowing the <a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/">jQuery  Validation</a> plugin to work it's magic.&nbsp; Basically there is a new Remote attribute that can be used  like so.</p><p><script src="https://gist.github.com/670685.js"></script></p><p>As you can see we have attributed the Username field with a Remote  attribute.&nbsp; The 2 parameters tell us what Action and Controller we should call  to perform the validation. &nbsp;This does make me feel slightly uneasy as it kind of feels like you are coupling the controller to the model which doesn't sit right by me. &nbsp;currently sitting on the fence I'll see how it works in real life. &nbsp;Anyway I implemented it like so,</p><p><script src="https://gist.github.com/670712.js"></script></p><p>And thats you - provided you have the necessary client side libraries included  of course (jQuery, jQuery Validate etc). and have Client Side Validation turned on (now by default in MVC3).</p><h2>Configuration</h2><p>The Remote attribute offers a few nice little configuration options to make  things easier.&nbsp; The typical ones are there such as ErrorMessage, ErrorResource  etc. but there are a few specific ones as well.</p><h3>Fields</h3><p>There may be a case where ding the name and the value of a single form field  isn&rsquo;t enough to perform validation.&nbsp; Perhaps validation is affected by some  other field/value in the form.&nbsp; The Remote attribute accepts a comma separated  list of other fields that need to be sent up with the request using the Fields  parameter</p><p>This basic example will send up the value of the EmailService input field  along with the value of Username.&nbsp; Clean and simple.</p><p><script src="https://gist.github.com/672168.js"></script></p><h3>HttpMethod</h3><p>HttpMethod simply allows us to change how the ajax request is sent e.g. via  POST or GET or anything else that makes sense.&nbsp; So to send a remote request via  POST</p><p><script src="https://gist.github.com/672169.js"></script></p><h2>A Minor Difference</h2><p>You might notice if you read the release notes for RC1 that my implementation  of the controller is slightly different.&nbsp; The reason being that the example in  the release notes is broken :-).&nbsp; The example looks like this</p><p><script src="https://gist.github.com/670723.js"></script></p><p>However the Validate plugin expects a JSON response which is fine on the  surface but returning a boolean response to the client side results in a  response body of False (notice the captial F) which in turn causes a parse error  when the plugin performs JSON.parse.&nbsp; My suggested solution is actually more  inline with how most people would typically write an Ajax capable controller  action anyway (though I am not happy with the JsonRequestBehaviour usage) but  there are other ways but they aren&rsquo;t pretty&hellip;.</p><p><script src="https://gist.github.com/670736.js"></script></p><p>See?&nbsp; Ugly and plain <strong>WRONG</strong> (but it will work).</p><p>Nice to see this feature finally landing as it can be useful in certain  situations.</p></p>
]]></content>
  </entry>
  
</feed>
