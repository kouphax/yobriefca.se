<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>.NET | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/-net/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-12-12T14:43:29+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Website Workflow for Bosses]]></title>
    <link href="http://yobriefca.se/blog/2012/07/12/azure-website-workflow-for-bosses/"/>
    <updated>2012-07-12T12:23:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/07/12/azure-website-workflow-for-bosses</id>
    <content type="html"><![CDATA[<blockquote><p>So consider my indefinite hiatus suspended definitely.  I suck at quitting!  But we wont dive into the whys and wherefores  around that now.</p></blockquote>

<p>I've a confession to make, the "new" Azure, I like it.  Yeah I do, s'nice.  I like the way it blends PaaS with IaaS (though I do feel that adding 1st class node.js and PHP support is a bit of a tacked on marketing ploy).  So you dont have the "Add-On" model you get from Appharbor and Heroku but thats fine because this blending of "as a Services" gives you an alternate approach.  For a start you can just use the external services without them having to be "Add-Ons".  Sure you lose out on the nice automatic integration points for managing your services but it's not the end of the world and what happens when you want something that isn't available as an Add-On or worse not available as a cloudy SaaS thing?  Well I guess you need to go off to EC2 or similar and host your own (assuming you want to stick with the cloudy infrastructure).  But with Azure you also get another option - you want to use Mongo or some huge enterprisey platform that isn't SaaSified?  Stick it on an Azure VM.  Everything managed under one cloud provider.  Thats such a nice thing to have at your disposal.</p>

<p>But thats not the point of this post.  Most posts out there cover a workflow for Azure WebSites that make use of the portal to provision new sites (and then usually <code>git</code> to deploy) but that's weak sauce (the portal part at least - gits still aces).  No, no no - You want hyper-productivity, you want automated provisioning,  you want to be hip; node.js hip; and you want to feel like a boss hanging out on your command line while other "lesser people" click stuff with a silly little rodent.  I just read your mind, didn't I?  Well then - you got that with Azure.</p>

<h2>Setting Up</h2>

<p>First things first you need to install a few things.</p>

<h3>Installing node.js + NPM</h3>

<p><a href="http://nodejs.org/#download">Download</a></p>

<p>The tools are built and deployed in node via NPM, the node package manager so just run the one click installer and you'll be all setup.</p>

<h3>Installing Azure CLI Tools</h3>

<p>Install these via NPM so fire up your terminal/command prompt/whatever and type</p>

<pre><code>npm install azure -g
</code></pre>

<p>Then let NPM install all the dependencies and what not (the <code>-g</code> option just tells NPM to install the tools globally so they are accessible from the command line)</p>

<h3>Adding your account</h3>

<p>Next up you need to tell azure what account to use so fire this command into you command line</p>

<pre><code>azure account download
</code></pre>

<p>You'll then be taken to the Azure website and it should (assuming you're logged in already) download a <code>publishsettings</code> file.  Next up you need to import this file into your azure toolchain.</p>

<pre><code>azure account import YOUR_DOWNLOADED_FILE.publishsettings
</code></pre>

<p>After some scrolling text you'll be all set up and ready to deploy.  You'll be asked to delete the file you downloaded - probably best to do this :)</p>

<h2>Creating the app</h2>

<p>OK then lets create an app - what we create is irrelevant here so lets just create the default ASP.NET MVC website and use that as our sample app.  Remeber though, if you're a cutting edge awesome-addict to switch from .NET 4.5 to 4 or else you'll get some issues when deploying your site to Azure.</p>

<blockquote><p><strong>UPDATE</strong> : The next few steps can be condensed, thanks to the feedback from Glenn Block (@gblock),
<blockquote class="twitter-tweet" data-in-reply-to="224800579388575744"><p>@<a href="https://twitter.com/kouphax">kouphax</a> oh dude, you don't need all those steps! Do "azure site create my site --git" It will create the repo for you and add the remote!</p>&mdash; Glenn Block (@gblock) <a href="https://twitter.com/gblock/status/224855192800215040" data-datetime="2012-07-16T13:17:10+00:00">July 16, 2012</a></blockquote></p></blockquote>

<script src="http://yobriefca.se//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>This sets up your git repo during creation of the site, adds the remote endpoint and even generates a .gitignore file (which you need to edit yourelf for .NET projects.  WIN!!!!</p>

<p>Anyway.... on with the old post.</p></blockquote>

<p>Once you've created you app and saved it then you'll want to intialise an empty repo at the root of the solution,</p>

<pre><code>git init
</code></pre>

<p>Then we need to create a site on Azure we can push to.</p>

<h2>Creating a new site</h2>

<p>Back to the command line now,</p>

<pre><code>azure site create SITE_NAME
</code></pre>

<p>If we execute this, again at the root of our solution, it will do a number of things,</p>

<ol>
<li>Validate the request (site name availability and what not)</li>
<li>Create a new site on Azure</li>
<li>Add a new git <code>remote</code> to your <code>.git\config</code> file</li>
</ol>


<h2>Pushing site</h2>

<p>As I've said the last command actually added a remote repo to our git configuration so if we do the usual gitty stuff (you'll want to, for neatness sake, set up your <code>.gitignore</code> but we can skip this for brevity),</p>

<pre><code>git add -A
git commit -m "Boring commit message"
</code></pre>

<p>Now we push,</p>

<pre><code>git push azure master
</code></pre>

<p>Done!</p>

<h2>Viewing your site</h2>

<p>You could just browse to your new site but thats just not hip enough, hell no.  Instead lets launch it from the command line...</p>

<pre><code>azure site browse
</code></pre>

<p>That will launch our new site without having to touch a silly old, out of date rodent.</p>

<h2>Wrapping up</h2>

<p>Ok so thats the basic workflow for using CLI tools to manage Azure sites.  You can do this with most of the Azure services (VMs, Certs, Cloud Services etc.) aswell.</p>

<p>So apart from making you look all hackery working in the terminal it does have other uses, specifically around the fact terminal command can be easily executed in a headless automated environment.  Think of creating new sites as part of your CI's deployment pipeline, or as part of some disaster recovery process.  The possibilities are endless... heck even write your own UI for managing sites or deploying new sites/VM/whatever!</p>

<p>So lets see -</p>

<ul>
<li>CLI hackery coolness... ✓</li>
<li>Node.js hipster bragging rights... ✓</li>
<li>Azure website created and deployed with about 6 commands... ✓</li>
</ul>


<p>Not bad for a few minutes work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET on a Diet]]></title>
    <link href="http://yobriefca.se/blog/2012/06/07/dot-net-on-a-diet/"/>
    <updated>2012-06-07T21:40:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/06/07/dot-net-on-a-diet</id>
    <content type="html"><![CDATA[<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="4fd0fb8d3bb27c001f0309b7" data-ratio="1.3333333333333333" src="http://yobriefca.se//speakerdeck.com/assets/embed.js"></script>


<h2>Description</h2>

<p>There are plenty of framework options in .NET. We have the big mainstream web frameworks like ASP.NET WebForms and MVC, the ORM abstractions and DataMappers in the form of Entity Framework, NHibernate and iBatis and services such as WCF requiring large amounts of careful configuration to get right. Unfortunately these frameworks can get in the way, abstractions breakdown and leak and eventually we end up fighting against the frameworks limitations.</p>

<p>This session will take a look at the feature-fit lightweight alternatives and how they can be used to compose a technology stack that is cruft-free and fit for purpose.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking at NDC Oslo]]></title>
    <link href="http://yobriefca.se/blog/2012/03/19/ndc-oslo/"/>
    <updated>2012-03-19T21:34:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/03/19/ndc-oslo</id>
    <content type="html"><![CDATA[<p><img src="http://yobriefca.se/images/blog/ndc.png" style="border:none; box-shadow:none; -webkit-box-shadow:none; width:100%;" /></p>

<p>Mike Cohn, Dan North, Robert C. Martin, Udi Dahan, Gojko Adzic, Billy Hollis, Laurent Bugnion, Venkat Subramaniam, Brad Wilson, Phil Haack, Rob Conery, Greg Young, Zach Holman..... and then me.  So someone was drinking when deciding the line up for NDC Oslo right?</p>

<p>Seriously though I've been given one of the best opportunites of my career to talk alongside some of the shining lights of our industry at NDC Oslo so I better not drop the ball.  Thank you to whoever gave me the opportunity.  But hey if I mess up I've got another 2 shots at it... thats right I'm speaking not once, not twice but thrice.</p>

<ul>
<li><a href="http://ndcoslo.oktaset.com/t-4960">.NET On a Diet</a></li>
<li><a href="http://ndcoslo.oktaset.com/t-4961">MonoTouch - C# + iOS = Good Times</a></li>
<li><a href="http://ndcoslo.oktaset.com/t-4872">Mobile, How Do I Develop Thee? Let Me Count the Ways</a></li>
</ul>


<p>Still blown away by this, if you can't tell - given the calibre of people talking this is going to be a highlight of the year for sure.  Also it couldn't have come at a better time - there is so much I've wanted to say about things like the OSS world in .NET, Mono and mobile development. Now I've got the perfect opportunity.</p>

<p>Now whats this .NET thing I keep hearing about :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Parse in .NET and WP7]]></title>
    <link href="http://yobriefca.se/blog/2012/01/05/using-parse-in-net-and-wp7/"/>
    <updated>2012-01-05T13:59:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/01/05/using-parse-in-net-and-wp7</id>
    <content type="html"><![CDATA[<blockquote><p>UPDATE: Being completely wrong in assuming WP7 supports <code>dynamic</code> which apparently it doesn't the current build wont run in WP7.  So another item on the list is a version that doesn't rely on <code>dynamic</code> I guess.  Sorry for misleading anyone on that front - I did say it was rough and mostly untested right?</p></blockquote>

<p><a href="https://www.parse.com/">Parse</a> is a site aimed at providing a simple service for pushing and pulling data on mobile devices.  You can create applications and store your mobile data there, create users, provide logon/off mechanisms and even achieve push notifications.  There are 2 ways to access <a href="https://www.parse.com/">Parse</a></p>

<!-- more -->


<ol>
<li>Via its natively compiled binaries (on iOS and Android)</li>
<li>Via a its Rest API (for all non iOS/Android devices and desktops)</li>
</ol>


<p>Now I wanted to try and create bindings for the iOS library so I could use it for a Monotouch application I've been playing with but truth be told the whole process confused the hell out of me.  Thing was the REST API gave me everything I needed so I started recently to write a dynamic wrapper around the API.  Currently built on .NET in Visual Studio (Mono on my list) with a few sanity tests it works well enough to put it out there incase anyone was wanting to do something similar and could extract value from it.</p>

<p>It's pretty early at the minute - in fact all you can do with this first spike is basic object CRUD.  No querying yet, no special user management features etc.  But they will come.  So what could you use it for?  Well a number of things,</p>

<ul>
<li>WP7 Cloud Storage</li>
<li>Monotouch (and Monodroid) storage until someone smarter than me creates proper bindings to the actual iOS frameworks</li>
<li>It's an object store so why not use it to store data on any web app?</li>
<li>Just for tinkering.</li>
</ul>


<p>It makes use of <code>dynamic</code> from .NET 4 so you can kind of pass it arbitrary stuff and get arbitrary stuff back (Parse is schemaless so this makes sense for me).  It also means you wont have to create concrete classes for every single thing you want to store.</p>

<p>If you want to run the tests you'll need to sign up for Parse, create an app and update the <code>consts</code> in <code>describe_Parsely</code> to point to your new app (and authenticate).</p>

<h2>Sample Uses</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// create your parsley API</span>
</span><span class='line'><span class="n">Parsley</span> <span class="n">parsley</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Parsley</span><span class="p">(</span><span class="n">applicationId</span><span class="p">,</span> <span class="n">masterKey</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// create new class</span>
</span><span class='line'><span class="n">dynamic</span> <span class="n">response</span> <span class="p">=</span> <span class="n">parsley</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="s">&quot;MyClass&quot;</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">CoolProperty</span> <span class="p">=</span> <span class="m">1</span>  <span class="p">});&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// do other cool stuff</span>
</span><span class='line'><span class="n">parsley</span><span class="p">.</span><span class="n">Update</span><span class="p">(</span><span class="s">&quot;MyClass&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">objectId</span><span class="p">,</span> <span class="k">new</span> <span class="p">{</span> <span class="n">CoolProperty</span> <span class="p">=</span> <span class="m">4</span><span class="p">});&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">dyanmic</span> <span class="n">myObject</span> <span class="p">=</span> <span class="n">parsley</span><span class="p">.</span><span class="n">Retrieve</span><span class="p">(</span><span class="s">&quot;MyClass&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">objectId</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">parsley</span><span class="p">.</span><span class="n">Delete</span><span class="p">(</span><span class="n">myObject</span><span class="p">.</span><span class="n">objectId</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Outstanding Tasks</h2>

<p>Lots.  But here is the main ones I see right now.</p>

<ul>
<li>Compile on Mono and show MonoTouch some Parse love.</li>
<li>Samples (for WP7, Monotouch, possibly Monodroid)</li>
<li>Add Queries</li>
<li>Add User Management</li>
</ul>


<p>It's probably fairly rough right now and could do with some TLC if anyone wants to pitch in?  I've given it a name (Parsley) but that in no way implies this is going to be a long running project or anything.  I just like naming things.  Get it while it's hot, the code is in my <a href="https://bitbucket.org/kouphax/parsley">usual place</a>.</p>

<h2>Pre-Post Update</h2>

<p>Rather than update this blog post I decided to tack this on here.  With BitBucket experiencing some issues at present I spent about 10 minutes hacking in the user management features.  No tests written yet (oh no I have broken all the rules and must be beaten with oversized crayons) so lets just say that it's very edge, very experimental at the minute.  Also bonus - returning a collection of objects is implemented as <code>Query</code> but again totally untested (fast and loose - it's how I roll son).  There be dragons there therebe!</p>

<p>Happy hacking.</p>

<p>Can I have my WP7 MVP now please?  <strong>Kidding</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wednesday Tip: C# Type aliases]]></title>
    <link href="http://yobriefca.se/blog/2011/11/16/wednesday-.net-tip/"/>
    <updated>2011-11-16T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/11/16/wednesday-.net-tip</id>
    <content type="html"><![CDATA[<p>Ever written code that looks quite like this?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Dictionary</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="n">KeyValuePair</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;</span> <span class="n">cache</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="n">KeyValuePair</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have.  Ugly and noisy isn't it!  <!--more--> OK you could make it <em>slightly</em> less noisy by using <code>var</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">var</span> <span class="n">cache</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="n">KeyValuePair</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or I suppose you could ahead and create yet another random type to abstract the implementation out of the way but thats just too much work for something internal to a class.</p>

<p>Turns out you can make use of alises.  I've always known about using alises for namespaces to either resolve possible type conflicts or to make code a bit more understandable</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">CoreWeb</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Web</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">var</span> <span class="n">x</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CoreWeb</span><span class="p">.</span><span class="n">Request</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So this works with namespaces <strong>AND</strong> types.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">Cache</span> <span class="p">=</span> <span class="n">Dictionary</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span> <span class="n">KeyValuePair</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="kt">string</span><span class="p">,</span><span class="kt">string</span><span class="p">&gt;();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This allows us to make the declaration above in a much nicer manner,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Cache</span> <span class="n">cache</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Cache</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>OK so there are way to many uses of the word cache there but you get the gist.  Handy to know.  Never knew this until today #youlearnsomethingneweveryday</p>
]]></content>
  </entry>
  
</feed>
