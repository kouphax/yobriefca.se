<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>CoffeeScript | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-03-19T10:21:34+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoffeeScript: JavaScript sans Bad Parts]]></title>
    <link href="http://yobriefca.se/blog/2011/03/13/coffeescript-javascript-sans-bad-parts/"/>
    <updated>2011-03-13T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/03/13/coffeescript-javascript-sans-bad-parts</id>
    <content type="html"><![CDATA[<p>  <blockquote>This was written a long time ago when coffeescript was in early beta and I&rsquo;ve  decided to push it into the public domain.  I&rsquo;ve updated it a bit but I  apologise for any oversights.<p>Also worth mentioning that I am a lot more taken with it than I was at the time of the original blog. &nbsp;I will be revisiting this again soon.</p></blockquote><p>If I&rsquo;ve said it once, I&rsquo;ve said it a million times &ndash; JavaScript is  misunderstood.  Sure it&rsquo;s got it&rsquo;s bad parts (eval, ==, typed wrappers etc.) and  it&rsquo;s got it&rsquo;s VERY bad parts (global variables, scope, typeof etc) but it&rsquo;s also  got a lot of beautiful parts (functions as first class objects, object and array  literals, dynamic objects and prototypal inheritance etc.).  JSLint validates  your code against the good subset to ensure you aren&rsquo;t using all that nasty  stuff that is going to break your code eventually but can we take it a step  further?  What if we could take out the good subset and create a subset of the  language so we couldn&rsquo;t ever use the bad stuff?  Well turns out you can.</p><h2>Enter CoffeeScript</h2><p><a href="http://jashkenas.github.com/coffee-script/">CoffeeScript</a> is a  full featured subset of JavaScript.  Essentially it is a meta-language that  compiles into JavaScript.  Its syntax is a bit different, more like Perl, Python  or Ruby and the JavaScript it generates only uses the &ldquo;good parts&rdquo; of JavaScript  and passes all strict JSLint tests.</p><h3>Syntax</h3><p>CoffeeScripts syntax is close to JavaScript and besides a few extra goodies  it is nearly a 1:1 mapping.  However it strips away a lot of the boilerplate  stuff to make the code you write slightly more succinct.  Another feature of the  syntax is that indentation is important (like Perl or Python, I can never  remember which) as there are no line ending tokens.  So lets look at a few  statements</p><p><span style=""><script src="https://gist.github.com/868206.js"></script></span></p><p>This simple example of variable creation and assignment demonstrates how  CoffeeScripts avoids one of the most common and potentially fatal mistakes made  by many JavaScript developers &ndash; Inadvertent global variable declaration.  In  plain old JavaScript leaving out a var statement on a variable declaration  results in the variable being declared (or overwritten &ndash;eek!) in the global  scope.  In CoffeeScript var is optional and all variable declarations are made  in the current scope (and pushed to the top of the scope as is the JavaScript  way).  Want global scope declaration for some random reason?  Use  window.variable name and then ask yourself why you are doing it wrong.</p><p><span style=""><script src="https://gist.github.com/868210.js"></script></span></p><p><span style=""><a href="http://gist.github.com/868210" title="http://gist.github.com/868210"></a></span><span style=""><script src="https://gist.github.com/868208.js"></script></span></p><p>Function declarations are a good example of how succinct CoffeeScript can be  in comparison to JavaScript.  In fact anyone keen on C#&rsquo;s lambdas or Groovys  syntax will find this quite familiar.  Gone are the bloating function and return  keywords ( &ndash;&gt; is the empty function &ndash; function() {})</p><p><span style=""><script src="https://gist.github.com/868212.js"></script></span></p><p><span style=""><a href="http://gist.github.com/868212" title="http://gist.github.com/868212"></a></span><span style=""><script src="https://gist.github.com/868215.js"></script></span></p><p>Existence is a nice feature as it keeps non-boolean falsy values nice and  strict and saves a lot of guessing.  That&rsquo;s the basics but as I mentioned  earlier there are some nice bonus features that can make some common tasks very  clean.</p><h3><strong>The Goodie Bag</strong></h3><h4>Array Comprehension</h4><h4><span style="font-weight: normal;"><script src="https://gist.github.com/868218.js"></script></span></h4><p>Array comprehension is quite a common task in many JavaScript solutions.   Simply put this is the Map part of any typical MapReduce situations (common in  many NoSQL style databases and Ajax situations).  MapReduce is essentially &ndash;  given an array of items,</p><ul><li>Map: Transform that list into what you want (SQLs SELECT) </li><li>Reduce: Based on that mapping remove unwanted items</li></ul><p>In the Ajax world you&rsquo;d probably need to do this when dealing with JSON or  XML responses which are quite often generally result sets.  The example above  shows just how easy it is to apply an arbitrary function over an array of  items.  Now I guess the equivalent JS could be written slightly better by hand  but would it not take longer and be harder to maintain?  Probably.  This being  quite a common task the less you have to write the better!</p><h4>Splats</h4><p>Splats are a convenient way to work with the arguments object in JavaScript  while clearly outlining required and optional arguments.  Lets take this  example.</p><p><script src="https://gist.github.com/868221.js"></script></p><p>Look familiar to you .NET people?  It should because for all intents and  purposes this is the same as the param keyword.  Implementing this sort of thing  in JavaScript is no easy task.  Again the generated JavaScript could be  simplified if written by a human bean but could you get it right first time  without seeing this generated code?</p><h4>Destructing Assignment</h4><p>Already part of the JavaScript spec but not present in all implementations  (see MDC article) destructing assignments allow the assigning of multiple values  in one fell swoop e.g.</p><p><script src="https://gist.github.com/868224.js"></script></p><p>I&rsquo;ve never really come across a massive need for something like this but I  guess it&rsquo;s another handy tool to have in the scripting world.</p><h3>Should We All Be Using It?</h3><p>If you think I am going to say &ldquo;Yes&rdquo; immediatley you are wrong.  And if you are now  asking yourself why I even bothered typing this&hellip;. lets just say train rides are  boring but not as boring as most of the TV shows my darling wife makes me sit  through EVERY FLIPPING NIGHT OF MY LIFE!!!!</p><p>The big reason I am not recommending it yet is that I am not 100% convinced  of the benefits of using it above plain old JavaScript.  It&rsquo;s a bit like  marmite.  Many node.js developers write in CoffeeScript, and ONLY CoffeeScript  but many still simply reject it.  I can understand both standpoints so until I  can say without faltering that one side has got it right I am not taking it  seriously. &nbsp;That said I prefer to form my own opinions anyway so I need to spend a lot more time with it before I can jump to any conclusions.</p><p>Oh and, honestly, who actually really wants to spend what limited time they  have trying new things, hacking around, experimenting, taking risks, getting  frustrated and making plenty of mistakes?  Anyone? Anyone at all? &nbsp;Nah I didn't think so. &nbsp;Computers are just a 9-5 job for all of us ;-P</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CoffeeScript in .NET]]></title>
    <link href="http://yobriefca.se/blog/2011/01/17/using-coffeescript-in-net/"/>
    <updated>2011-01-17T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/01/17/using-coffeescript-in-net</id>
    <content type="html"><![CDATA[<p>  <p style="text-align: center;"><img src="http://posterous.com/getfile/files.posterous.com/temp-2011-01-17/GzcAkdBuuBhqnFqExtbBrpthjHwbqpFyslpzEnJEiIiwqmulsAjFgFAuciHJ/coffeescriptdotnet.png.scaled500.png" alt=""></p><p>I&rsquo;ve been playing with <a href="http://nodejs.org/">node.js</a> for a while  now and some of the things coming out of that community are simply amazing.&nbsp; One  of the interesting techs is <a href="http://coffeescript.org/">CoffeeScript</a>&nbsp;which is essentially a  JavaScript dialect that compiles into JavaScript.&nbsp; It&rsquo;s goal is to simplify the  JavaScript language by removing all those bad parts that can cause a lot of  grief&nbsp;and taking all those common tasks (array manipulation, scoping etc and  making them very very easy to achieve.&nbsp; I have an old post I have yet to publish  externally on the subject but I will get it out there ASAP.</p><p>CoffeeScript comes in 2 variations&nbsp;&ndash; a node.js specific version and a  &ldquo;standalone&rdquo; version that can be run in browser (pure JavaScript without any of  the node.js assumptions basically).&nbsp; Considering it&rsquo;s parsing one language into  another it&rsquo;s not recommended to be running the script client side every time so  if you want to use it you want to be doing the parsing server side and possibly  using some sort of caching to prevent redoing the parsing on every request.&nbsp;  This is the bad(ish) news for .NET folks because there really isn&rsquo;t any stable  JavaScript implementations that can run a script as complex a CoffeeScript (this  is essentially a compiler of sorts).&nbsp; Well at least not until now&hellip;.&nbsp; When i  first investigated this I tried using a number of JavaScript engines,</p><ul><li><a href="https://github.com/fholm/IronJS">IronJS</a>: Currently&nbsp;only a  partial implementation and&nbsp;doesn&rsquo;t appear to run the CoffeeScript  compiler&nbsp;fully.</li><li><a href="http://javascriptdotnet.codeplex.com/">JavaScript.NET</a>: Worked  for version 0.9 or so of CoffeeScript but there is a bug that causes version 1.0  to fall over and development appears to have ceased.</li><li>Command line JScript:&nbsp;Epic fail.&nbsp; Just wouldn&rsquo;t do what I needed it  to.</li></ul><p>Then along came&nbsp;yet another JavaScript engine for .NET so I gave it a shot.&nbsp;  On the surface <a href="http://jurassic.codeplex.com/">Jurassic</a>&nbsp;appeared to  offered everything I needed and upon diving a bit deeper I discovered that, yes,  it does indeed offer everything I needed&nbsp;&ndash; it runs the CoffeeScript compiler.&nbsp;  Sweet.</p><p>So lets write the compiler wrapper.&nbsp; Pretty basic really,</p><p><script src="https://gist.github.com/782874.js"></script></p><p>Few points worth noting here,</p><ul><li>I create a ThreadStatic instance of the Jurassic Engine and feed the  CoffeeScript compiler source into it once.&nbsp; The executions/evaluation of that  script is quite slow so I only wanted to take the hit once.&nbsp; Jurassic isn&rsquo;t  thread safe so I made the reference ThreadStatic.</li><li>Just to be extra safe I am locking during the execution of the compilation  task.</li><li>Any errors just return null.&nbsp; This is a bare bones implementation I have  stripped out custom logging and profiling code and an interface that means  little in this context.</li></ul><p>I have created a VS2010 MVC3 solution that makes use of this processor to generate JavaScript from a simple CoffeeScript example. &nbsp;Have fun.</p><p><a href="https://github.com/kouphax/coffeescript-dotnet">https://github.com/kouphax/coffeescript-dotnet</a></p><h2>What&rsquo;s Next?</h2><p>This is obviously only the start&nbsp;&ndash; if I wanted to use CoffeeScript in a .NET  environment I am going to need to consider how it is used.&nbsp; When should I be  compiling it?&nbsp; How should I be caching it etc?&nbsp; The usual things.&nbsp; Hopefully  I&rsquo;ll touch on these in a later post.</p><p>So right now this is kind of a request for comments, this was knocked up quite quickly and likely I have forgotten something or made a massive mistake. &nbsp;Anything you want to offer fire away.</p></p>
]]></content>
  </entry>
  
</feed>
