<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Education | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/education/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-10-06T10:26:40+01:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thinking about Hackathons]]></title>
    <link href="http://yobriefca.se/blog/2011/06/19/thinking-about-hackathons/"/>
    <updated>2011-06-19T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/06/19/thinking-about-hackathons</id>
    <content type="html"><![CDATA[<p>  <div class="update"><p>This post is a bit of a brain dump so expect some incoherence and repetition.  I&#8217;m buzzed on coffee and feel like a kid in a toy shop so I just want to get it out there and if anyone has any experience of hackathons feel free to pitch in.  In fact please do :)</p><p>Also sorry for the blogging overload.</p></div><h2>Background</h2><p>So I recently started walking to and from work.  The walk is about 3.5 miles which takes about 50 minutes.  This gives me a lot of time to think, even over think but even I bore myself sometimes so I decided to give podcasts a try.  I grabbed a load of <a href="http://hanselminutes.com">Hanselminutes</a> and <a href="http://herdingcode.com/">Herding Code</a> episodes to maybe learn something new.  One of the <a href="http://herdingcode.com/">Herding Code</a> podcasts really caught my attention &#8211; <a href="http://herdingcode.com/?p=310">109: Harmony Hackathon</a>.  The podcast tells the story of a group of people that got together and spent 48 hours designing and developing a solution for a charity organisation.  I&#8217;ve heard of hackathons before but hearing these guys talk about their experiences while using a technology stack that is my bread and butter (.<span class="caps">NET</span>) just got me all tingly inside.</p><p>I wanted to do this.  I know it sounds pathetic but the experience of hashing something out, cutting code and working totally agile without the bureaucracy of management slowing things up<sup class="footnote" id="fnr1"><a href="#fn1">1</a></sup> sounds really fun to me.  I tend to get bored on long running projects.  I really want to try new things in real projects but convincing managers or customers is a near impossible task as the &#8220;play it safe&#8221; attitude makes a lot more sense to them.  Come on guys who cares about money when there is fun to be had?</p><p>So anyway this got me thinking.  How would I go about this, why would I go about this and how would I get other people to give 24 or 48 straight hours of their life for something like this?  I mean I live in Belfast, Northern Ireland not exactly a <span class="caps">MAJOR</span> hub of geek activity.</p><h2>Hackathon Goals</h2><p>So why would we do this?  Having clear goals upfront is really going help sell this to people.  They will also act as guidance and help drive the entire event to the finish line.  There are plenty of reasons, perhaps even contradictory ones,</p><ul> <li>A finished product or prototype</li>    <li>Education of technologies and techniques</li>   <li>The experience</li> <li>Technology evaluation</li>  <li>Networking</li> <li>Something to put on your CV</li></ul><p>I realise that much of this is done on a per person basis but unless each persons goals are aligned in some way there is a risk the whole thing would fall apart.  Personally I think people wanting to leverage it for any sort of networking, CV building or taking unfounded punts on technology need not apply.  I am not adverse to a bit of risk taking in the technology stakes but they need to be calculated risks rather than a <em>&#8220;ohhh shiny lets use this&#8221;</em> attitude.  If it&#8217;s putting all the other goals at risk it&#8217;s not worth it.</p><ul> <li>A finished product or prototype</li>    <li>Education of technologies and techniques</li>   <li>The experience</li> <li><del>Technology evaluation</del></li>   <li><del>Networking</del></li>  <li><del>Something to put on your CV</del></li></ul><p>I&#8217;d be happy working with people who agree with me on at least 2 of the points above.  But of course this isn&#8217;t a hard and fast rule and I remain open for the greater good.</p><h2>The Idea</h2><p>So what would we do?  I don&#8217;t think it would work very well if we just played around with some technologies and produced a few prototypes.  No, addressing a real work problem or need that is of sufficient size and complexity that allows us to drive a spike right through the entire solution gives us something to work towards.  Actually producing something that works or at least proves that the idea is viable seems almost mandatory.  The thought of walking away after the 24 or 48 hours with something that you can show people is a noble goal.  Whether that be for charity, something internal for your company or something for the open source community.</p><p>I have plenty of ideas I would go for but this isn&#8217;t a dictatorship (not at this point anyway) this is only going to work if people feel really involved, after all when the &#8220;mid way slump&#8221; starts kicking in you&#8217;re only going to make it through if you <span class="caps">WANT</span> it to work and are invested in experience.  I guess what I am saying is you&#8217;d get people together &#8211; potential developers, product owners, investors up front and brainstorm, plan and argue.  This brings me on to another point&#8230;.</p><h2>The 7 P&#8217;s</h2><p>Prior Preparation and Planning Prevent Piss Poor Performance.  The more I think about this hackathon thing the more I come to the conclusion that it is so much bigger than the 24 or 48 hours of design and development.  Like all good adventures you have to go in prepared.  What would you need upfront?</p><ul>   <li>You need your goals clearly defined</li>    <li>You need a few user stories so there is something for people to do while things are getting established</li>    <li>You need your stack and approach mapped out (including source control, <acronym title="Continuous Integration"><span class="caps">CI</span></acronym> and Build Server etc.)</li>   <li>The participants need to at least have a fair idea what they are doing</li> <li>You need to have some sort of rough plan or schedule</li>   <li>You need food, drink, beer, alternative entertainment</li>  <li>You need a venue, a comfortable venue with internet access</li> <li>Oh and I guess you need to invest in whiteboards.  Lots and lots of whiteboards, and markers, and cue cards and possibly deodorant.</li></ul><h2>People involved</h2><p>Agile makes sense here, of course it does.  So it&#8217;s not just a matter of locking a few devs away with coffee and vitamin pills.  No you need product owners at hand, you need someone testing and you need some sort of <span class="caps">BDFL</span> (Benevolent Dictator for Life).  I guess a <span class="caps">BDFL</span> isn&#8217;t mandatory but a technical lead who has the final say is certainly going to make the decision making process a lot quicker &#8211; be that good or bad.</p><p>Motivational people are another thing that would come in handy.  Having people see something and be like &#8220;yeah that&#8217;s nice, good job&#8221; is going to keep those flagging energy levels up.</p><p>Developer headcount is another balancing act.  You need enough people to make the goals achievable but you also can&#8217;t have too many people or you risk stamping on each others feet.  I guess it depends on the size/complexity of the idea you want to implement but a finger in the air guess I&#8217;d say between 4-8 developers with a product owner and a tester (could be the same person) would be a nice number.</p><h2>Development Approach</h2><p>I&#8217;ve already said agile seems like a perfect fit and I think the whole ecosystem that agile brings in fits well.  <acronym title="Test Driven Development"><span class="caps">TDD</span></acronym>/<acronym title="Behaviour Driven Design"><span class="caps">BDD</span></acronym> almost seems mandatory here &#8211; at least some level of it.  Checking in code with no tests around it is going to cause a headache when you hit a bug that takes and hour to track down.  A strict regime of constant branching, merging and checkins (every 20 minutes or less) along with a fast continuous build system will help discover problems <span class="caps">ASAP</span>.</p><h2>Atmosphere and Communication</h2><p>An entire project condensed into 24/48 hours is going to magnify the pain points and tensions will rise.  Techniques such as Pomodoro would come in handy to make sure people aren&#8217;t burning themselves out too fast.  A quiet room and alternative non-computer based entertainment will give people a quick escape on their pomodoro break and a chance to get their head showered.  Communication <span class="caps">NEEDS</span> to flow so regular standups (every 30 minutes to an hour) are essential to spot problems early and find a way to resolve them quickly.  Again having some sort <acronym title="Benevolent Dictator for Life"><span class="caps">BDFL</span></acronym> could really help in this situation.</p><h2>Where now?</h2><p>You know what &#8211; someway, somehow I am going to do this.  Consider it part of my career bucket list.  Something I want to do before I join the great geek scrapheap in the sky.  Could I get the people? Yeah I reckon I could.  Could I get the sponsorship/support?  Most likely.  Could I find a suitable idea to run with?  Hells yeah.  So what is stopping me?  Hmmmmmm nothing.  <span class="caps">BRB</span> got a hackathon to organise&#8230;&#8230;..<sup class="footnote" id="fnr2"><a href="#fn2">2</a></sup></p><p class="footnote" id="fn1"><a href="#fnr1"><sup>1</sup></a> Not all managers are created equal but they have a job to do and process, meetings, documents etc. all get in the way.</p><p class="footnote" id="fn2"><a href="#fnr2"><sup>2</sup></a> Yeah really.  No joke.  I can but try.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guerrilla Learning Experiment #2: FlashBags]]></title>
    <link href="http://yobriefca.se/blog/2011/04/21/guerrilla-learning-experiment-2-flashbags/"/>
    <updated>2011-04-21T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/04/21/guerrilla-learning-experiment-2-flashbags</id>
    <content type="html"><![CDATA[<p>  <p>So I kicked off another experiment in my war against ignorance in the IT industry.&nbsp; To make myself look cool I am using the term Guerrilla Learning.&nbsp; The experiment?&nbsp; Well I am calling it FlashBag<em></p><blockquote>Flashbag (fuh-lash-bah-ag): A flashbag is a group of people who assemble suddenly in a meeting room type place, partake in a brief technical discussion (or demonstration), then disperse, often for the purposes of education and betterization.</blockquote><p>The name itself is a portmanteau of Flash Mob (I assume you all know what this is by now) and Whitebag - a technology awareness session held during lunch - hence Whitebag (the one you bring your lunch in).</p><p>Anyway whats it all about then?&nbsp; Well a typical scenario would be this.....&nbsp;</p><ul><li>I am reading my tech blogs on a day and come across a new tech that seems really nice.&nbsp;</li><li>As usual I link it on yammer or twitter or whatever and continue to dive into it.</li><li>I&rsquo;m sold.&nbsp; This is something other people need to know about.</li><li>So I book a room for 1/2 hour at the last minute, post internally the room and the topic (say 12:00, Boardroom, Glimpse for .NET)</li><li>Once the party is assembled I do a very short talk, possibly demo (15 minutes tops) and thats it.</li></ul><p>So what would this achieve?&nbsp; Well I believe a lot of people throw links and stuff into a &ldquo;Read Later&rdquo; pile or have a quick look at the page and go &ldquo;Cool&rdquo;.&nbsp; Then they forget all about it.&nbsp; This quick interactive, community focused practical sessions forces them to actually think about whats going on (James Hughes PHd in Theoretical Theories and Things like that) and how they would apply it to their work.&nbsp; It&rsquo;s more in your face and creates a better connection in those peoples minds.&nbsp; The news then precipitates&nbsp; further - the people attending the FlashBag post on yammer/twitter and talk about it more rather than just little old me.</p><p>As always I record these things as a memento of my awesome presentation skills (#lies) and allowing other people to see what went on.</p><p>It&rsquo;s early days and I&rsquo;ve done one so far (posting shortly) - turn out was mediocre but perhaps that will change, perhaps it won&rsquo;t.&nbsp; Mediocre turn out is better than none I guess - perhaps people are busy, perhaps enthusiasm is waining among my colleagues, or perhaps they are sick of me spamming every sense they have on a daily basis!</p><p>Thoughts?</p><p></em> After some internal discussion the name is up for debate.&nbsp; I like it but mostly because of my huge ego.&nbsp; Thoughts?</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crucible Code Review Guidelines]]></title>
    <link href="http://yobriefca.se/blog/2011/04/19/crucible-code-review-guidelines/"/>
    <updated>2011-04-19T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/04/19/crucible-code-review-guidelines</id>
    <content type="html"><![CDATA[<p>  <p>I&rsquo;ve been using Crucible on a number of projects for the last few months and I love it.&nbsp; So now comes the time we want to try and make a case for it to be rolled out to other projects in the company I work for.&nbsp; Along with the usual stuff such as cost of licenses, logistics, hardware need and so on I also need to consider education and best practise guidelines (oh I said &ldquo;best practise&rdquo; that term makes me feel slightly queasy) because after all &mdash; if people aren&rsquo;t using it right they probably wont see the benefit, stop using it and then we are back to square one with wasted time, money and effort.</p><p>Some of you may be thinking,</p><blockquote>&ldquo;But it&rsquo;s just a code review tool - what guidelines do you really need?&rdquo;</blockquote><p>But truth be told you do need some, and I learnt this the hard(ish) way.&nbsp; So here are some top tips to getting the most out of Crucible and at the same time possibly embettering (not a real word but should be) your development approach.</p><h2>Rule 1: Review Early, Review Often</h2><p>Don&rsquo;t wait for a whole week before committing 600 files as a single review &mdash; no ones going to actually do a proper review as they don&rsquo;t have time or patience.&nbsp; Generally speaking your work should be sufficiently broken down so that you can do a few hours of work, commit that code and submit that changeset as a review.&nbsp; Typically speaking a small review may only take about 5 minutes or so to review per person which is a lot easier than having to actually book time to read an entire books worth of code.&nbsp; Obviously don&rsquo;t be going insane on this.&nbsp; A code review should encompass a complete feature and not some arbitrary files that are only a small piece of the puzzle.&nbsp; Feel free to merge changesets where necessary too.</p><h2>Rule 2: Refrain from adding new content to old reviews</h2><p>I&rsquo;ve seen a few cases were a bunch of files have been added to a review and this review has been used over and over with people adding files and new versions until the whole thing had pretty much the entire codebase included.&nbsp; Needless to say that&rsquo;s wrong.&nbsp; Create a review and don&rsquo;t be adding new files or versions too it unless it&rsquo;s in the early stages of review and it is deemed necessary.&nbsp; Don&rsquo;t be afraid of kicking off more than one review - it&rsquo;s not a crime, in fact it&rsquo;s advised</p><h2>Rule 3: Don&rsquo;t be TOO iterative</h2><p>Another problem I&rsquo;ve experienced is that a review can run for a very long time.&nbsp; This is linked to Rule 2 in that, based on my review comments, people will make the changes and bring that file in that review up to date.&nbsp; This leads to further comments and the whole thing just consumes too much time.&nbsp; Crucible gives you the power to do this but you need a bit of discipline to simply know when to stop and when to start a new review.</p><p>In recent projects I have been performing a review, making comments etc. and completing the review (unless there is anything serious I want to make sure gets addressed ASAP).&nbsp; When changes are made they generally get picked up in the next set of reviews anyway and as I talk to my team all the time I can give a brief sanity review when the changes are made. &nbsp;</p><p>Making your submitted reviews lightweight helps with this.</p><h2>Rule 4: Keep reviews small</h2><p>Again similar to Rule 1 and 2.&nbsp; Don&rsquo;t be submitting hundreds of files for a review.&nbsp; If you need to make a big review considering breaking it down into smaller feature sets and describing this in the review.&nbsp; It makes it easier for reviewers to perform the review and for yourself to make the changes quickly (if any)</p><h2>Rule 5: Let everyone get involved</h2><p>Gone are the days when a single (supposedly) smart person performs all reviews.&nbsp; Social code reviews are and should be the future.&nbsp; Embrace this.&nbsp; Every single dev on my projects are added to reviews by default, even people with little to no experience of the technology.&nbsp; Not only does it help people spot things that others may miss but it also&nbsp;</p><ul><li>generates debate and discussion around coding style</li><li>helps people get an understanding of the coding practise in the project</li><li>acts as a learning tool for people</li><li>helps people feel more involved in the project and team</li></ul><h2>Conclusion (cause I can&rsquo;t think of a better word)</h2><p>Hopefully these guidelines give you a better understanding of how I work and how I get maximum benefit from Crucible.&nbsp; After all it is just a tool and therefore open to abuse.&nbsp; Honestly it&rsquo;s better than our previous approach (literally using Word documents) and I can&rsquo;t imagine anyone would prefer our old approach to this.&nbsp; Does anyone else have any recommendations around the use of Crucible?</p></p>
]]></content>
  </entry>
  
</feed>
