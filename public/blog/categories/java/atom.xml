<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Java | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-11-05T08:53:00+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Quick and Dirty, Super Ugly,] Starter for 10 - Dropwizard]]></title>
    <link href="http://yobriefca.se/blog/2012/07/03/starter-for-10-dropwizard/"/>
    <updated>2012-07-03T13:07:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/07/03/starter-for-10-dropwizard</id>
    <content type="html"><![CDATA[<p>So once again I'm writing Java without a gun to my head, and once again I'm finding it enjoyable.  Don't get me wrong Java as a language feels very long winded, old and cumbersome but the frameworks and stuff that exist around it actually make those issues, less prominent, so much so I think I could easily live with the noise that Java brings.</p>

<p>Anywho.</p>

<p><a href="http://dropwizard.codahale.com/">Dropwizard</a> is a framework for creating very simple ReSTful Web Services in Java.  Not just that but it also bundles some nice best practise in with it as well.  Things like pluggable health checks, logging, configuration, content negotiation etc.  And, because it's fairly lightweight its fast.  Very fast.</p>

<p>In fact you can think of Dropwizard as a collection of pre-existing tools glued together with some simple features to create a cohesive stack for HTTP+JSON web services.  You've got <a href="http://www.eclipse.org/jetty/">Jetty</a>, <a href="http://jersey.java.net/">Jersey</a>, <a href="http://jackson.codehaus.org/">Jackson</a>, <a href="http://metrics.codahale.com/">Metrics</a>, <a href="http://logback.qos.ch/">Logback</a>, <a href="http://www.jdbi.org/">JDBI</a> and more.  Dropwizard give you the glue that binds these along with a simple pipeline that makes use of these technologies.</p>

<h2>Simple Todo</h2>

<p>I had intended to do something a little more substantial but I am about to make a small annoucemnet that has kind of effectivley stopped me expanding this app much further.  So lets create a simple Todo App.</p>

<h3>pom.xml</h3>

<p>As with most Java projects lets start with the <code>pom.xml</code> which is effectively our project definition.  I'll not show you my entire POM, at least not on the first date, but let me reveal the important parts.</p>

<p> Beause it's awesome I want to include WebJars so I add my repository,</p>

<p>{%codeblock lang:xml%}</p>

<pre><code>&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;webjars&lt;/id&gt;
        &lt;url&gt;http://webjars.github.com/m2&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>

<p>{%endcodeblock%}</p>

<p>Next I add my dependencies,</p>

<ol>
<li>Dropwizard Core which has everything you'll need for this</li>
<li>jQuery from the WebJar repository</li>
</ol>


<p>{%codeblock lang:xml%}</p>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.yammer.dropwizard&lt;/groupId&gt;
      &lt;artifactId&gt;dropwizard-core&lt;/artifactId&gt;
      &lt;version&gt;0.4.2&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.jquery&lt;/groupId&gt;
      &lt;artifactId&gt;jquery&lt;/artifactId&gt;
      &lt;version&gt;1.7.2-1&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p>{%endcodeblock%}</p>

<p>I also add the <a href="http://maven.apache.org/plugins/maven-shade-plugin/">shade plugin</a> which will let me build a Fat Jar (a jar with all my dependencies and what not in it).</p>

<p>{%codeblock lang:xml%}</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;
    &lt;version&gt;1.6&lt;/version&gt;
    &lt;configuration&gt;
        &lt;createDependencyReducedPom&gt;true&lt;/createDependencyReducedPom&gt;
        &lt;filters&gt;
            &lt;filter&gt;
                &lt;artifact&gt;*:*&lt;/artifact&gt;
                &lt;excludes&gt;
                    &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;
                    &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;
                    &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;
                &lt;/excludes&gt;
            &lt;/filter&gt;
        &lt;/filters&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;shade&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
                &lt;transformers&gt;
                    &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/&gt;
                    &lt;transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"&gt;
                        &lt;mainClass&gt;se.yobriefca.TodoService&lt;/mainClass&gt;
                    &lt;/transformer&gt;
                &lt;/transformers&gt;
            &lt;/configuration&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>{%endcodeblock%}</p>

<h3>Configuration</h3>

<p>Dropwizard has the ability to map configuration options (from a YML or JSON file) into concrete classes that can be accessed by your services.  So first I created a todo.yml at the root of the project (beside the pom.xml) with some basic configuration</p>

<p>{%codeblock lang:xml%}
http:</p>

<pre><code>rootPath: "/app/*"
</code></pre>

<p>{%endcodeblock%}</p>

<p>This configuration tells Dropwizard that my services are located at a url starting with  <code>/app</code> - eg <code>/app/todo</code>.  This is necessary as I want to create an asset later that maps to the root url <code>/</code> that is the default of Dropwizard.  At this point I haven't needed any of my own configuration but if I did I could create a POJO that maps to proeprties in this file.  The <a href="http://dropwizard.codahale.com/getting-started/#creating-a-configuration-class">official guide</a> has more on this.  For now I will create an empty <code>Configuration</code> class in case I want to extend it later (yeah I know YAGNI YAGNI KISS YAGNI - shutuppayourface!)</p>

<p>{%codeblock lang:java%}
package se.yobriefca;</p>

<p>import com.yammer.dropwizard.config.Configuration;</p>

<p>public class TodoConfiguration extends Configuration {
}
{%endcodeblock%}</p>

<h3>Service</h3>

<p>The service is the core class in our solution.  It's the thing that has the <code>main</code> as an entry point.  The thing that "set us up the resouces" and registers healthchecks and controls our service lifecycle.  You'd think there would be loads of code here?  Right?  Wrong!</p>

<p>{%codeblock lang:java%}
package se.yobriefca;</p>

<p>import com.yammer.dropwizard.Service;
import com.yammer.dropwizard.bundles.AssetsBundle;
import com.yammer.dropwizard.config.Environment;
import se.yobriefca.resources.TodoResource;</p>

<p>public class TodoService extends Service<TodoConfiguration> {</p>

<pre><code>public static void main(String[] args) throws Exception {
    new TodoService().run(args);
}

private TodoService() {
    super("todo");

    addBundle(new AssetsBundle("/assets", "/"));
    addBundle(new AssetsBundle("/public", "/public/"));
}

@Override
protected void initialize(TodoConfiguration configuration, Environment environment) {
    environment.addResource(new TodoResource());
}
</code></pre>

<p>}
{%endcodeblock%}</p>

<p>So all services extend <code>Service</code> and have a <code>Configuration</code> type (FYI these config types can be nested so its not as restrictive as I first thought).  Basically what we have is a <code>main</code> method that create an instance of our service and runs it.  Upon creation we add two bundles to the service.  A bundle is bascially a bit of functionality and in this case we create two <code>AssetBundles</code> which can be used to serve static content (embedded resources) upon request to a specific URL (think things like CSS, JavaScript, HTML etc.)  You'll notice I am mapping 2 things bundles here and this is because I need to map to the WebJars directroy as well.  So when I got to <code>localhost/index.html</code> it will match the url pattern in the first AssetsBundle and look for a file <code>src/main/resources/assets/index.html</code>.</p>

<p>Finally we have the <code>initialize</code> method that allows us to decare mutliple resources and healthchecks against our environment.  We also get handed our configuration class we decalred in advance.</p>

<h3>A bit about healthchecks</h3>

<p>Healthchecks are little classes that perform some sort of test on a part of your solution.  For example we could have a database connectivity check.  These healthchecks are made available on the <a href="http://dropwizard.codahale.com/manual/core/#health-checks">admin section that is bound to another port</a> when your app starts.</p>

<p>Now I didn't define any for this example and for that I feel absolutely terrible.  Seriously I kind of feel sick thinkging about it.  And whats worse Dropwizard kindly reminds me everytime I start the app - using LOTS of exclamantion marks and CAPS!!!  IRL you should really not follow my example here.</p>

<h3>Resources</h3>

<p>Resources are resources as they are identified in ReSTy things.  For example a <code>User</code> is a resource or an <code>Order</code> etc.  These things will respond to HTTP requests matched against the URL and the HTTP Method used.  In my example I have defined a resource <code>Todo</code> that can be used to list, create and delete (I didn't need anything else for this).</p>

<p>{%codeblock lang:java%}
@Path("/todos")
@Produces(MediaType.APPLICATION_JSON)
public class TodoResource {</p>

<pre><code>private static final ArrayList&lt;Todo&gt; todos = Lists.newArrayList();

@GET
public Collection&lt;Todo&gt; list() {
    return todos;
}

@POST
public Todo add(@Valid Todo todo){
    todos.add(todo);
    return todo;
}

@DELETE
@Path("/{id}")
public Todo delete(@PathParam("id") final LongParam id){
    Todo todo = null;
    List&lt;Todo&gt; todoCopy = Lists.newArrayList(todos);

    todos.clear();

    // loop past all items in the list and replace the changed one
    for (Todo element: todoCopy) {
        if(element.getId() != id.get()){
            todos.add(element);
        }else{
            todo = element;
        }
    }

    return todo;
}
</code></pre>

<p>}
{%endcodeblock%}</p>

<p>Again not a great deal of code and what code that is there is fairly straightforward - some would say boilerplate.  We use annotations to map our HTTP Methods <code>@GET</code>, <code>@POST</code> and <code>@DELETE</code> as well as a <code>@Path(...)</code> annotation to specify what url this resource resonds to.  Another nice feature we can see annotated here is we get both validation (via the @Valid annotation which is based on Hibernates Validation framework) and JSON model binding via Jackson and model annotations (get to that in a minute).</p>

<p>For this simple demo I am storing a list of Todos in an ArrayList in memory (top of the class).</p>

<h3>Model</h3>

<p>The model is, bar all the annotations to enable serialisation, fairly POJO-like,</p>

<p>{%codeblock lang:java%}
public class Todo {</p>

<pre><code>// Not So Universally Unique!
private static final AtomicLong NSUUID = new AtomicLong();

@JsonProperty
private final Long id;

@NotEmpty
@JsonProperty
private final String content;

@JsonCreator
public Todo(@JsonProperty("content") String content) {
    this.id = NSUUID.incrementAndGet();
    this.content = content;
}

public String getContent() {
    return content;
}

public Long getId(){
    return id;
}
</code></pre>

<p>}
{%endcodeblock%}</p>

<p>I've put this in more for completeness as there is little involved in this.</p>

<h3>index.html</h3>

<p>I am not going to create some elaborate over architected front end here - just a few lines of JavaScript (ignoring the rather large jQuery library included of course) and not styling.</p>

<p>{%codeblock lang:html%}
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;Demo&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div&gt;
  &lt;input type="text" id="task" /&gt; &lt;button id="addTask"&gt;Add Task&lt;/button&gt;
&lt;/div&gt;
&lt;ul id="todos"&gt;&lt;/ul&gt;
&lt;script type='text/javascript' src='http://yobriefca.se/public/jquery.min.js'&gt;&lt;/script&gt;
&lt;script&gt;
  $(function(){
    // load and replace the list
    $.getJSON("/app/todos", function(todos){
      for(var i = 0; i &lt; todos.length; i++){
        $("#todos").append(
          "&lt;li&gt;&lt;input type='checkbox' data-id='" + todos[i].id +"'/&gt;" +
            todos[i].content +
          "&lt;/li&gt;"
        )
      }
    });

    // manage adding a new task
    $("#addTask").click(function(){
      $.ajax({
        url:         "/app/todos",
        type:        "POST",
        data:        JSON.stringify({ content: $("#task").val() }),
        contentType: "application/json; charset=utf-8",
        dataType:    "json",
        success:     function(data, textStatus, jqXHR){
          $("#todos").append(
            "&lt;li&gt;&lt;input type='checkbox' data-id='" + data.id +"'/&gt;" +
              data.content +
            "&lt;/li&gt;"
          )
        }
      })
    })

    $("#todos").delegate("input[type=checkbox]", "click", function(){
      var chk  = $(this),
      item = chk.parent("li"),
      id   = chk.data("id");

      $.ajax({
        url:         "/app/todos/" + id,
        type:        "DELETE",
        contentType: "application/json; charset=utf-8",
        dataType:    "json",
        success:     function(data, textStatus, jqXHR){
          if(data.id === id){
            item.css({"text-decoration": "line-through"});
            chk.remove();
          }
        }
      })
    })
  })
&lt;/script&gt;
</code></pre>

<p>  </body>
</html>
{%endcodeblock%}</p>

<p>And thats it.  Oh wait I also added a boot command that peforms the maven packing and starts the jar.</p>

<p>{%codeblock%}
mvn package;java -jar target/todo-0.1.jar server todo.yml
{%endcodeblock%}</p>

<p>Just run <code>./boot</code> (assuming you've chmod'd the file to be executable) and you'll have, assuming I (or you) haven't made any mistakes, a Todo service running on port 8080 (with admin/diagnostics stuff on port 8081).</p>

<p>As always the <a href="https://github.com/kouphax/dropwizard-todo">example code is available on Github</a>.  Sorry for the rushed nature of this post, I'll hopefully keep tweaking the example on Github till it's a bit nicer - perhaps even with tests and comments (YEAH RIGHT!!!!)</p>

<p>In short - Dropwizard - simple ReST services, very little config, very nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tinkering with Spark: A Micro Web Framework for Java]]></title>
    <link href="http://yobriefca.se/blog/2012/03/20/tinkering-with-spark-a-micro-web-framework-for-java/"/>
    <updated>2012-03-20T21:37:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/03/20/tinkering-with-spark-a-micro-web-framework-for-java</id>
    <content type="html"><![CDATA[<div style="text-align:center;margin-bottom:20px;">
<img src="http://yobriefca.se/images/blog/spark_logo_blue.png" style="border:none; box-shadow:none; -webkit-box-shadow:none;" />
</div>


<p>You can't call yourself a language these days without having your own <a href="http://sinatrarb.com">Sinatra</a> clone.  Not even, it seems, if you are Java.  I know - it sounds odd that Java, the language that turns XML into stacktraces, has a micro web framework of it's own - <a href="http://sparkjava.com">Spark</a>.  I'm well aware as of JRE 1.6 has a built in <code>HttpServer</code> class but there is such as thing as <strong>too close</strong> to the metal :)  Also Sparks logo is fairly epic.</p>

<p><a href="http://sparkjava.com">Spark</a>'s site has a great little piece about the "why" and that is what stuck with me.  Especially this bit,</p>

<blockquote><p>Its intention is to be used by Java developers that want or are required to develop in pure Java.</p></blockquote>

<p>I know a few people who are "required" to develop in pure Java and anything that might make their lives easier would be welcomed.  Being completely out of loop with Java since before Maven made an appearance I had a lot of catching up to do just to get the project running.  In fact I went with SBT as it made things a lot easier for me and my mavenless brain.  I did have to tinker with the dependencies in the <code>ivy2</code> directory due to a <a href="https://github.com/perwendel/spark/pull/15">known issue</a> but if I can do it anyone interested in this can to - if not give me a shout.</p>

<h2>App.java</h2>

<p>A Spark app simply uses <code>main</code> as an entry point.  Within the method you can call certain methods to set up routes and filters and whatnots that your app will respond to.  For example</p>

<p>{% codeblock lang:java %}
import static spark.Spark.<em>;
import spark.</em>;
import java.io.*;</p>

<p>public class App {</p>

<p>  public static void main(String[] args)  {</p>

<p>{% endcodeblock %}</p>

<p>Standard Java stuff here, bringing in some of the necessary <code>spark</code> resources,</p>

<p>{% codeblock lang:java %}</p>

<pre><code>before(new Filter("/") {
  @Override
  public void handle(Request request, Response response) {
    boolean authenticated = request.queryParams("password").equals("secret");
    if(!authenticated){
      halt(403, "Incorrect password, hacker alert, hacker alert!!!!");
    }
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<p>Spark allows us to define filters that run before and after requests.  It is also possbile to restrict them to certain routes or simply catch all routes - for example my filter only matches the "/" route.  A couple of other things are worth mentioning here,</p>

<ol>
<li>The <code>Request</code> object gives you access to many things you would expect i.e. the query parameters.  It gives you so much more than this but I'll leave the <a href="http://www.sparkjava.com/readme.html#title2">docs</a> to describe this.</li>
<li>Just like in Sinatra it is possible to simply <code>halt</code> the request chain at any time.  Here I am halting execution unless the request conforms to my very strict and highly secure authentication scheme.</li>
</ol>


<p>{% codeblock lang:java %}</p>

<pre><code>get(new Route("/") {
  @Override
  public Object handle(Request request, Response response) {

    // extract the name from the request
    String name = request.queryParams("name");

    // set the response type
    response.type("text/html");

    // return some html
    return "" +
      "&lt;DOCTYPE html&gt;" +
      "&lt;html&gt;" +
      "  &lt;head&gt;" +
      "  &lt;/head&gt;" +
      "  &lt;body&gt;" +
      "    &lt;h1&gt;Hello " + name + ", Spark here.  Howrya?&lt;/h1&gt;" +
      "  &lt;/body&gt;" +
      "&lt;/html&gt;";
  }
});
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>Finally I am defining a route ("/") that responds to the GET verb and introspects the query parameters returning a very complex view.  Routes can also be parameterized (<code>/user/:name</code> for example). Even given the slightly verbose nature of Java syntax this example seems clean enough (albeit a rather simple example).</p>

<h2>SBT Build File</h2>

<p>For the curious among you (you got this far so you must be slightly curious... and rather odd) the SBT file required to get this bad boy running is nice and simple,</p>

<p>{% codeblock lang:scala %}
resolvers += "Spark Repository" at "http://www.sparkjava.com/nexus/content/repositories/spark/"</p>

<p>libraryDependencies ++= Seq(
  "spark" % "spark"  % "0.9.9.3-SNAPSHOT" exclude("org.apache.commons", "commons-io")
)
{% endcodeblock %}</p>

<p>A quick <code>sbt run</code> command and we are running a standalone Spark app (powered by an embedded Jetty server).  Aces.</p>

<h2>Mopping Up</h2>

<p>OK so thats the basics of the framework but then again there really isn't much other stuff besides picking a port and redirecting.  This means there is some things still missing that would really make this framework really stand out,</p>

<ul>
<li>View rendering.  Even if it is just plain HTML it would be a big leap forward (turns out an <a href="https://github.com/perwendel/spark/issues/1">issue</a> is already open too).</li>
<li>Static Content.  Would be nice to define a rule for serving static content without having to define a route or filter manually</li>
<li>Session support.  Again an <a href="https://github.com/perwendel/spark/pull/12">issue and pull request</a> is already available for this.</li>
</ul>


<p>Good work <a href="https://github.com/perwendel/">perwendel</a> keep it up :)</p>

<p>As always my code samples are available on <a href="https://github.com/kouphax/spark-tinkering">Github</a>.</p>
]]></content>
  </entry>
  
</feed>
