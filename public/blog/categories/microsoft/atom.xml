<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Microsoft | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/microsoft/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-12-28T20:10:10+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Website Workflow for Bosses]]></title>
    <link href="http://yobriefca.se/blog/2012/07/12/azure-website-workflow-for-bosses/"/>
    <updated>2012-07-12T12:23:00+01:00</updated>
    <id>http://yobriefca.se/blog/2012/07/12/azure-website-workflow-for-bosses</id>
    <content type="html"><![CDATA[<blockquote><p>So consider my indefinite hiatus suspended definitely.  I suck at quitting!  But we wont dive into the whys and wherefores  around that now.</p></blockquote>

<p>I've a confession to make, the "new" Azure, I like it.  Yeah I do, s'nice.  I like the way it blends PaaS with IaaS (though I do feel that adding 1st class node.js and PHP support is a bit of a tacked on marketing ploy).  So you dont have the "Add-On" model you get from Appharbor and Heroku but thats fine because this blending of "as a Services" gives you an alternate approach.  For a start you can just use the external services without them having to be "Add-Ons".  Sure you lose out on the nice automatic integration points for managing your services but it's not the end of the world and what happens when you want something that isn't available as an Add-On or worse not available as a cloudy SaaS thing?  Well I guess you need to go off to EC2 or similar and host your own (assuming you want to stick with the cloudy infrastructure).  But with Azure you also get another option - you want to use Mongo or some huge enterprisey platform that isn't SaaSified?  Stick it on an Azure VM.  Everything managed under one cloud provider.  Thats such a nice thing to have at your disposal.</p>

<p>But thats not the point of this post.  Most posts out there cover a workflow for Azure WebSites that make use of the portal to provision new sites (and then usually <code>git</code> to deploy) but that's weak sauce (the portal part at least - gits still aces).  No, no no - You want hyper-productivity, you want automated provisioning,  you want to be hip; node.js hip; and you want to feel like a boss hanging out on your command line while other "lesser people" click stuff with a silly little rodent.  I just read your mind, didn't I?  Well then - you got that with Azure.</p>

<h2>Setting Up</h2>

<p>First things first you need to install a few things.</p>

<h3>Installing node.js + NPM</h3>

<p><a href="http://nodejs.org/#download">Download</a></p>

<p>The tools are built and deployed in node via NPM, the node package manager so just run the one click installer and you'll be all setup.</p>

<h3>Installing Azure CLI Tools</h3>

<p>Install these via NPM so fire up your terminal/command prompt/whatever and type</p>

<pre><code>npm install azure -g
</code></pre>

<p>Then let NPM install all the dependencies and what not (the <code>-g</code> option just tells NPM to install the tools globally so they are accessible from the command line)</p>

<h3>Adding your account</h3>

<p>Next up you need to tell azure what account to use so fire this command into you command line</p>

<pre><code>azure account download
</code></pre>

<p>You'll then be taken to the Azure website and it should (assuming you're logged in already) download a <code>publishsettings</code> file.  Next up you need to import this file into your azure toolchain.</p>

<pre><code>azure account import YOUR_DOWNLOADED_FILE.publishsettings
</code></pre>

<p>After some scrolling text you'll be all set up and ready to deploy.  You'll be asked to delete the file you downloaded - probably best to do this :)</p>

<h2>Creating the app</h2>

<p>OK then lets create an app - what we create is irrelevant here so lets just create the default ASP.NET MVC website and use that as our sample app.  Remeber though, if you're a cutting edge awesome-addict to switch from .NET 4.5 to 4 or else you'll get some issues when deploying your site to Azure.</p>

<blockquote><p><strong>UPDATE</strong> : The next few steps can be condensed, thanks to the feedback from Glenn Block (@gblock),
<blockquote class="twitter-tweet" data-in-reply-to="224800579388575744"><p>@<a href="https://twitter.com/kouphax">kouphax</a> oh dude, you don't need all those steps! Do "azure site create my site --git" It will create the repo for you and add the remote!</p>&mdash; Glenn Block (@gblock) <a href="https://twitter.com/gblock/status/224855192800215040" data-datetime="2012-07-16T13:17:10+00:00">July 16, 2012</a></blockquote></p></blockquote>

<script src="http://yobriefca.se//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p>This sets up your git repo during creation of the site, adds the remote endpoint and even generates a .gitignore file (which you need to edit yourelf for .NET projects.  WIN!!!!</p>

<p>Anyway.... on with the old post.</p></blockquote>

<p>Once you've created you app and saved it then you'll want to intialise an empty repo at the root of the solution,</p>

<pre><code>git init
</code></pre>

<p>Then we need to create a site on Azure we can push to.</p>

<h2>Creating a new site</h2>

<p>Back to the command line now,</p>

<pre><code>azure site create SITE_NAME
</code></pre>

<p>If we execute this, again at the root of our solution, it will do a number of things,</p>

<ol>
<li>Validate the request (site name availability and what not)</li>
<li>Create a new site on Azure</li>
<li>Add a new git <code>remote</code> to your <code>.git\config</code> file</li>
</ol>


<h2>Pushing site</h2>

<p>As I've said the last command actually added a remote repo to our git configuration so if we do the usual gitty stuff (you'll want to, for neatness sake, set up your <code>.gitignore</code> but we can skip this for brevity),</p>

<pre><code>git add -A
git commit -m "Boring commit message"
</code></pre>

<p>Now we push,</p>

<pre><code>git push azure master
</code></pre>

<p>Done!</p>

<h2>Viewing your site</h2>

<p>You could just browse to your new site but thats just not hip enough, hell no.  Instead lets launch it from the command line...</p>

<pre><code>azure site browse
</code></pre>

<p>That will launch our new site without having to touch a silly old, out of date rodent.</p>

<h2>Wrapping up</h2>

<p>Ok so thats the basic workflow for using CLI tools to manage Azure sites.  You can do this with most of the Azure services (VMs, Certs, Cloud Services etc.) aswell.</p>

<p>So apart from making you look all hackery working in the terminal it does have other uses, specifically around the fact terminal command can be easily executed in a headless automated environment.  Think of creating new sites as part of your CI's deployment pipeline, or as part of some disaster recovery process.  The possibilities are endless... heck even write your own UI for managing sites or deploying new sites/VM/whatever!</p>

<p>So lets see -</p>

<ul>
<li>CLI hackery coolness... ✓</li>
<li>Node.js hipster bragging rights... ✓</li>
<li>Azure website created and deployed with about 6 commands... ✓</li>
</ul>


<p>Not bad for a few minutes work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8]]></title>
    <link href="http://yobriefca.se/blog/2011/09/14/windows-8/"/>
    <updated>2011-09-14T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/09/14/windows-8</id>
    <content type="html"><![CDATA[<p>Where WebForms was an attempt to bring the desktop paradigm to web development Windows 8 attempts to do the exact opposite by bringing web to the desktop. More so in fact Windows 8 appears to be effectivley deprecating the desktop idea over time. It's a bold move but trying to cater to every platform is surely a recipe for disaster but you know what I can't help but like it.</p>

<p>I'm not convinced by the Vista v2 arguments either but then I do most of my "poweruser" stuff via a command prompt and thats not going to change - when I hit the desktop I am looking for a nice experience and I feel, so far, I get that with Windows 8.</p>

<p>Being an idiot I managed to grab the ISO without VS11/Blend 5 on it so I am waiting for that one to download before sharing opinions on them (Blend 5 surely must be just like Dreamweaver but I stand to be proven wrong).  I am told, however, the first options on the New Project dialog in VS11 are JavaScript projects - I like that. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft's Trio of jQuery Plugins]]></title>
    <link href="http://yobriefca.se/blog/2010/10/16/microsoft-s-trio-of-jquery-plugins/"/>
    <updated>2010-10-16T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/16/microsoft-s-trio-of-jquery-plugins</id>
    <content type="html"><![CDATA[<p>  <p>Microsoft&rsquo;s 3 jQuery plugins have been accepted as official plugins (with templating being absorbed into the core in jQuery 1.5).&nbsp; Lets have a quick look at what they provide.</p><p>There are a ton of blog posts and documentation out there describing what these plugins do,</p><ul><li><a href="http://blog.jquery.com/2010/10/04/new-official-jquery-plugins-provide-templating-data-linking-and-globalization/">Official Post</a> </li><li><a href="http://weblogs.asp.net/scottgu/archive/2010/10/04/jquery-templates-data-link-and-globalization-accepted-as-official-jquery-plugins.aspx">Scottgu&rsquo;s Annoucement</a> </li><li><a href="http://github.com/jquery/jquery-tmpl/">Template Git Repo</a> </li><li><a href="http://github.com/jquery/jquery-tmpl/">Data Link Git Repo</a> </li><li><a href="http://github.com/jquery/jquery-global">Globalisation Git Repo</a> </li></ul><p>I am going to ignore Globalisation for now as it takes too long to put a worthwhile demo together and it&rsquo;s alreaqdy heavily explained on the GitHub page linked above.&nbsp; So lets take the other plugins and use them to create &ldquo;the best todo app evar&rdquo;</p><h2>ToDo App</h2><p>Lets take a simple to do app the you can add Tasks to (along with associated comments) then save them to the server.&nbsp; Simple design like so,</p><p>[[posterous-content:iesdxxncdohkDnbunIad]]</p><h2>HTML</h2><p>So first things first lets get the HTML out of the way,</p><script src="http://gist.github.com/629833.js?file=gistfile1.html"></script><h2>JavaScript</h2><p>Next up is the interesting part &ndash; JavaScript,</p><script src="http://gist.github.com/629836.js?file=gistfile1.js"></script><p>That&rsquo;s it.&nbsp; So lets break it down and see exactly what is happening.</p><h3>Variable Declarations</h3><script src="http://gist.github.com/629839.js?file=gistfile1.js"></script><p>First thing we do is declare a model object.&nbsp; Simply an empty object for our purposes but could be pre-populated with data that can be bound.</p><h3>Model Linking</h3><p>Model linking is effectively 2 way data binding between a data context and a form (1 way optional and configurable mappings possible see API).&nbsp;</p><script src="http://gist.github.com/629840.js?file=gistfile1.js"></script><p>We just want simple 2 way binding so that is all we need.&nbsp; This sets up the 2 form inputs so they are bound to our model object so any changes will be reflected accordingly.</p><h3>Add Functionality</h3><script src="http://gist.github.com/629841.js?file=gistfile1.js"></script><p>First things first we need to take a clone of the current object as this is bound/linked to the form and if we don&rsquo;t clone it we will be referencing the same object over and over.&nbsp; This wont affect the UI but templating has some nice data centric features to pull back our data later and we need this.</p><p>Next we create a very simple template passing the cloned model into the template call.&nbsp; Finally we append this new LI to the UL list.&nbsp;</p><h3>Save Functionality</h3><p>The interesting part of the save functionality is how we actually pull back the list of data to be sent to the server.</p><script src="http://gist.github.com/629842.js?file=gistfile1.js"></script><p>Templates are data centric.&nbsp; That is, when they are created the original data that was used to generate them is stored in the jQuery data cache and can be retrieved using tmplItem.&nbsp; So rather than having to scrape the data back from UI (<em>where are you going to get the comment value from?</em>) you can simply ask for the elements data context.</p><h2>So&hellip;</h2><p>That&rsquo;s it.&nbsp; Some very nice data centric (3rd time in as many paragraphs) plugins.&nbsp; Sure you can do this stuff without these plugins but it would certainly not be as elegant.&nbsp; This is only skimming the surface of the data linking and templating plugins, there is a heap of stuff that I didn&rsquo;t cover,</p><ul><li>One way binding</li><li>Value converters for binding</li><li>Programatically change data values</li><li>Adding custom linking behaviour</li><li>Generate templats from embedded script templates</li><li>Complex and nested templating</li><li>Statically define a reusable template</li></ul></p>
]]></content>
  </entry>
  
</feed>
