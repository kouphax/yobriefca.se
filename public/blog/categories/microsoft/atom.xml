<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Microsoft | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/microsoft/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-06-07T21:48:53+02:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows 8]]></title>
    <link href="http://yobriefca.se/blog/2011/09/14/windows-8/"/>
    <updated>2011-09-14T00:00:00+02:00</updated>
    <id>http://yobriefca.se/blog/2011/09/14/windows-8</id>
    <content type="html"><![CDATA[<p>Where WebForms was an attempt to bring the desktop paradigm to web development Windows 8 attempts to do the exact opposite by bringing web to the desktop. More so in fact Windows 8 appears to be effectivley deprecating the desktop idea over time. It's a bold move but trying to cater to every platform is surely a recipe for disaster but you know what I can't help but like it.</p>

<p>I'm not convinced by the Vista v2 arguments either but then I do most of my "poweruser" stuff via a command prompt and thats not going to change - when I hit the desktop I am looking for a nice experience and I feel, so far, I get that with Windows 8.</p>

<p>Being an idiot I managed to grab the ISO without VS11/Blend 5 on it so I am waiting for that one to download before sharing opinions on them (Blend 5 surely must be just like Dreamweaver but I stand to be proven wrong).  I am told, however, the first options on the New Project dialog in VS11 are JavaScript projects - I like that. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microsoft's Trio of jQuery Plugins]]></title>
    <link href="http://yobriefca.se/blog/2010/10/16/microsoft-s-trio-of-jquery-plugins/"/>
    <updated>2010-10-16T00:00:00+02:00</updated>
    <id>http://yobriefca.se/blog/2010/10/16/microsoft-s-trio-of-jquery-plugins</id>
    <content type="html"><![CDATA[<p>  <p>Microsoft&rsquo;s 3 jQuery plugins have been accepted as official plugins (with templating being absorbed into the core in jQuery 1.5).&nbsp; Lets have a quick look at what they provide.</p><p>There are a ton of blog posts and documentation out there describing what these plugins do,</p><ul><li><a href="http://blog.jquery.com/2010/10/04/new-official-jquery-plugins-provide-templating-data-linking-and-globalization/">Official Post</a> </li><li><a href="http://weblogs.asp.net/scottgu/archive/2010/10/04/jquery-templates-data-link-and-globalization-accepted-as-official-jquery-plugins.aspx">Scottgu&rsquo;s Annoucement</a> </li><li><a href="http://github.com/jquery/jquery-tmpl/">Template Git Repo</a> </li><li><a href="http://github.com/jquery/jquery-tmpl/">Data Link Git Repo</a> </li><li><a href="http://github.com/jquery/jquery-global">Globalisation Git Repo</a> </li></ul><p>I am going to ignore Globalisation for now as it takes too long to put a worthwhile demo together and it&rsquo;s alreaqdy heavily explained on the GitHub page linked above.&nbsp; So lets take the other plugins and use them to create &ldquo;the best todo app evar&rdquo;</p><h2>ToDo App</h2><p>Lets take a simple to do app the you can add Tasks to (along with associated comments) then save them to the server.&nbsp; Simple design like so,</p><p>[[posterous-content:iesdxxncdohkDnbunIad]]</p><h2>HTML</h2><p>So first things first lets get the HTML out of the way,</p><script src="http://gist.github.com/629833.js?file=gistfile1.html"></script><h2>JavaScript</h2><p>Next up is the interesting part &ndash; JavaScript,</p><script src="http://gist.github.com/629836.js?file=gistfile1.js"></script><p>That&rsquo;s it.&nbsp; So lets break it down and see exactly what is happening.</p><h3>Variable Declarations</h3><script src="http://gist.github.com/629839.js?file=gistfile1.js"></script><p>First thing we do is declare a model object.&nbsp; Simply an empty object for our purposes but could be pre-populated with data that can be bound.</p><h3>Model Linking</h3><p>Model linking is effectively 2 way data binding between a data context and a form (1 way optional and configurable mappings possible see API).&nbsp;</p><script src="http://gist.github.com/629840.js?file=gistfile1.js"></script><p>We just want simple 2 way binding so that is all we need.&nbsp; This sets up the 2 form inputs so they are bound to our model object so any changes will be reflected accordingly.</p><h3>Add Functionality</h3><script src="http://gist.github.com/629841.js?file=gistfile1.js"></script><p>First things first we need to take a clone of the current object as this is bound/linked to the form and if we don&rsquo;t clone it we will be referencing the same object over and over.&nbsp; This wont affect the UI but templating has some nice data centric features to pull back our data later and we need this.</p><p>Next we create a very simple template passing the cloned model into the template call.&nbsp; Finally we append this new LI to the UL list.&nbsp;</p><h3>Save Functionality</h3><p>The interesting part of the save functionality is how we actually pull back the list of data to be sent to the server.</p><script src="http://gist.github.com/629842.js?file=gistfile1.js"></script><p>Templates are data centric.&nbsp; That is, when they are created the original data that was used to generate them is stored in the jQuery data cache and can be retrieved using tmplItem.&nbsp; So rather than having to scrape the data back from UI (<em>where are you going to get the comment value from?</em>) you can simply ask for the elements data context.</p><h2>So&hellip;</h2><p>That&rsquo;s it.&nbsp; Some very nice data centric (3rd time in as many paragraphs) plugins.&nbsp; Sure you can do this stuff without these plugins but it would certainly not be as elegant.&nbsp; This is only skimming the surface of the data linking and templating plugins, there is a heap of stuff that I didn&rsquo;t cover,</p><ul><li>One way binding</li><li>Value converters for binding</li><li>Programatically change data values</li><li>Adding custom linking behaviour</li><li>Generate templats from embedded script templates</li><li>Complex and nested templating</li><li>Statically define a reusable template</li></ul></p>
]]></content>
  </entry>
  
</feed>
