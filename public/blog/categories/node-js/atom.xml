<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>node.js | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/node-js/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-11-05T08:53:00+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tinkering with minion.js]]></title>
    <link href="http://yobriefca.se/blog/2012/03/08/tinkering-with-minion-dot-js/"/>
    <updated>2012-03-08T13:13:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/03/08/tinkering-with-minion-dot-js</id>
    <content type="html"><![CDATA[<p>Yay a technical post...</p>

<p><a href="https://github.com/gigafied/minion">minion.js</a> is a micro framework providing classical inheritance strategy for JavaScript plus many other goodies.  It can be used in both browsers and <a href="http://nodejs.org">node.js</a>.<!-- more -->  Now I don't want to get caught up in any of this classical inheritance for JavaScript is an anti-pattern stuff so just take this framework for what it is - a decent way to define both client and server side models for you JavaScripts!</p>

<p>I've already said it has a host of goodies that can be useful for creating a nice flexible set of models and associated helpers.  This includes,</p>

<ul>
<li>Class and inheritance support</li>
<li>Modularity</li>
<li>A cross model pub/sub mechanism</li>
<li>Statics, Singletons, static methods and properties</li>
<li>Dependency management</li>
<li>Some other stuff I've yet to touch upon...</li>
</ul>


<p>The code will more or less speak for itself here so lets dive in (the full suite of tests and sample node.js/express implementation can be found on my <a href="https://github.com/kouphax/minion-tinkering">GitHub thingy</a>).</p>

<h2>Classes</h2>

<p>One of the first things I did was try out the whole inheritence thing.  I create a Fruit base class and provided a Strawberry implementation on top of it.</p>

<p>{% codeblock lang:javascript %}
minion.define("fruit", {
  Fruit: minion.extend("minion.Class", {</p>

<pre><code>isInSeason: function(){
  return this.inSeason;
}
</code></pre>

<p>  })
});
{% endcodeblock %}</p>

<p>{% codeblock lang:javascript %}
minion.define("fruit", {
  Strawberry: minion.extend("fruit.Fruit", {</p>

<pre><code>inSeason: true
</code></pre>

<p>  })
});
{% endcodeblock %}</p>

<p>Using the Strawberry class is pretty damn simple.  First thing you need to do is a one off simple configuration of minion,</p>

<p>{% codeblock lang:javascript %}
minion.configure({
  classPath : "js"
});
{% endcodeblock %}</p>

<p>This just tells minions dependency manager where to start looking for your class implementations.  We can then start using the Strawberry class easily using minions <code>require</code> method</p>

<p>{% codeblock lang:javascript %}
minion.require("fruit.Strawberry", function(Strawberry){
  expect(Strawberry).to.not.be(null);
});
{% endcodeblock %}</p>

<h2>Static Objects</h2>

<p>Static objects are pre-initialised Singletons in minion.js and that makes a lot of sense.  I created a Grocer static by simply extending another minion type <code>Static</code>.</p>

<p>{% codeblock lang:javascript %}
minion.define("fruit", {
  Grocer: minion.extend("minion.Static", {</p>

<pre><code>init: function(){
  this.stock = 0;
  this.subscribe("purchase", this.buy);
},

sell: function(){
  this.stock--
},

buy: function(){
  this.stock++
},

checkLevels: function(){
  return this.stock;
}
</code></pre>

<p>  })
});
{% endcodeblock %}</p>

<p>Pretty unsuprising but minion will new up a shared instance of this class the first time it is called.  You'll see a little hint of the pub/sub mechanism in the <code>init</code> method as well so lets jump on that.</p>

<h2>Pub/Sub</h2>

<p>So minion has a nice little pub/sub mechanism built right into the classes as well.  So lets say a customer buys stuff from the grocer by publishing his/her request - sure beats just taking it without asking!!!</p>

<p>{% codeblock lang:javascript %}
minion.define("fruit", {
  Customer: minion.extend("minion.Class", {</p>

<pre><code>buy: function(){
  this.publish("purchase")
}
</code></pre>

<p>  })
});
{% endcodeblock %}</p>

<p>Minion once again handles all the internal wiring up of this stuff and it just works.  Nice.</p>

<h2>The Rest</h2>

<p>There is more to minion.js, I've just given you a very high level view but you should dive a bit deeper by looking at the <a href="https://github.com/gigafied/minion/blob/master/docs/getting_started.md">official docs</a>.  There is a few bits of handy sugar sprinkled on the minion types (proxy, scoped setTimeout and setInterval).  The pub/sub also goes a bit further provinding <code>Notifications</code> that allow a sort of async callback/response mechanism which can be handy.</p>

<p>Now I've never been a fan of these sorts of Class frameworks - I've never really seen the need but I must admit minion appeared at about the right time.  I've been playing with a nice way of structuring <a href="mongoosejs.com">mongoose</a> Schemas/Classes and I think minion here might be a nice fit.</p>

<p>Anyway check it out.  Yay a technical blog with more to come!</p>

<p><a href="https://github.com/gigafied/minion">minion.js</a></p>

<p><a href="https://github.com/kouphax/minion-tinkering">Sample Code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Lightning Talk]]></title>
    <link href="http://yobriefca.se/blog/2011/03/10/node-js-lightning-talk/"/>
    <updated>2011-03-10T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/03/10/node-js-lightning-talk</id>
    <content type="html"><![CDATA[<p>  <p><p>So I held a lightning talk on <a href="http://nodejs.org/">node.js</a> the  other day.  A lightning talk is essentially a short (15 minute) talk about a  subject with a bit of discussion at the end of it.  There was a slight technical  hitch in that I forgot to record the session but I have made up for it by  sitting alone in a quiet room early this morning a re-recorded the session &ndash;  minus the actual discussion bit.</p><p>Obviously it&rsquo;s not as good as the original talk but thought it might be worth  putting out there anyway as it&rsquo;s better than the slides alone.  So here it is &ndash;  a very high level view of node.js.</p><h2>Video</h2><iframe src="http://player.vimeo.com/video/20868544?portrait=0" frameborder="0" height="283" width="500"></iframe><h2>Slides</h2><p><object height="417" width="500"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=node-lightning-talk-110310015300-phpapp02&stripped_title=nodejs-lightning-talk"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=node-lightning-talk-110310015300-phpapp02&stripped_title=nodejs-lightning-talk" allowfullscreen="true" type="application/x-shockwave-flash" allowscriptaccess="always" height="417" width="500"></object></p></p></p>
]]></content>
  </entry>
  
</feed>
