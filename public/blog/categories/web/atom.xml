<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Web | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-11-05T08:53:00+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tinkering with Spark: A Micro Web Framework for Java]]></title>
    <link href="http://yobriefca.se/blog/2012/03/20/tinkering-with-spark-a-micro-web-framework-for-java/"/>
    <updated>2012-03-20T21:37:00+00:00</updated>
    <id>http://yobriefca.se/blog/2012/03/20/tinkering-with-spark-a-micro-web-framework-for-java</id>
    <content type="html"><![CDATA[<div style="text-align:center;margin-bottom:20px;">
<img src="http://yobriefca.se/images/blog/spark_logo_blue.png" style="border:none; box-shadow:none; -webkit-box-shadow:none;" />
</div>


<p>You can't call yourself a language these days without having your own <a href="http://sinatrarb.com">Sinatra</a> clone.  Not even, it seems, if you are Java.  I know - it sounds odd that Java, the language that turns XML into stacktraces, has a micro web framework of it's own - <a href="http://sparkjava.com">Spark</a>.  I'm well aware as of JRE 1.6 has a built in <code>HttpServer</code> class but there is such as thing as <strong>too close</strong> to the metal :)  Also Sparks logo is fairly epic.</p>

<p><a href="http://sparkjava.com">Spark</a>'s site has a great little piece about the "why" and that is what stuck with me.  Especially this bit,</p>

<blockquote><p>Its intention is to be used by Java developers that want or are required to develop in pure Java.</p></blockquote>

<p>I know a few people who are "required" to develop in pure Java and anything that might make their lives easier would be welcomed.  Being completely out of loop with Java since before Maven made an appearance I had a lot of catching up to do just to get the project running.  In fact I went with SBT as it made things a lot easier for me and my mavenless brain.  I did have to tinker with the dependencies in the <code>ivy2</code> directory due to a <a href="https://github.com/perwendel/spark/pull/15">known issue</a> but if I can do it anyone interested in this can to - if not give me a shout.</p>

<h2>App.java</h2>

<p>A Spark app simply uses <code>main</code> as an entry point.  Within the method you can call certain methods to set up routes and filters and whatnots that your app will respond to.  For example</p>

<p>{% codeblock lang:java %}
import static spark.Spark.<em>;
import spark.</em>;
import java.io.*;</p>

<p>public class App {</p>

<p>  public static void main(String[] args)  {</p>

<p>{% endcodeblock %}</p>

<p>Standard Java stuff here, bringing in some of the necessary <code>spark</code> resources,</p>

<p>{% codeblock lang:java %}</p>

<pre><code>before(new Filter("/") {
  @Override
  public void handle(Request request, Response response) {
    boolean authenticated = request.queryParams("password").equals("secret");
    if(!authenticated){
      halt(403, "Incorrect password, hacker alert, hacker alert!!!!");
    }
  }
});
</code></pre>

<p>{% endcodeblock %}</p>

<p>Spark allows us to define filters that run before and after requests.  It is also possbile to restrict them to certain routes or simply catch all routes - for example my filter only matches the "/" route.  A couple of other things are worth mentioning here,</p>

<ol>
<li>The <code>Request</code> object gives you access to many things you would expect i.e. the query parameters.  It gives you so much more than this but I'll leave the <a href="http://www.sparkjava.com/readme.html#title2">docs</a> to describe this.</li>
<li>Just like in Sinatra it is possible to simply <code>halt</code> the request chain at any time.  Here I am halting execution unless the request conforms to my very strict and highly secure authentication scheme.</li>
</ol>


<p>{% codeblock lang:java %}</p>

<pre><code>get(new Route("/") {
  @Override
  public Object handle(Request request, Response response) {

    // extract the name from the request
    String name = request.queryParams("name");

    // set the response type
    response.type("text/html");

    // return some html
    return "" +
      "&lt;DOCTYPE html&gt;" +
      "&lt;html&gt;" +
      "  &lt;head&gt;" +
      "  &lt;/head&gt;" +
      "  &lt;body&gt;" +
      "    &lt;h1&gt;Hello " + name + ", Spark here.  Howrya?&lt;/h1&gt;" +
      "  &lt;/body&gt;" +
      "&lt;/html&gt;";
  }
});
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>Finally I am defining a route ("/") that responds to the GET verb and introspects the query parameters returning a very complex view.  Routes can also be parameterized (<code>/user/:name</code> for example). Even given the slightly verbose nature of Java syntax this example seems clean enough (albeit a rather simple example).</p>

<h2>SBT Build File</h2>

<p>For the curious among you (you got this far so you must be slightly curious... and rather odd) the SBT file required to get this bad boy running is nice and simple,</p>

<p>{% codeblock lang:scala %}
resolvers += "Spark Repository" at "http://www.sparkjava.com/nexus/content/repositories/spark/"</p>

<p>libraryDependencies ++= Seq(
  "spark" % "spark"  % "0.9.9.3-SNAPSHOT" exclude("org.apache.commons", "commons-io")
)
{% endcodeblock %}</p>

<p>A quick <code>sbt run</code> command and we are running a standalone Spark app (powered by an embedded Jetty server).  Aces.</p>

<h2>Mopping Up</h2>

<p>OK so thats the basics of the framework but then again there really isn't much other stuff besides picking a port and redirecting.  This means there is some things still missing that would really make this framework really stand out,</p>

<ul>
<li>View rendering.  Even if it is just plain HTML it would be a big leap forward (turns out an <a href="https://github.com/perwendel/spark/issues/1">issue</a> is already open too).</li>
<li>Static Content.  Would be nice to define a rule for serving static content without having to define a route or filter manually</li>
<li>Session support.  Again an <a href="https://github.com/perwendel/spark/pull/12">issue and pull request</a> is already available for this.</li>
</ul>


<p>Good work <a href="https://github.com/perwendel/">perwendel</a> keep it up :)</p>

<p>As always my code samples are available on <a href="https://github.com/kouphax/spark-tinkering">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Nancy Module that Behaves like a Rails Controller... Mother of God]]></title>
    <link href="http://yobriefca.se/blog/2011/12/30/a-nancy-module-taht-behaves-like-a-rails-controller/"/>
    <updated>2011-12-30T20:46:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/12/30/a-nancy-module-taht-behaves-like-a-rails-controller</id>
    <content type="html"><![CDATA[<p>If <a href="http://nancyfx.org">Nancy</a> is inspired by Sinatra I thought I'd have a little fun a create an abstract class that created modules that kind of mimic the behaviour of Rails controllers.  Code first, ask questions later...</p>

<!-- more -->


<p>{% codeblock lang:csharp %}
public abstract class RailslikeControllerFor<TEntity> : NancyModule where TEntity : class
{</p>

<pre><code>public RailslikeControllerFor() : base("/" + typeof(TEntity).Name + "s")
{
    Get[@"/"] = Index;
    Get[@"/new"] = New;
    Post[@"/"] = Create;
    Get[@"/(?&lt;id&gt;[\d])"] = Show;
    Get[@"/(?&lt;id&gt;[\d])/edit"] = Edit;
    Put[@"/(?&lt;id&gt;[\d])"] = Update;
    Delete[@"/(?&lt;id&gt;[\d])"] = Destroy;
}

protected virtual Nancy.Response Index(dynamic context) { return 404; }
protected virtual Nancy.Response New(dynamic context) { return 404; }
protected virtual Nancy.Response Create(dynamic context) { return 404; }
protected virtual Nancy.Response Show(dynamic context) { return 404; }
protected virtual Nancy.Response Edit(dynamic context) { return 404; }
protected virtual Nancy.Response Update(dynamic context) { return 404; }
protected virtual Nancy.Response Destroy(dynamic context) { return 404; }

protected Nancy.Response AsView(object model = null)
{
    string method = new StackTrace().GetFrame(1).GetMethod().Name;
    string entity = typeof(TEntity).Name;

    return View[string.Format("{0}/{1}", entity, method), model];
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>To use it you just subclass the class and override the necessary methods.  Like so.</p>

<p>{% codeblock lang:csharp %}
public class QuestionModule : RailslikeControllerFor<Question>
{</p>

<pre><code>IQuestionsRepository questions;

public QuestionModule(IQuestionsRepository questions)
    : base() { this.questions = questions; }

protected override Response Index(dynamic context)
{
    return AsView(questions.GetAll());
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>What the base class does is create the necessary CRUDdy urls with a base route starting with the name of the entity you pass in, pluralised in the easiest way possible.  In this case <code>/questions</code>.  The rules match what you wold get for a controller in Rails.</p>

<table style="width:100%" border="1">
    <tbody>
        <tr style="background-color: #666;color:#fff;">
            <th style="padding:4px;font-weight:bold;">Verb </th>
            <th style="padding:4px;font-weight:bold;">Path</th>
            <th style="padding:4px;font-weight:bold;">Action </th>
            <th style="padding:4px;font-weight:bold;"></th>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions           </td>
            <td style="padding:4px;">index    </td>
            <td style="padding:4px;">display a list of all questions</td>
        </tr>
        <tr style="background-color: #fff;">
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions/new       </td>
            <td style="padding:4px;">new      </td>
            <td style="padding:4px;">return an <span class="caps">HTML</span> form for creating a new question</td>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">POST</span>    </td>
            <td style="padding:4px;">/questions           </td>
            <td style="padding:4px;">create   </td>
            <td style="padding:4px;">create a new question</td>
        </tr>
        <tr style="background-color: #fff;">
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions/:id       </td>
            <td style="padding:4px;">show     </td>
            <td style="padding:4px;">display a specific question</td>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">GET</span>     </td>
            <td style="padding:4px;">/questions/:id/edit  </td>
            <td style="padding:4px;">edit     </td>
            <td style="padding:4px;">return an <span class="caps">HTML</span> form for editing a question</td>
        </tr>
        <tr style="background-color: #fff;">
            <td style="padding:4px;"><span class="caps">PUT</span>     </td>
            <td style="padding:4px;">/questions/:id       </td>
            <td style="padding:4px;">update   </td>
            <td style="padding:4px;">update a specific question</td>
        </tr>
        <tr>
            <td style="padding:4px;"><span class="caps">DELETE</span>  </td>
            <td style="padding:4px;">/questions/:id       </td>
            <td style="padding:4px;">destroy  </td>
            <td style="padding:4px;">delete a specific question</td>
        </tr>
    </tbody>
</table>


<br/>


<p>There is a teeny-tiny bit of sugar in the <code>AsView</code> method that will look up the corresponding view.  So the module above would resolve its <code>Index</code> method to <code>questions/index</code> and the view engine would find the correct file (eg. for Razor - <code>questions/index.cshtml</code>).</p>

<p>I've already said it's a bit of fun but I have actually used this at least once - there is probably more that could be added but it'll do for a first spike at least.  Any use to anyone?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nancy JSONP Hook]]></title>
    <link href="http://yobriefca.se/blog/2011/11/01/nancy-jsonp-hook/"/>
    <updated>2011-11-01T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2011/11/01/nancy-jsonp-hook</id>
    <content type="html"><![CDATA[<blockquote><p>3 Nov 2011: As of Nancy v0.9 this is part of the core (same logic applies)</p></blockquote>

<p>I needed to write a simple JSONP capable service recently and decided to run with <a href="http://nancyfx.org">Nancy</a>.  Turns out Nancy doesn't give us a way to do JSONP so I set about creating something that fitted my use case.  The fruits of my very very short labour (thanks to the super-hyper-flexible-powerfulness of the Nancy Pipeline) can be seen here.  The full source is available in the <a href="https://github.com/kouphax/nancy-jsonp">Github repo</a> and hopefully we can get this pushed into the core of Nancy shortly (or at least part of the official repo one way or another) - just for the geek cred of course :)</p>

<!--more-->


<h2>Implementation Rundown</h2>

<p>I took the same approach as the existing hooks (using the SassAndCoffee one as my implementation pattern) so created a static <code>Hooks</code> class with an <code>Enable</code> method that simply adds a new item to the end of the pipeline</p>

<p>{% codeblock lang:csharp %}
/// <summary>
/// Enable JSONP support in the application
/// </summary>
/// <param name="pipeline">Application Pipeline to Hook into</param>
public static void Enable(IApplicationPipelines pipeline)
{</p>

<pre><code>pipeline.AfterRequest.AddItemToEndOfPipeline(PrepareJsonp);
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The meat of the work lies in the <code>PrepareJsonp</code> method</p>

<p>{% codeblock lang:csharp %}
/// <summary>
/// Transmogrify original response and apply JSONP Padding
/// </summary>
/// <param name="context">Current Nancy Context</param>
private static void PrepareJsonp(NancyContext context)
{</p>

<pre><code>bool isJson = context.Response.ContentType == "application/json";
bool hasCallback = context.Request.Query["callback"].HasValue;

if (isJson &amp;&amp; hasCallback)
{
    // grab original contents for running later
    Action&lt;Stream&gt; original = context.Response.Contents;
    string callback = context.Request.Query["callback"].Value;

    // set content type to application/javascript so browsers can handle it by default
    // http://stackoverflow.com/questions/111302/best-content-type-to-serve-jsonp
    context.Response.ContentType = "application/javascript";
    context.Response.Contents = stream =&gt;
    {
        // disposing of stream is handled elsewhere
        StreamWriter writer = new StreamWriter(stream)
        {
            AutoFlush = true
        };

        writer.Write("{0}(", callback);
        original(stream);
        writer.Write(");");
    };
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Let me highlight a few of the key areas here.</p>

<h3>Determine if Response need JSONP Padded</h3>

<p>I decided to take a basic approach to determining if the request should return a JSONP response,</p>

<ul>
<li>If the content type of the current response is <code>application/json</code></li>
<li>If there is a query string parameter called <code>callback</code></li>
</ul>


<p>Here is what we need to satisfy that,</p>

<p>{% codeblock lang:csharp %}
bool isJson = context.Response.ContentType == "application/json";
bool hasCallback = context.Request.Query["callback"].HasValue;</p>

<p>if (isJson &amp;&amp; hasCallback)
{
{% endcodeblock %}</p>

<p>I am sure this could be refined and open to suggestion (perhaps more applicable content types or extra possible configuration for the callback parameter).  I wonder if it is a bit safer to restrict requests that are GET requests seeing as that is the only way to do JSONP? Hmmmm.</p>

<p>Next thing I set the content type to <code>application/javascript</code> as that makes perfect sense</p>

<p>{% codeblock lang:csharp %}
context.Response.ContentType = "application/javascript";
{% endcodeblock %}</p>

<p>Finally I wrap the original responses content in the JSONP "padding" (the callback function) and write everything out.</p>

<p>{% codeblock lang:csharp %}
context.Response.Contents = stream =>
{</p>

<pre><code>// disposing of stream is handled elsewhere
StreamWriter writer = new StreamWriter(stream)
{
    AutoFlush = true
};

writer.Write("{0}(", callback);
original(stream);
writer.Write(");");
</code></pre>

<p>};
{% endcodeblock %}</p>

<p>So all in all very simple but damn I'm proud that I got off my arse and contributed to such a stellar community. hopefully someone finds this useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tinyweb Fluent Security]]></title>
    <link href="http://yobriefca.se/blog/2011/09/26/tinyweb-fluentsecurity/"/>
    <updated>2011-09-26T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/09/26/tinyweb-fluentsecurity</id>
    <content type="html"><![CDATA[<p>I've been working on a little project recently that is using Tinyweb.  It's a typical little CRUDdy app and makes use of typical security features in a web app.  Tinyweb itself doesn't provide any sort of custom security features out of the box but as it sits on top of ASP.NET you can avail of all the normal membership stuff.  Problem is though - the default membership stuff, when working directly with it, is a bit cumbersome.  I recently tinkered with a project for ASP.NET MVC called <a href="http://www.fluentsecurity.net/">FluentSecurity</a> that added a fluent syntax to configuring security for ASP.NET MVC applications.  Taking a healthy dose of inspiration from this project I rolled a lightweight Tinyweb version of my own.  I figure this might be useful to someone else so I have now created a new project specifically for this.  It's probably totally broken in areas but the areas I've written tests around appear to work.</p>

<p>The source is available in a <a href="https://bitbucket.org/kouphax/tinyweb-fluentsecurity">BitBucket repository</a> so feel free to critique.  Once I get it tested better, documents written up and generally applied a bit of sipt and polish I'll push it to Nuget and the fun can really begin.</p>

<h1>Tinyweb.FluentSecurity</h1>

<p>FluentSecurity comes as a 2 part solution</p>

<ol>
<li>The <code>Security</code> class is the main entry point for configuring FluentSecurity and authenticating users</li>
<li>The <code>SecurityFilter</code> class is a Tinyweb filter that performs auth tests on the current request</li>
</ol>


<h2>Security</h2>

<p>The <code>Security</code> class provides a central location to configure FluentSecurity.  <code>Security</code> is also responsible for executing the auth tests you pass to it.</p>

<h3>Security.Configure(Action<Configurator> configurator)</h3>

<p><code>Configure</code> lets you define the configuration for you module.  It accepts an Action that can be used to define rules for each handler.  For example</p>

<pre><code>Security.Configure(c =&gt;
{
    c.For&lt;RootHandler&gt;().DenyAnonymousAccess();
    c.For&lt;AdminHandler&gt;().RequireRoles("Admin");
    c.For&lt;UserHandler&gt;().DenyRoles("Admin");
    c.For&lt;SecretHandler&gt;().AllowVerbs(Security.AllowedVerbs.GET | Security.AllowedVerbs.POST);
});

Tinyweb.Init();
</code></pre>

<p>We call <code>Security.Configure</code> just before we Init Tinyweb (though it can be done at anytime realistically speaking).  The configuration block shows off most of the ways you can configure handlers e.g.</p>

<ol>
<li><code>DenyAnonymousAccess</code> will prevent, as the name suggests, all anonymous users from accessing this handler</li>
<li><code>RequireRoles</code> specifes 1..N roles that are required to access this handler</li>
<li><code>DenyRoles</code> specifies 1..N roles that aren't permitted to access this handler</li>
<li><code>AllowVerbs</code> restricts the HTTP Verbs that can be used to access this handler (PUT, POST, GET etc.)</li>
<li><code>WithCustomRule</code> (not listed) allows you to specify a function that can be used to apply a custom rule to each request</li>
</ol>


<p>Each method returns the configuration object so it is possible to chain the calls to create more complex rules.</p>

<pre><code>Security.Configure(c =&gt;
    c.For&lt;EditHandler&gt;()
        .DenyAnonymousAccess()
        .RequireRoles("Author")
        .DenyRoles("Reader")
        .AllowVerbs(Security.AllowedVerbs.POST);
</code></pre>

<p>Obviously some combinations will not make sense, in fact AllowedVerbs needs to be tweaked as it may only apply to certain roles (so the combinations don't make sense right now).  Currently FluentSecurity doesn't care and it probably never will if you try and create illogical combinations.</p>

<h3>bool Security.Test(RequestContext req, HandlerData d)</h3>

<p>This will run all pre-configured rules against the current request to determine if the request is authorised to continue.  It will return a true/false result depengin on whether the rules pass or not.</p>

<pre><code>bool granted = Security.Test(context, data);
</code></pre>

<h3>IResult Security.Validate(RequestContext req, HandlerData d)</h3>

<p>Implements the typical SecurityFilter use case.  This function will call the <code>Test</code> method and returns <code>Result.None()</code> if the test passes (may be configurable in the future) otherwise it executes the <code>Security.OnAccessDenied</code> function and returns the <code>IResult</code>.  If no <code>OnAccessDenied</code> is defined <code>Result.None()</code> will be returned.</p>

<pre><code>IResult result = Security.Validate(context, data);
</code></pre>

<p>This is simply shorthand for now but may be expanded with some custom logic in the near future.</p>

<h3>Security.OnAccessDenied</h3>

<p>This property is used to define a function that can be used to return a result should access been denied.  This is done lazily as it allows you access to the <code>RequestContext</code> and <code>HandlerData</code> so you could implement per-request handling of the Result (redirects or return URLs etc.)</p>

<pre><code>Security.OnAccessDenied = (c, d) =&gt; Result.Redirect&lt;AccessDeniedHandler&gt;();
</code></pre>

<h2>SecurityFilter</h2>

<p>The <code>SecurityFilter</code> class is simply a Tinyweb filter that performs the request validation for authentication.  Nothing special here move along now.</p>

<h1>For Now and Up Next</h1>

<p>So thats all there is for now.  Code is, as I've said, available at the <a href="https://bitbucket.org/kouphax/tinyweb-fluentsecurity">BitBucket repository</a>.  I'm starting to build up some docs and stuff now and maybe tweak and add useful features.  If there is anything you would like to see raise it as an <a href="https://bitbucket.org/kouphax/tinyweb-fluentsecurity/issues?status=new&amp;status=open">issue</a> and I'll get around to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackathon #2: Mobile]]></title>
    <link href="http://yobriefca.se/blog/2011/09/15/hackathon-2-mobile/"/>
    <updated>2011-09-15T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/09/15/hackathon-2-mobile</id>
    <content type="html"><![CDATA[<p>So as I've already said in a <a href="/blog/2011/08/29/hackathon-retorspective/">previous post</a> our first hackathon was well recieved.  So why not, we thought, do another one?  And indeed why not?</p>

<p>This time we are changing things up.  Rather than everyone coming together to bang out a solution we are going to have small teams working on the same project on different mobile platforms.  With musical chairs.  Yeah you heard right right.  Musical Chairs.  Kind of.</p>

<p>Heres the deal</p>

<ul>
<li>A number of stations are set up in a room.</li>
<li>Each station is set up to host a particular development platform (iOS Native, Android Native, PhoneGap, Web, Windows Phone 7 etc.).</li>
<li>Each station will have 2 x Developers assigned to them for pairing and 1 X Technology Expert that will act as an advisory role for that stations technology platform</li>
<li>There will be 1 product owner and 1 idea.</li>
<li>Each station will produce the solution in the best way possible for that platform</li>
</ul>


<p>Now here's the catch.</p>

<ul>
<li>Development will be done in sprints lasting 1 hour.  At the end of the sprint the 2 devs at each station get up and move to the next station giving a 5 minute handover to the next team.  This keeps happneing until the Hackathon (24hrs this time) is over.</li>
</ul>


<p>Thats the musical chairs bit.  But why?  Well this allows people to get some exposure to each platform, see the relevant pain points and above all else learn to work as a team rather than being a bunch of selfish pricks (#joke).  Sure the first full cycle will probably be painful for most people but like women who live in the same house - after the first cycle everyone should be roughly in sync (#jokeagain).</p>

<p>It's a grand idea but it's easily broken.  We need to prevent that happening.  Here's how I think we can do that.</p>

<ul>
<li><strong>People</strong>.  People are key to this one.  More specifically numbers.  We need 3 people per station and 1 product owner.  If people drop out we have to start cutting stations, if numbers aren't right some teams will be too big/small and that wont work.  We got 12 people last time which dropped to about 6 after 24 hours because some people just couldn't hack the pace.  this time people need to commit and stay commited or we fail and that would suck!</li>
<li><strong>Planning</strong>.  Everything needs to be ready for this one.  It's got a mobile focus and that should remain the focus.  This means all the backend services need to be available and working upfront.  This means user stories need to be defined beforehand and even a few broken down into tasks so devs can get cracking immediatley while the rest are fleshed out.  This means stations needs to be up and running with everything installed and working.  So lots to do.</li>
<li><strong>Server/Services</strong>.  As I've said these need to be in place and rather than roll our own we are looking at the potentially awesome <a href="https://www.parse.com/">Parse</a> as it will have everything we need for all platforms thanks to the minimum of a RESTful API.  Still under review but it's looking good so far</li>
<li><strong>Idea</strong>.  We need an idea that is sufficiently small but also feature rich enough to make the implementations different (device integration etc.).  We have some but we need to narrow this down to something that would be beneficial.</li>
<li><strong>Infrastructure</strong>.  All the infrastructure needs to be in place.  All dev software installed, source control ready, <a href="http://agilezen.com/">AgileZen</a> subscriptions bought, test devices ready blah blah blah</li>
</ul>


<p>I'm sure there's more - I mean it's early days.</p>

<p>So that is where we are right now, lots to think about and lots to do.  We are aiming for a November/December slot if we can get the people and a weekend they are all free.  Excited++.</p>
]]></content>
  </entry>
  
</feed>
