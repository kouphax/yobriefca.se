<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>Micro Web Frameworks in .NET 101 Series | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/micro-web-frameworks-in-net-101-series/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-03-19T13:41:13+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Micro Web Frameworks in .NET 101: Tinyweb]]></title>
    <link href="http://yobriefca.se/blog/2011/07/18/micro-web-frameworks-101-tinyweb/"/>
    <updated>2011-07-18T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/07/18/micro-web-frameworks-101-tinyweb</id>
    <content type="html"><![CDATA[<p>  <blockquote class="announce">This post is the is part of series of posts covering the various <em>micro web frameworks</em> in the .<span class="caps">NET</span> world.  The frameworks I intend to cover will be linked as the series progresses.  For further discussion on the use of micro web framework in .<span class="caps">NET</span> please see my <a href="http://yobriefca.se/blog/2011/05/18/why-use-micro-web-frameworks-in-net/">previous post</a> The current series line up:<ul>    <li><a href="http://yobriefca.se/blog/2011/05/19/micro-web-frameworks-101-jessica/">Jessica</a></li>    <li><a href="http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy/">Nancy</a></li>    <li><a href="http://yobriefca.se/blog/2011/06/22/micro-web-frameworks-101-anna/">Anna</a></li>  <li><a href="http://yobriefca.se/blog/2011/07/18/micro-web-frameworks-101-tinyweb//">Tinyweb</a><br></li></ul></blockquote><p>Tinyweb takes a slightly different view than the other web frameworks I have talked about.  In fact it takes a fairly opinionated approach to the way your structure your applications code and forces you to think in terms of resource endpoints rather then big monolithic modules or controllers.  It&#8217;s certainly true that projects based on the other frameworks such as Nancy and Jessica can be architected in such a way but Tinyweb ensures that you don&#8217;t start cutting corners and making allowances for lazy code by simply not providing the ability to do it!</p><h2>Getting Started &#8211; Hello World</h2><p>Lets get Tinyweb first from good old reliable Nuget,</p><script src='https://gist.github.com/1101809.js?file=Install.ps1'></script><noscript><pre><code>Install-Package Tinyweb</code></pre></noscript> <p>With Tinyweb installed we can go ahead and create a <code>RootHandler</code> this name is the one exception to the Tinyweb handler naming convention which I&#8217;ll touch on in a minute.</p><script src='https://gist.github.com/1101814.js?file=RootHandler.cs'></script><noscript><pre><code>public class RootHandler{    public IResult Get()    {        return Result.String("Hello World");    }}</code></pre></noscript><p>In our handler I also defined the a <code>Get</code> method which returns an IResult this will act as our endpoint.  One last thing before we magic up a web page is to initialise Tinyweb via our <code>Global.asax.cs</code> so Tinyweb can do its bootstrapping discovery voodoo stuffs.</p><script src='https://gist.github.com/1101802.js?file=Global.asax.cs'></script><noscript><pre><code>public class Global : HttpApplication{    protected void Application_Start(object sender, EventArgs e)    {        Tinyweb.Init();    }}</code></pre></noscript> <p>Et voila! Run the app and once again we have a hello world.</p><h2>Tinyweb Features</h2><p>Even in that small Hello World example there are plenty of Tinyweb features but you&#8217;ll also notice that Tinyweb really doesn&#8217;t get in the way at all.</p><h3>Handlers</h3><p>Each Tinyweb Handler represents a single resource endpoint.  With the exception of <code>RootHandler</code> the <span class="caps">URL</span> endpoint for each handler is inferred from the name of the handler.  For example a handler named <code>HelloHandler</code> will react to <code>/hello</code>, <code>HelloWorldHandler</code> will react to <code>/hello/world</code>.  You can see from these examples that casing of the handler name is important in terms of the url endpoint generation.</p><p>The next thing about handlers is that they respond to 4 methods each one corresponding to the 4 main Http Verbs &#8211; <code>Get()</code>, <code>Post()</code>, <code>Put()</code> and <code>Delete</code> &#8211; the only requirement of these is that they return an <code>IResult</code></p><h3>Model Binding and Arguments</h3><p>Model binding is also provided by handlers actions &#8211; just pass in an object and Tinyweb will do it&#8217;s best to bind request values to this object (accepts primitives, collections and plain C# objects).</p><p>Alternatively if you want to do some work under the hood you can make sure the <code>RequestContext</code> is passed in by simply passing it instead.  This gives you access to the bowels of the request to do with what you please.</p><h3>Advanced Routes</h3><p>It&#8217;s also possible to override the default routing convention by declaring a handler level variable called <code>route</code> of type <code>Route</code>.  This example shows how we can override handlers default route <code>/hello/world</code> and go with the more understandable &#8220;/helloworld&#8221;.</p><script src='https://gist.github.com/1102490.js?file=HelloWorldHandler.cs'></script><noscript><pre><code>public class HelloWorldHandler{    Route route = new Route("helloworld");    public IResult Get()    {        return Result.String("Hello World");    }}</code></pre></noscript><h3>Route Parameters</h3><p>In the spirit of RESTFulness you may also want to accept parameters as part of your <span class="caps">URL</span> and we can do that as well with this <code>route</code> class as well as optionally suppling default values for parameters,</p><script src='https://gist.github.com/1102494.js?file=HelloWorldHandler.cs'></script><noscript><pre><code>public class HelloWorldHandler{    Route route = new Route("hello/{name}");    // OR WITH A DEFAULT VALUE FOR PARAMS    Route route = new Route("hello/{name}", new { name = "World" });    public IResult Get(string name)    {        return Result.String("Hello " + name);    }}</code></pre></noscript><p>A powerful little approach.</p><h3>Results</h3><p>All Tinyweb results (e.g. what the response returns) implement the <code>IResult</code> interface so it&#8217;s simple enough to implement your own custom result type though it is probably unnecessary for the most part as Tinyweb offers a range of result types straight away via the <code>Result</code> classes static methods.</p><ul> <li>String</li> <li>File</li>   <li>Json</li>   <li><span class="caps">XML</span></li>  <li>JsonOrXml (returns either Json or <span class="caps">XML</span> depending on the request headers)</li>  <li>Html</li>   <li>Redirect (to a specific handler or <span class="caps">URL</span>)</li></ul><p>Tinyweb also offers a <code>View</code> class that can render views written with Spark and Razor so rendering a view can be as simple as</p><script src='https://gist.github.com/1102510.js?file=HelloWorldHandler.cs'></script><noscript><pre><code>public class HelloWorldHandler{    Route route = new Route("hello/{name}", new { name = "World" });    public IResult Get(string name)    {        return View.Razor&lt;string&gt;(name, "hello.cshtml");    }}</code></pre></noscript><h3>Filters</h3><p>Filters allow us to intercept requests both before and after they are processed on both a per handler and global level.</p><p>Each handler can optionally contain an <code>After</code> and/or a <code>Before</code> method that will, not surprisingly, be called after and before each handler request (I&#8217;ll let you guess which one does which) e.g.</p><script src='https://gist.github.com/1102652.js?file=RootHandler.cs'></script><noscript><pre><code>public class RootHandler{    public void Before()    {        Logger.Log("Before Executed");    }    public IResult Get()    {        return Result.String("Hello World");    }    public void After()    {        Logger.Log("After Executed");    }}</code></pre></noscript><p>Alternatively if you want the same before or after filter applied across all handlers you can create a Filter class by creating a class appended with the word <code>Filter</code>.  We can recreate the same handler above with a global filter for logging,</p><script src='https://gist.github.com/1102658.js?file=Filter.cs'></script><noscript><pre><code>public class LoggingFilter{    public void Before()    {        Logger.Log("Before Executed");    }    public void After()    {        Logger.Log("After Executed");    }}public class RootHandler{    public IResult Get()    {        return Result.String("Hello World");    }}</code></pre></noscript><p><code>Before</code> and <code>After</code> methods can also return <code>IResult</code> objects if you want to work with the actual response.</p><h3>Error Handling and Debugging</h3><p>Not all of us write flawless code and so sometimes things go south and exceptions start throwing their weight around.  Tinyweb has a global hook that is useful for capturing such errors as they bubble up to the surface.  The TinyWeb class has a static property <code>OnError</code> that accepts an Action that can be used to handle the exception e.g.</p><script src='https://gist.github.com/1102667.js?file=Global.asax.cs'></script><noscript><pre><code>protected void Application_Start(object sender, EventArgs e){    Tinyweb.Init();    Tinyweb.OnError = (exception, context, data) =&gt;    {        Logger.Log(exception);    };}</code></pre></noscript><p>Another useful tool when debugging your app is the <code>Tinyweb.WhatHaveIGot()</code>.  It&#8217;s a convenience method that can be used to print out all the matched routes and filters.</p><h2>Conclusion</h2><p>On the surface the focus of Tinyweb may seem only moderately different from other frameworks but after playing with it for a while it become apparent that the opinionated approach really makes you think about your projects structure and <span class="caps">API</span>.  I&#8217;m certainly of the opinion that this is a damn good thing<sup class="footnote" id="fnr1"><a href="#fn1">1</a></sup>.  Tinyweb gives me just enough framework to do pretty much everything I need &#8211; which I would expect from a real micro-framework.  On top of that it&#8217;s flexible and intuitive and another handy utility in my tool belt.</p><p class="footnote" id="fn1"><a href="#fnr1"><sup>1</sup></a> I&#8217;ve already said that it is possible to make the likes of Nancy and Jessica behave in this, either by ensuring that all module adhere to this pattern, or creating an abstract base class that enforces this sort of structure so I am in no way bashing the alternatives.  I like choice.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Micro Web Frameworks in .NET 101: Anna]]></title>
    <link href="http://yobriefca.se/blog/2011/06/22/micro-web-frameworks-101-anna/"/>
    <updated>2011-06-22T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/06/22/micro-web-frameworks-101-anna</id>
    <content type="html"><![CDATA[<p>  <blockquote class="announce">This post is the is part of series of posts covering the various <em>micro web frameworks</em> in the .<span class="caps">NET</span> world.  The frameworks I intend to cover will be linked as the series progresses.  For further discussion on the use of micro web framework in .<span class="caps">NET</span> please see my <a href="http://yobriefca.se/blog/2011/05/18/why-use-micro-web-frameworks-in-net/">previous post</a> The current series line up:<ul>    <li><a href="http://yobriefca.se/blog/2011/05/19/micro-web-frameworks-101-jessica/">Jessica</a></li>    <li><a href="http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy/">Nancy</a></li>    <li><a href="http://yobriefca.se/blog/2011/06/22/micro-web-frameworks-101-anna/">Anna</a></li>  <li><a href="http://yobriefca.se/blog/2011/07/18/micro-web-frameworks-101-tinyweb//">Tinyweb</a><br></li></ul></blockquote><p>It&#8217;s been a while since I visited this subject (at least in my blog) and I&#8217;ve still to record a lot of screencasts around Nancy.  Anyway I thought I&#8217;d give a quick mention to <a href="https://github.com/jfromaniello/Anna/">Anna</a> that has just come up on my radar.  Now the project is still in the very early stages but it&#8217;s possibly one of the best uses of <a href="http://msdn.microsoft.com/en-us/data/gg577609">Rx</a> and worth a quick look.  Now I am a bit rusty in the old Rx stuff so sorry if I say something stupid.</p><h2>Getting Started &#8211; Hello World</h2><p><a href="https://github.com/jfromaniello/Anna/">Anna</a> aims to be an asynchronous event-driven <span class="caps">HTTP</span> server in a similar vein to <a href="http://nodejs.org/">node.js</a>.  At it&#8217;s core is the <code>HttpServer</code> object that allows us to wire up routes.</p><p>There is no configuration required &#8211; just install <a href="https://github.com/jfromaniello/Anna/">Anna</a>  from the Nuget Package Console via <code>Install-Package Anna</code> and you are good to go.  Just create a console application with the infamous <code>Program.cs</code> and a few lines of code gives you the <code>Hello World</code> solution,</p><script src='https://gist.github.com/1038740.js?file=Program.cs'></script><noscript><pre><code>using (var server = new HttpServer("http://localhost:1234/")){    server.GET("/").Subscribe(context =&gt;         context.Respond("Hello World"));    Console.ReadLine();}</code></pre></noscript><p>I added the <code>Console.ReadLine()</code> to stop the console app exiting and cleaning things up.  Running the app and going to <code>http://localhost:1234</code> gives you the result.  The <code>HttpServer</code> object has a number of methods for the various <span class="caps">HTTP</span> verbs and these methods all return instances of <code>IObservable</code> which means you can subscribe to them and apply all those filters, transforms etc. the Rx offers.</p><h2>Other Anna Features</h2><p>As I said <a href="https://github.com/jfromaniello/Anna/">Anna</a>  is still in the early stages so once you grab a route there isn&#8217;t a <span class="caps">MASSIVE</span> amount you can do with but respond.  Responses however are chainable so you can create an almost middleware like stack for requests e.g.</p><script src='https://gist.github.com/1038778.js?file=Anna.cs'></script><noscript><pre><code>var route = server.GET("/");route.Subscribe(context =&gt; context.Respond("Hello "));route.Subscribe(context =&gt; context.Respond("World"));</code></pre></noscript><p>This gives you the same output as the original Hello World sample.</p><p>But from what I can see thats about as far as you can get.  In <a href="http://nodejs.org/">node.js</a> there is a framework called <a href="http://senchalabs.github.com/connect/">Connect</a> now I&#8217;m not sure if <a href="https://github.com/jfromaniello/Anna/">Anna</a>  is intending to go in this sort of direction but I think it could be moulded into something like this with a bit of <span class="caps">TLC</span>.  The problem is at the minute I don&#8217;t see any sort of object passed along the subscription chain e.g. a <code>dynamic</code> bag or something. I don&#8217;t even know how to easily manage response headers.</p><h3>Routes and Route Fragments</h3><p><a href="https://github.com/jfromaniello/Anna/">Anna</a>  supports creating different routes including routes with dynamic sections <code>/name/{name}</code> that are used to populated a <code>UriFragments</code> property,</p><script src='https://gist.github.com/1038812.js?file=Fragments.cs'></script><noscript><pre><code>server.GET("/hello/{name}").Subscribe(context =&gt; context.Respond(    string.Format("Hello {0}", context.Request.UriArguments.name)));</code></pre></noscript><h3>Conditional Routes</h3><p>Thanks to the power of Rx and Linq it is possible to create conditional routes an create chains that have pre-response checks.  For example we can have a route that only triggers a response if the QueryString has a secret parameter.</p><script src='https://gist.github.com/1038831.js?file=Secret.cs'></script><noscript><pre><code>var route = server.GET("/");route.Subscribe(context =&gt; context.Respond("&lt;h1&gt;Hello World<p>&#8220;));<br>route.Where(ctx =&gt; ctx.Request.QueryString.secret == &#8220;letmein&#8221;)<br>     .Subscribe(ctx =&gt; ctx.Respond(&#8220;<h2>Secret Message</h2>&#8221;));</code></pre></noscript><p><p>So if you hit <code>http://localhost:1234/</code> you get Hello World.  Hit that again with the param <code>?/secret=letmein</code> and you get the super secret message.</p><h2>Conclusion</h2><p>Thats about it for now but I think I&#8217;ll be keeping an eye on this project and see were it goes.  Even though it&#8217;s still early days I like the concept behind the library and the fresh approach it&#8217;s taking.  I&#8217;ll push some of my sample code up to Github and update this post in the next few days.  In the meantime Jose the creator of Anna has <a href="http://joseoncode.com/2011/06/17/event-driven-http-server-in-c-with-rx-and-httplistener/">some nice examples</a> of Rx based HttpServer stuff on his blog featuring a long polling example.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Micro Web Frameworks in .NET 101: Nancy]]></title>
    <link href="http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy/"/>
    <updated>2011-05-23T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy</id>
    <content type="html"><![CDATA[<p>  <blockquote class="announce">This post is the is part of series of posts covering the various <em>micro web frameworks</em> in the .<span class="caps">NET</span> world.  The frameworks I intend to cover will be linked as the series progresses.  For further discussion on the use of micro web framework in .<span class="caps">NET</span> please see my <a href="http://yobriefca.se/blog/2011/05/18/why-use-micro-web-frameworks-in-net/">previous post</a> The current series line up:<ul>    <li><a href="http://yobriefca.se/blog/2011/05/19/micro-web-frameworks-101-jessica/">Jessica</a></li>    <li><a href="http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy/">Nancy</a></li>    <li><a href="http://yobriefca.se/blog/2011/06/22/micro-web-frameworks-101-anna/">Anna</a></li>  <li><a href="http://yobriefca.se/blog/2011/07/18/micro-web-frameworks-101-tinyweb//">Tinyweb</a><br></li></ul></blockquote><p><a href="htttp://nancyfx.org">Nancy</a> is a different beast to <a href="http://jessicafx.org">Jessica</a> while on the surface it may appear like a micro web framework, once you scratch the surface it becomes debatable because there is just some much more than a nice <span class="caps">DSL</span> for creating lightweight web apps.  In fact this was <a href="http://tombell.org.uk/blog/2011/04/10/why-did-i-create-jessica/">one of the reasons</a> Jessica was created,</p><blockquote><p>Nancy has taken an approach to making many parts of the framework replaceable; if you don?t like the functionality of X you can create your own, and have Nancy use that instead. While this is a respectable goal for a web framework, the focus for Jessica has been to stay as simple and as close to Sinatra as possible. <em>Tom Bell.  Why Did I Create Jessica?</em></p></blockquote><p>Anyway we will touch on these aspects a bit later.  Lets get cracking.</p><h2>Getting Started &#8211; Hello World</h2><p>Getting <a href="htttp://nancyfx.org">Nancy</a> up and running is simple enough.  Starting with an empty <span class="caps">ASP</span>.<span class="caps">NET</span> web project<sup class="footnote" id="fnr1"><a href="#fn1">1</a></sup> we can use <a href="http://nuget.org/">NuGet</a> to install Nancy</p><p class="minimal-gist"><script src="https://gist.github.com/985446.js?file=InstallPackage.cs"></script></p><p>Also because we are hosting this in an <span class="caps">ASP</span>.<span class="caps">NET</span> environment (more on this later) we need to install the appropriate hosting package</p><p class="minimal-gist"><script src="https://gist.github.com/985450.js?file=InstallPackage.ps"></script></p><p>Next step requires us to add some stuff to the <code>web.config</code>.  If you&#8217;ve been smart and installed the hosting package from NuGet this steps is done for you but ultimately your minimal <code>web.config</code> should look like this.</p><script src="https://gist.github.com/985454.js?file=Web.config.xml"></script><p>The final step is to create the hello world module that will handle your route.  Again, like Jessica, it doesn&#8217;t matter where the module classes are placed but for neatness I just like to stick them in a <code>Modules</code> folder.  Our module will look very similar to the one we defined for Jessica.</p><script src="https://gist.github.com/985460.js?file=HelloWorldModule.cs"></script><p>And we&#8217;re done.  Fire the app up and behold the &#8220;Hello World&#8221;-yness of it all.</p><h2>Other Micro Framework Related Stuff</h2><p><a href="http://nancyfx.org">Nancy</a> has some features that aren&#8217;t technically related to the micro framework aspect  &#8211; specifically hosting but I&#8217;ll touch on that later.  <a href="http://nancyfx.org">Nancy</a> also has a lot of nice features that are related to the micro framework aspects so lets take a bit of a whirlwind tour around the main areas first.</p><h3>Routes</h3><p>Routes in <a href="http://nancyfx.org">Nancy</a> are pretty powerful.  Obviously you get the declare static routes (as demonstrated above) but dynamic routes (routes with variables for example) are also supported in a few of ways.  First of all you have named segments.  These can be expressed in 2 ways</p><ol> <li>Sinatra style variables <code>/user/:id</code>, or,</li>    <li>C#-esque <code>String.format</code> style <code>/user/{id}</code></li></ol><p>Declaring a route like this will cause the variable section to be pushed into a named variable within the dynamic object passedin into the route action. <code>/user/jameshu</code> matches <code>/user/:id</code> and the dynamic object passed into the action will have <code>x.id == "jameshu"</code></p><p>The other means of dynamic route matching is the use of regular expressions and named capture groups (or backreferences as they are sometimes known).  Using regular expressions as route parameters allows us to offer more fine grained route matching.  Take the following route as an example,</p><p class="minimal-gist"><script src="https://gist.github.com/985797.js?file=Route.cs"></script></p><p>This route will <span class="caps">ONLY</span> match routes whose variable section matches the expression, in this case a numeric value.  So not only have we specified a route variable but we are also limiting access to that action to &#8220;valid&#8221; values.  This means we could also offer another route that accepts only alphabetical characters.  Powerful enough.</p><h3>Route Conditions</h3><p>Taking routes another step further <a href="http://nancyfx.org">Nancy</a> also offers optional conditions that can be used to determine if a route should be executed for a given request.  Lets use this heavily contrived example to demonstrate this feature,</p><p class="minimal-gist"><script src="https://gist.github.com/985818.js?file=SecretRoute.cs"></script></p><p>So this route will match any route starting with <code>/user</code> however the condition (the second argument of the definition) will ensure that the route action will only get executed if the query string is populated with an argument called password with a value of secrets i.e <code>http://myserver/user?password=secrets</code> will match successfully.</p><h3>Views</h3><p><a href="http://nancyfx.org">Nancy</a> supports a decent range of view engines<sup class="footnote" id="fnr2"><a href="#fn2">2</a></sup></p><ul>    <li>Razor</li>  <li>Spark</li>  <li>NDjango and, obviously,</li>    <li>Static files</li></ul><p>Serving up dynamic vies is fairly simple</p><script src="https://gist.github.com/985832.js?file=ModuleWithView.cs"></script><p>We basically use the View object to specify the view and optionally pass in a view model as well.  By default Nancy will look in the <code>~/Views</code> folder for the views but you can also specify a full path if needs be.  The view is then matched against the available view engines and rendered as you would expect.  This is the Razor view specified above.</p><script src="https://gist.github.com/985835.js?file=View.cshtml"></script><h3>Responses</h3><p>Nancy is also capable of returning static content as different responses (similar to how Jessica does it).  Each route action is expected to return a Nancy Response object. The object itself has a number of convenience methods for serving static files and <acronym title="JavaScript Object Notation"><span class="caps">JSON</span></acronym> such as <code>Response.AsJs</code>, <code>Response.AsJson</code>, <code>Response.AsXml</code>, , <code>Response.AsRedirect</code> etc.</p><h2>Hosting</h2><p>This is were things move away from &#8220;micro framework&#8221; world a bit.  Nancy itself abstracts out the hosting environment making the entire framework portable allowing you to host in any number of places including (but not limited to),</p><ul>    <li>Self hosted (e.g. embedded within an executable)</li>   <li><span class="caps">ASP</span>.<span class="caps">NET</span>/<span class="caps">IIS</span> (as demonstrated above)</li>  <li><span class="caps">WCF</span> (yep thats right), and,</li>  <li>Some partial <a href="http://bvanderveen.com/a/dotnet-http-abstractions"><span class="caps">OWIN</span></a> support</li></ul><p>This, to me at least, is very interesting.  Being able to build an executable that accepts <span class="caps">HTTP</span> requests could be pretty powerful in the right hands and the <span class="caps">WCF</span> stuff sounds very interesting (is this similar to what the new <span class="caps">WCF</span> Web <span class="caps">API</span> is attempting to offer?).  I need to play some more in this area.  I&#8217;ll report back when I am done.</p><h2>Summing Up</h2><p>So that was a quick round up of the key features of Nancy and I think it&#8217;s another one worth looking at.  So hopefully you can also see how it differs from Jessica.  From a code perspective they seem quite similar (though Nancy has possibly a few more features) but the whole hosting abstraction layer is very interesting.  I have had people ask me if this introduced any new (or even old) security concerns and to be honest I don&#8217;t know but it might certainly be worth looking out for.</p><p>As always I may need corrections so please fire away.  Hopefully I can cover off these points with a few more screencasts over the next week.  Stay tuned.</p><p class="footnote" id="fn1"><a href="#fnr1"><sup>1</sup></a> In my <a href="http://jessicafx.org">Jessica</a> I laid out steps to strip the normal <span class="caps">ASP</span>.<span class="caps">NET</span> Web Project template out of all the unnecessary bits.  Lord knows why I didn&#8217;t just create an empty web project &lt;facepalm/&gt;</p><p class="footnote" id="fn2"><a href="#fnr2"><sup>2</sup></a> Apparently it also has a built in view engine called the Super Simple View Engine but as of yet I can&#8217;t seem to get it to work.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Micro Web Frameworks in .NET 101: Jessica]]></title>
    <link href="http://yobriefca.se/blog/2011/05/19/micro-web-frameworks-101-jessica/"/>
    <updated>2011-05-19T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2011/05/19/micro-web-frameworks-101-jessica</id>
    <content type="html"><![CDATA[<p>  <blockquote class="announce">This post is the is part of series of posts covering the various <em>micro web frameworks</em> in the .<span class="caps">NET</span> world.  The frameworks I intend to cover will be linked as the series progresses.  For further discussion on the use of micro web framework in .<span class="caps">NET</span> please see my <a href="http://yobriefca.se/blog/2011/05/18/why-use-micro-web-frameworks-in-net/">previous post</a> The current series line up:<ul>    <li><a href="http://yobriefca.se/blog/2011/05/19/micro-web-frameworks-101-jessica/">Jessica</a></li>    <li><a href="http://yobriefca.se/blog/2011/05/23/micro-web-frameworks-101-nancy/">Nancy</a></li>    <li><a href="http://yobriefca.se/blog/2011/06/22/micro-web-frameworks-101-anna/">Anna</a></li>  <li><a href="http://yobriefca.se/blog/2011/07/18/micro-web-frameworks-101-tinyweb//">Tinyweb</a><br></li></ul></blockquote><blockquote><p>The following post relates to version 0.8 of Jessica so some features may change in future releases</p></blockquote><p>Now I have got the <a href=":./blog/2011/05/18/why-use-micro-web-frameworks-in-net/">opinion piece</a> out of the way I can start the bit I like &#8211; dissecting the various technologies that could be classed as <em>micro web frameworks</em>.  First on the table is <a href=":http://jessicafx.org">Jessica</a>.</p><h2>Getting Started &#8211; Hello World</h2><p>Getting a simple Hello World set up in <a href=":http://jessicafx.org">Jessica</a> involves (optionally) taking more out than you put in.  <a href=":http://jessicafx.org">Jessica</a> requires very little configuration so creating a new web project, deleting all the extra files and folders, trimming the <code>web.config</code> and emptying the <code>Global.asax.cs</code> makes for a nice blank canvas to start with.</p><p class="img-holder"><img src="http://yobriefca.se/media/images/blog/project-before-and-after.png" alt=""></p><p>Next step is pretty difficult :-).  Within the <a href="http://nuget.org">NuGet</a> Package Manager Console just install the Jessica package</p><p class="minimal-gist"><script src="https://gist.github.com/979313.js?file=InstallJessica.ps"></script></p><p>Once installed be need to tell Jess to initialise/bootstrap itself when the application starts by calling the initialise method in the <code>Application_Start</code> method of the <code>Global.asax.cs</code></p><script src="https://gist.github.com/979324.js?file=Global.asax.cs"></script><p>At this point it&#8217;s also possible to supply a number of configuration options but we will touch on this later along with the optional configuration <span class="caps">XML</span>.  Now that Jess is setup to configure itself all we need to do now is define the module that will handle our complex Hello World output.</p><p>Modules form the basis of Jessica each one holding a number of routes (based on URL&#8217;s and <span class="caps">HTTP</span> verbs) and associated actions.  Our app will have a single module,</p><script src="https://gist.github.com/979345.js?file=MainModule.cs"></script><p>This simple module defines a single route that will match any standard <code>GET</code> request for the root of the app. And that&#8217;s it.  When you run the app Jess will inspect the assembly and find all the modules and wire up the routes.</p><h2>The Rest of the Pie</h2><p>Obviously serving plain bits of text is a bit useless so there are plenty of things that Jessica offers that makes it, well, actually useful.</p><h3>Configuration</h3><p>Jessica can be configured programatically or via <span class="caps">XML</span> config.  A number of things you can currently set include,</p><ul>    <li>Environment &#8211; the environment you build in e.g. <code>development</code>, <code>test</code>, <code>release</code>.  Default <code>development</code></li> <li>Public Directory &#8211; The directory to be used to server static content (html, js, css, images) that require no preprocessing. Default <code>public</code></li>  <li>Views Directory &#8211; The directory to be used to serve views that can be dynamically rendered (Razor, Textile, Markdown, Liquid etc.).  Default <code>views</code></li></ul><p>The <span class="caps">XML</span> config is outlined below but each of these properties can be set in the <code>Global.asax.cs</code> programatically as well via the <code>Jess.Configuration</code> properties.</p><script src="https://gist.github.com/979475.js?file=Web.config.xml"></script><h3>Routes and Actions</h3><p>Routes may be defined as a literal path such as <code>/users</code> or <code>/store/toys</code> or with variable segments such as <code>/user/:id</code> or <code>/blog/:year/:month/:day</code>.  Variable segments are then parsed out of the route url and the values added to the action argument.</p><p class="minimal-gist"><script src="https://gist.github.com/980298.js?file=Routes.cs"></script></p><p>That seems to be about the extent of the route manipulation for now.  Would be nice to see the other Sinatra stuff included such as <a href="http://www.sinatrarb.com/intro#Routes">splats</a>, <a href="http://www.sinatrarb.com/intro#Routes">regular expressions</a> and <a href="http://www.sinatrarb.com/intro#Conditions">conditions</a>.</p><p>Actions are fairly simple they take a dynamic object and are expected to return a Jessica <code>Response</code> object.  The dynamic object passed in contains a number of things such as route parameters, querystring parameters and the current HttpContext.  As an added niceness the Jessica <code>Response</code> object has a number of <a href="http://msdn.microsoft.com/en-us/library/z5z9kes2(v=vs.71).aspx">implicit</a> type conversions that allow us to return simpler objects</p><script src="https://gist.github.com/980308.js?file=ImplicitTypes.cs"></script><h3>Static Content</h3><p>Jessica allows us to return static content simply.  First of all all routes are first checked for the existence of a file at that <span class="caps">URL</span>.  If a file is found it is served, if not then Jessica goes to the route table and works it&#8217;s magic.  Putting resources in the <code>publicDir</code> allows Jessica to serve static content from the route actions and the <code>Response</code> object comes with a number of nice helpers to help make your static actions neater.</p><script src="https://gist.github.com/980313.js?file=JessicaResponse.cs"></script><h3>Views</h3><p>What web technology would be complete without the ability to serve non-static views?  Oddly enough Jessica, out of the box at least, comes with no view engines.  I suspect this is because dynamic view rendering isn&#8217;t technically something that should form the basis of a web framework &#8211; thats the job of the view engines.  Jessica does however come with an extension point of adding X amount of view engines &#8211; <code>Jess.ViewEngines</code>.  There is also a healthy volume of view engines available for Jessica,</p><ul>   <li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Razor">Razor</a></li>    <li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Spark">Spark</a></li>    <li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-DotLiquid">DotLiquid</a></li>    <li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Markdown">Markdown</a></li>  <li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Textile">Textile</a></li></ul><p>Rendering a view from an action is also very simple</p><script src="https://gist.github.com/980288.js?file=ViewJessica.cs"></script><p>The first option renders a simple view called index while the second takes a model object that is pushed into the scope of the view and can be used to build the view.  Jessica will loop through it&#8217;s <code>ViewEngines</code> collection and attempt to resolve the view name to a file in the specified <code>viewsDir</code> folder.  If it finds a matching view it will render it.</p><p>I am going to take the lead from Jessica itself and not dive into the various view choices for now.  They are pretty self explanatory anyway.</p><h2>Summing Up</h2><p>So thats the 101, the skinny, the lowdown, the starter for 10, the basics and other random statements of <a href=":http://jessicafx.org">Jessica</a>. Hopefully this covers the vast majority of what v0.83 of Jessica offers.  It&#8217;s a nice minimla framework that attempts to stick to Sinatra&#8217;s philosophy.  It would be nice to see a few more of Sinatras features creeping in especially route <a href="http://www.sinatrarb.com/intro#Conditions">conditions</a>.  There is also some nice high level error handling being introduced (for v0.9 I assume) for handling application wide errors and 404&#8217;s.  I plan on talking about these when they make an appearance.</p><p>Corrections, comments and criticisms below please.</p></p>
]]></content>
  </entry>
  
</feed>
