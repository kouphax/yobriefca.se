<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>jQuery Mobile | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/jquery-mobile/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-12-28T20:10:10+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobilize! Adapting the ASP.NET MVC Project Template for jQuery Mobile]]></title>
    <link href="http://yobriefca.se/blog/2010/10/26/mobilize-adapting-the-asp-net-mvc-project-template-for-jquery-mobile/"/>
    <updated>2010-10-26T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/26/mobilize-adapting-the-asp-net-mvc-project-template-for-jquery-mobile</id>
    <content type="html"><![CDATA[<p>  <p class='img-holder'><img src="http://farm3.static.flickr.com/2413/5721975436_fb47349a04_o.png" alt=""></p><p style="text-align: right;"><em><span style="font-size: xx-small;"><span style="font-size: xx-small;">Image</span> courtesy of the  awesome </span></em><em><span style="font-size: xx-small;"><a href="http://www.threadless.com/">Threadless</a></span></em></p><p>Having tinkered with <a href="http://yobriefcase.posterous.com/practical-jquery-mobile-with-aspnet-mvc">jQuery  Mobile and MVC</a> a bit recently but I wanted to do a bit more.&nbsp; The first app  I wrote was read only which is actually pretty easy to accomplish regardless of  technology/framework.&nbsp; So I wanted to try a little something different,  something a kin to a real application.&nbsp; However time and coders block left me  with little inspiration for creating the worlds next amazing mobile app.&nbsp;  Sitting there with a new ASP.NET MVC project open in Visual Studio I couldn&rsquo;t  think of what to write.&nbsp; Then it struck me&hellip; don&rsquo;t write anything.&nbsp; The MVC  starter skeleton project was sitting right there why not just mobilise it?&nbsp; So I  did.&nbsp; Without modifying any server side code and only tweaking the views I found  I was able to create a fully jquery-mobilified version of the template.&nbsp; Here&rsquo;s  what I did.</p><h2>Clean House</h2><p>We need to strip some of the dead weight out of our project including some of  the mark up and resources,</p><h3>Resources</h3><p>First things first I dropped the current bundle of scripts (MS Ajax, jQuery  1.4.1, Validate etc.) and the Site.css.&nbsp; Next I added the jQuery Mobile  assets,</p><ul><li>jQuery 1.4.3 (jquery-1.4.3.js)</li><li>jQuery Mobile 1.0a1 (jquery.mobile-1.0a1.js)</li><li>jQuery Mobile CSS (jquery.mobile-1.0a1.css)</li><li>jQuery Mobile images</li></ul><p>In the following project structure</p><p class='img-holder'><img src='http://farm3.static.flickr.com/2696/5721416507_18861d0ae1_o.png'></p><h3>Site.Master</h3><p>Next I&nbsp;cut down the Site.Master to it&rsquo;s bare minimum and add the HTML5  DocType and the references to jQuery Mobile ,</p><p><script src="https://gist.github.com/646750.js"></script></p><p>I could have included the basic markup for a full page but I wanted to keep  it as flexible for now.&nbsp; I also removed the LogOnUserControl for now as I want  to just push it into the main page.</p><h2>Marking Up</h2><p>The next step was to tweak the markup of the pages so they comply with jQuery  Mobile and can be mobilised correctly.&nbsp; Most pages are marked up in the same way  so rather than list them all I&rsquo;ll just list the highlights.</p><h3>Home.aspx</h3><p><script src="https://gist.github.com/646756.js"></script></p><p>I have a top toolbar button for Login/Log Off (depending on context) and the  View.Message from the old page is included as the content of the page.</p><h3>Logon.aspx</h3><p><script src="https://gist.github.com/646757.js"></script></p><p>Gives us the login form and a link to the Register screen.&nbsp; I marked the  Register screen as a Dialog just to be a wee bit different.&nbsp; The Register screen  itself is marked up as a normal page (the framework handles the displaying of a  dialog automagically).&nbsp; I also added a different theme to the login button and a  &ldquo;pop&rdquo; transition to the Register dialog through the data- attributes.</p><p>One other thing I had to do was add a &ldquo;fieldcontain&rdquo; wrapper to the field  blocks as there was some layout issues.&nbsp; This is documented in the jQuery Mobile  docs.</p><h3>Register.aspx</h3><p><script src="https://gist.github.com/646760.js"></script></p><p>The most complex screen in the app.&nbsp; Nothing special added only some  different markup.</p><h2>Running It</h2><p>That was it.&nbsp; After adapting the rest of the pages (via manipulating markup)&nbsp;  I was left with a mobilized version of the MVC project template.&nbsp; Again I didn&rsquo;t  have to make any code changes&nbsp;&ndash; validation still worked, forms still worked,  login, register, change password&nbsp;&ndash; all worked as expected (screen shots&nbsp;from Chrome which has a few issues with rounded corners on fields in jQuery Mobile).</p><p class='img-holder'>  <img src='http://farm4.static.flickr.com/3502/5721975554_272b823481_o.png' width='200' style='border:1px solid #000;'>  <img src='http://farm3.static.flickr.com/2756/5721416629_4b4e7ebaed_o.png' width='200' style='border:1px solid #000;'>  <img src='http://farm3.static.flickr.com/2510/5721416689_20e25e2983_o.png' width='200' style='border:1px solid #000;'></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical jQuery Mobile with ASP.NET MVC]]></title>
    <link href="http://yobriefca.se/blog/2010/10/22/practical-jquery-mobile-with-asp-net-mvc/"/>
    <updated>2010-10-22T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/22/practical-jquery-mobile-with-asp-net-mvc</id>
    <content type="html"><![CDATA[<p>  <p>That's a bit of a mouthful.&nbsp; I wanted to write a post about creating a basic  jQuery Mobile app but as I started putting the code together MVC became more and  more involved so I combined the 2.</p><p>The end solution?&nbsp; Lets create a phone directory with 2 main views,</p><ol><li>A filterable list of all people with quick info (telephone extension and  name) that is grouped and sorted alphabetically, and,</li><li>A disclosure view of a selected person showing more details including a  photo</li></ol><p>[[posterous-content:FddxCHuIgArIuezHEbcn]]</p><h2>MVC (The Server Side)</h2><p>jQuery Mobile works by progressive enhancement and uses Ajax to load and  parse external links so it has more control over page transitions and Ajax  history.&nbsp; This means that we create a plain old website that will work without  jQuery Mobile, Ajax or any JavaScript.&nbsp; So I started with the ASP.NET MVC 2 Web  Application Visual Studio Template and ripped out everything bar the Home  Controller and the 2 views.&nbsp; I also stripped the Site.Master down to the bare  bones.</p><p>Next I created my model with data access methods,</p><p><script src="https://gist.github.com/640270.js"></script></p><p>You can implement your own data access there or just hard code some values.&nbsp;  Next I updated the HomeController to return the right models&nbsp; to the views</p><p><script src="https://gist.github.com/640281.js"></script></p><p>I updated the views to&nbsp;display the information in a straightforward way.&nbsp;</p><p>Index.aspx</p><p><script src="https://gist.github.com/640303.js"></script></p><p>About.aspx</p><p><script src="https://gist.github.com/640304.js"></script></p><p>This leaves us with a normal, not so pretty but fully functioning site.&nbsp;</p><p>[[posterous-content:DblJukiumuFlvvqlHokq]]</p><p>Now lets inject some mobile niceness into it,</p><h2>jQuery Mobile</h2><p>First things first lets put reference to jQuery and jQuery Mobile&nbsp; (script  and css) into our site master and update our DOCTYPE to the HTML5 DOCTYPE  leaving us with,</p><p><script src="https://gist.github.com/640308.js"></script></p><p>Now we need to tell jQuery Mobile how to layout the pages and mobilise.&nbsp; This  isn&rsquo;t necessarily done in script as you might think.&nbsp; jQuery Mobile makes use of  HTML5&rsquo;s data- attributes to identify how the page should be laid out and mark  areas to specific roles.</p><p>Index.aspx</p><p><script src="https://gist.github.com/640312.js"></script></p><p>About.aspx</p><p><script src="https://gist.github.com/640313.js"></script></p><p>So what have we added here?&nbsp;</p><ul><li>data-roles&nbsp;&ndash; telling jQuery Mobile what each div actually represents e.g.     <ul><li>page&nbsp;&ndash; a single view (a single html page can have multiple views)</li><li>header&nbsp;&ndash; the header of a page</li><li>content&nbsp;&ndash; the pages content</li><li>footer&nbsp;&ndash; the footer of a page</li><li>list-view&nbsp;&ndash; a special&nbsp;role to&nbsp;specifying &nbsp;that the content is a list</li><li>list-divider&nbsp;&ndash; a divide for a list that doesn&rsquo;t do anything but look  different</li></ul></li><li>data-filter&nbsp;&ndash; telling jQuery Mobile that&nbsp;it should provide filtering on this  view</li><li>ui-li-aside class identifies that this is some aside information for this  list item</li></ul><p>And that is it.&nbsp; We have taken a static site and without writing any code  (bar markup) created a mobile app.&nbsp; Probably might be a good idea to include an  application cache manifest file as well so there is some semblance of offline  capability provided.&nbsp; But that's for another day.</p><p>[[posterous-content:pJHwwsHHmrfAkJIJFkrp]]</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Mobile Quick Look]]></title>
    <link href="http://yobriefca.se/blog/2010/10/18/jquery-mobile-quick-look/"/>
    <updated>2010-10-18T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/18/jquery-mobile-quick-look</id>
    <content type="html"><![CDATA[<p>  <p>jQuery Mobile was <span style="color: #1f497d;"><a href="http://jquerymobile.com/2010/10/jquery-mobile-alpha-1-released/">released</a></span> over the weekend or at least the alpha version of it was (full release scheduled for some time on 2011).&nbsp;</p><p>So what is it like?&nbsp; Well first things first it's early days, there are certainly more than few rough edges but given the development timeline (~2 months) it is quite an impressive effort put in by the <span style="color: #1f497d;"><a href="http://www.filamentgroup.com/">Filament Group</a></span> and others.</p><h2>iThings</h2><p>The first question most people will ask (or the first thing they will try and do) will probably be</p><blockquote><p style="padding-left: 30px;">So how does it look on the various iThings (iPad, iPhone, iPhone 4)?&nbsp;</p></blockquote><p>Well it looks good for the most part.&nbsp; There are some issues around page transitions and displaying dialogs (especially on the iPad) - things like page flickering, hidden content becoming visible after the page has loaded etc. and while they are a bit annoying they don't "break" anything.</p><p>As the framework isn't targeting iOS specifically there are some behaviours that would wouldn't necessarily expect if you used this as a native app (using PhoneGap or whatever).&nbsp; Toolbars aren't explicitly fixed and when they are fixed disappear on scroll and repositioned after scrolling has finished.&nbsp; Select boxes don't display the normal pickers found in native iOS but instead use a custom dialog for selection.&nbsp; Again these aren't criticisms, they work well, but I have heard people already complaining because they expect the framework to produce a fully native looking app.</p><h2>Sencha Touch</h2><p>When comparing frameworks many peoples first thoughts will be</p><blockquote><p style="padding-left: 30px;">How does it compare to <span style="color: #1f497d;"><a href="http://www.sencha.com/products/touch/">Sencha Touch</a></span>&nbsp;</p></blockquote><p>To be honest&nbsp; the comparison is like comparing apples to oranges, or jQueryUI to ExtJS.&nbsp; Both projects have also different goals.&nbsp; While Sencha currently aims to provide a rich native like experience on a small subset of mobile browsers (specifically iOS and Android), jQuery Mobile aims to create a consistent, mobile/touch capable experience across a much <span style="color: #1f497d;"><a href="http://jquerymobile.com/gbs/Touch">wider range of mobile browsers</a></span>.&nbsp; This is by no means easy.&nbsp; An interaction style one device may not be suitable for another.</p><h2>FOUC</h2><p>One of the goals of jQuery Mobile is to progressively enhance the base page to become more mobile capable.&nbsp; Because of this the base page is very basic with jQuery Mobile specific stylers applied when the DOM is ready.&nbsp; This can lead to some initial FOUC (Flash of Unstyled Content).&nbsp; We can get around this by applying some of the basic jQuery Mobile styles to begin with and I suspect we will see this tactic being used on future releases.</p><p>[[posterous-content:EeHJJwvCqFJrzcdxeEEb]]</p><h2>Accessibility</h2><p>One thing I never really though of in a Mobile Framework is accessibility.&nbsp; This is just short sightedness on my part as it is as relevant in the mobile world as it is in the desktop world.&nbsp; jQuery Mobile aiming to be fully accessible through it's use of ARIA roles and progressive enhancement.</p><h2>The Technicals</h2><p>From a technical/developer stand point jQuery Mobile is quite nice.&nbsp; Lets look at a few of the highlights,</p><h3>Pages</h3><p>Sites can be built as a single page with sub sections being marked as "pages" that jQuery Mobile can navigate.&nbsp; External pages are load using ajax (rather than simply navigating to them), this give jQuery Mobile better control over transitions, and history management.&nbsp; A simple page looks like this,</p><p><script src="https://gist.github.com/631896.js"></script></p><p>So lets break this down and pick out the interesting parts,</p><p><script src="https://gist.github.com/631897.js"></script></p><p>HTML5 DocType which older browsers can handle gracefully</p><p><script src="https://gist.github.com/631899.js"></script></p><p>Scripts and styles included.&nbsp; Now from a mobile perspective this is still quite a bit of script especially over some flaky 3G connections but in comparison to some of the frameworks out there it is still quite small.</p><p><script src="https://gist.github.com/631900.js"></script></p><p>This section describes 2 pages.&nbsp; A page is marked as a page by its <code>data-role</code> attribute and can contain 3 elements marking a header, the page content and the footer.&nbsp; Unless stipulated the first page will be first page in the DOM.&nbsp; Navigation between pages is handled using location.hash changes (page 1s button links to Page 2 in the example).</p><h3>Themeing</h3><p>Themeroller will see an overhaul on the official release which will allow you to create custom themes a la jQueryUI.&nbsp; Currently jQuery Mobile comes with 2 themes both of which have a number of swtaches.&nbsp; This is intended to create contrast between UI elements (e.g. for marking mandatory fields, or highlight primary buttons on a form etc.)</p><h3>Dialogs</h3><p>Dialogs in jQuery Mobile are simply pages with a <code>data-rel="dialog"</code> added to them so the same rules apply as above.</p><h3>Form Elements</h3><p>Forms in jQuery Mobile are plain old HTML(5) forms which is actually a VERY nice feature.&nbsp; Sencha/ExtJS forms are nice but when using SELECTs etc. can become a real pain to manage.&nbsp; jQuery Mobile uses a much lighter approach.&nbsp; Some screenshots (iPhone 4)</p><p>[[posterous-content:qipBwFyayBhuztrHFpJI]] So thats a very quick overview of jQuery Mobile.  I encourage you to play around with and get those bugs filed. &nbsp;As I've said it's early days but it's a big goal they are aiming for and they are currently well on track to produce a very nice framework come the official release.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery 1.4.3 & jQuery Mobile Released]]></title>
    <link href="http://yobriefca.se/blog/2010/10/16/jquery-1-4-3-jquery-mobile-released/"/>
    <updated>2010-10-16T00:00:00+01:00</updated>
    <id>http://yobriefca.se/blog/2010/10/16/jquery-1-4-3-jquery-mobile-released</id>
    <content type="html"><![CDATA[<p>  <p>As expected jQuery 1.4.3 and jQuery Mobile (alpha) have dropped today. The official announcements are here</p><ul><li><a href="http://blog.jquery.com/2010/10/16/jquery-143-released/">jQuery 1.4.3</a></li><li><a href="http://jquerymobile.com/2010/10/jquery-mobile-alpha-1-released/">jQuery Mobile</a></li></ul><p>Having had the chance to play around with these already here are a few of the highlights that I think are worth mentioning.&nbsp; This first post will talk about jQuery Core as I need a bit more time with jQuery Mobile to get a better feel for it.</p><h2>jQuery 1.4.3</h2><h3>.data()</h3><p>One of the first cool things that 1.4.3 brings with it is a tweak to the .data() method to allow it to work with not only DOM objects but plain old JavaScript objects as well. So what? Well it opens the doors for the recently announced <a href="http://github.com/jquery/jquery-datalink">Data Linking</a> plugin from Microsoft (<a href="http://yobriefcase.posterous.com/microsofts-trio-of-jquery-plugins">blogged about it before</a>) until now ran on a patched version of jQuery Core. Essentially this give us the ability to perform data binding between UI elements and a model object. This will be familiar to people who use binding in Silverlight. This is all made possible via the newly introduced changeData event that will get fired when .data() is used to modify a data value.</p><p><script src="https://gist.github.com/630059.js"></script></p><p>Another nice new feature rolled into .data() is that all HTML data attributes are automatically parsed as data on initial selection of the element(s). This behaviour is similar to the metadata plugin that has been around for some time. In fact data values are coerced into the applicable types (&ldquo;true&rdquo; becomes Boolean, &ldquo;{o:1}&rdquo; becomes a JavaScript object etc.). This is a nice feature to have but I wonder how resilient it is to weird strings.</p><p>So for,</p><p><script src="https://gist.github.com/630053.js"></script></p><p>The following will be true</p><p><script src="https://gist.github.com/630056.js"></script></p><p>This is going to play very nice with the Unobtrusive JavaScript/Ajax features of the ASP.NET MVC3 (which already employs something similar)</p><h3>Modularity</h3><p>One of the issues many people had with jQuery was it was &ldquo;all or nothing&rdquo;.&nbsp; This was fine at the start but as the file size started to grow people felt that they should be able to only use a small part of jQuery without having to pull the whole thing down.&nbsp; This release sees a fairly big refactoring to try and make this wish a reality.&nbsp; jQuery Core has been broken up into a number of sub modules which gives us the ability to load modules on demand (see <a href="http://yobriefcase.posterous.com/30487860">Modernizr and Require.JS</a>) or simply use the modules we need.</p><h3>jQuery.type()</h3><p>There are plenty of little cross browser differences in the typeof operator and as such it&rsquo;s not always reliable.&nbsp; The jQuery type method abstracts out all those little quirks to correctly determine arrays etc.</p><p><script src="https://gist.github.com/630195.js"></script></p><h3>And The Rest</h3><p>There are a load more improvements and tweaks in 1.4.3 that are fully explained in the original announcement including,</p><ul><li>Performance tweaks across CSS and Traversal modules</li><li>Tweak to allow pausing the DOM Ready event until explicitly specified</li><li>Event helpers can now be passed data objects</li></ul><p>Now onto jQuery Mobile&hellip;.</p></p>
]]></content>
  </entry>
  
</feed>
