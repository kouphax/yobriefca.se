<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[<span class="label" style="margin-right:10px;"><a href="/" style="text-decoration:none; text-transform:none; color:#fff">&larr;</a></span>underscore.js | Yo Briefcase!]]></title>
  <link href="http://yobriefca.se/blog/categories/underscore-js/atom.xml" rel="self"/>
  <link href="http://yobriefca.se/"/>
  <updated>2012-03-19T12:59:20+00:00</updated>
  <id>http://yobriefca.se/</id>
  <author>
    <name><![CDATA[James Hughes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Underscore.js: The JavaScript Utility Library]]></title>
    <link href="http://yobriefca.se/blog/2010/11/12/underscore-js-the-javascript-utility-library/"/>
    <updated>2010-11-12T00:00:00+00:00</updated>
    <id>http://yobriefca.se/blog/2010/11/12/underscore-js-the-javascript-utility-library</id>
    <content type="html"><![CDATA[<p>  <p class='img-holder'><img src="http://farm5.static.flickr.com/4017/5168979559_07b681c56d_o.gif" alt=""></p><p>I&rsquo;ve been meaning to give <a href="http://documentcloud.github.com/underscore/">Underscore.js</a>&nbsp;some love  for some time but never got around to it.&nbsp; The other day I though about writing  about <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> (another excellent library from the <a href="http://www.documentcloud.org/home">same people</a>) but didn&rsquo;t feel it  was possible to do so without first talking about Underscore as it underpins  most of the Backbone.js functionality.&nbsp; So without further ado&hellip;</p><h2>Introduction</h2><p style="padding-left: 30px;"><em><a href="http://github.com/documentcloud/underscore/">Underscore</a> is a  utility-belt library for JavaScript that provides a lot of the functional  programming support that you would expect in <a href="http://prototypejs.org/api">Prototype.js</a> (or&nbsp;<a href="http://www.ruby-doc.org/core/classes/Enumerable.html">Ruby</a>), but  without extending any of the built-in JavaScript objects. It's the tie to go  along with <a href="http://docs.jquery.com/">jQuery</a>'s tux.</em></p><p style="text-align: right;">- <a href="http://documentcloud.github.com/underscore/">http://documentcloud.github.com/underscore/</a></p><p>That&rsquo;s how the creators describe underscore and it&rsquo;s pretty spot  on.&nbsp; Underscore offers numerous low level functions that can be used to  perform&nbsp;on&nbsp;arrays and collections (as well as few for object and functions).&nbsp;  Some of these functions are available in some browsers but not all and because  of this Underscore provides a nice layer of abstraction to avoid having to  constantly feature detect.&nbsp; Incidentally where a browser does implement a  specific function Underscore will always fallback on the native implementation  ensuring that performance is as optimal as possible.&nbsp; This is the sort of stuff  that you would probably miss if you moved from <a href="http://www.prototypejs.org/">Prototype</a>&nbsp;to <a href="http://www.jquery.com/">jQuery</a>.&nbsp; Another point to note is that  Underscore doesn&rsquo;t extend native objects with it&rsquo;s own implementations which  most people will consider a good thing.&nbsp; Instead, like jQuery, Underscore  exposes a single global object aptly named <em>.&nbsp; Now I am not 100% sold on this, I  am a bit strange when it comes to neat code and I think this variable name makes  code look a bit &ldquo;noisy&rdquo;.&nbsp; Not a big deal but I like to pick holes in things  :-).</p><h2>Coding Styles</h2><p>There are two ways to write code using Underscore.&nbsp; Imagine the scenario that  given an array of numbers You can go the functional route and call methods  directly on the underscore object,</p><p><script src="https://gist.github.com/674020.js"></script></p><p>Or go the OO route for those familiar with the jQuery style syntax,&nbsp;</p><p><script src="https://gist.github.com/674050.js"></script></p><p>These 2 examples acheive the same thing&nbsp;&ndash; filter a list to those  values greater than 10 and derive a sum of these values; but the look and feel  are actually quite different.&nbsp; Which one you chose will be down to personal  preference (I tend towards the former approach but the jury is still out).</p><h2>Collections/Arrays</h2><p>Underscore has a ton of collection and array methods -&nbsp; a  collection being either an array or an object (as in an object is essentially a  property bag/associative array).&nbsp;</p><p>The usual suspects for array manipulation/traversal are all here.&nbsp; Coming  from a C# background some of the&nbsp;names will be familiar and some are different  but they achieve the same thing - here is just a tiny subset,</p><h3>each()</h3><p>Loops over a collection executing a callback on each element.&nbsp; break; support  provided by </em>.breakLoop()</p><p><script src="https://gist.github.com/674113.js"></script></p><h3>map()</h3><p>Creates a new array from a collection where each element can be transformed  by a callback</p><p><script src="https://gist.github.com/674130.js"></script></p><h3>first()/last()</h3><p>Select the first and last elements from an array</p><p><script src="https://gist.github.com/674137.js"></script></p><h2>Functions</h2><p>Underscore provides a number of methods that can be applied to functions.&nbsp;  These include the ability to bind methods to a specific object/context (bind),  memoize functions (caching or results to increase calculation speeds), delay and  defer execution of methods and perform some AOP style actions on functions (wrap  and compose).</p><h2>Objects</h2><p>Underscore provides a number of common object related methods such as the  ubiquitous extend and clone functions.&nbsp; Other useful functions include the use  of a tap function.&nbsp; This function lets you &ldquo;tap&rdquo; into an execution chain and  inspect/manipulate the object in its current state.&nbsp; The underscore example  demonstrates this perfectly.</p><p><script src="https://gist.github.com/674155.js"></script></p><p>As you can see the tap function is used to push the object (in this case an  array) through.&nbsp; There is also a fairly robust set of type detection  functions.</p><p style="padding-left: 30px;"><em>isEqual, isEmpty, isElement,isArray, isArguments, isFunction, isString,  isNumber, isBoolean, isDate,isRegExp isNaN, isNull, isUndefined</em></p><h2>Other Things</h2><p>There are a few other specific methods in Underscore that provide utility  functions including,</p><ul><li>template&nbsp;&ndash; super simple templating function</li><li>mixin&nbsp;&ndash; extend underscores functionlaity with your own custom methods</li><li>times&nbsp;&ndash; execute a callback a specified number of times</li></ul><h2>Conclusion</h2><p>This is a very high level overview of Underscore (so I can now go and get all  excited abuot Backbone) but hopefully you can see it&rsquo;s worth.&nbsp; Have a look at  the <a href="http://documentcloud.github.com/underscore/">comprehensive docs</a> that many of my example where derived from and see if there is anything useful  for you there.</p></p>
]]></content>
  </entry>
  
</feed>
