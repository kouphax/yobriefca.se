--- 
layout: post
title: Strong Typing vs. Magic Strings (Part II)
published: true
categories: [.NET]
---
  <p>One of the problems with ASP.NET MVC is it&rsquo;s use of magic strings in almost every facet of the architecture.&nbsp; I&rsquo;ve mentioned this&nbsp;<a href="http://blogs.kainos.com/jameshu/2010/03/19/avoiding-magic-strings-in-mvc2/">before</a>&nbsp;but I have a few other things I&rsquo;d like to mention.&nbsp; In my last post I used T4MVC to generate static classes that layer on top of the magic strings but if these don&rsquo;t generate when you want them to they become out of sync and break compile time checking.&nbsp; One solution is to generate the &ldquo;proxy&rdquo; files one every save however if you have a large project this could be a bit of a pain.</p><p>Other solutions exist already.&nbsp; MVC2 comes with strongly typed HtmlHelpers so which turns</p><p><script src="https://gist.github.com/632874.js"></script></p><p>Into,</p><p><script src="https://gist.github.com/632878.js"></script></p><p>Great &ndash; compile time checking and the ability to reflect things such as attribute for generating validation etc.&nbsp; Problem is they didn&rsquo;t really do much else.&nbsp; Controller methods still suffered from Magicstringitis.&nbsp; RedirectToAction still needed magic strings for controller and action names and ModelState.AddModelError still needed string for property names.</p><h2>MvcContrib</h2><p><a href="http://mvccontrib.codeplex.com/Wikipage">MvcContrib</a>&nbsp;offers a load of non-official but excellent extensions to MVC and one of the things that comes bundled with the build is a strongly typed RedirectToAction extension method.&nbsp; This lets change this,</p><p><script src="https://gist.github.com/632871.js"></script></p><p>Into</p><p><script src="https://gist.github.com/632869.js"></script></p><p>Yet again&nbsp; &ndash; compile time checking, refactoring support and no magic strings &ndash; Win.&nbsp; But that leaves one last thing that still bugs me &ndash; ModelState.AddModelError.&nbsp; To add an error for a particualr property of your model you still need to do something like this&hellip;</p><p><script src="https://gist.github.com/632867.js"></script></p><p>YAMS! Yet another magic string!</p><h2>DIY</h2><p>Seeing as I couldn&rsquo;t find a solution from my good friend Google I decided to see if I could do it myself.&nbsp; Turns out it&rsquo;s bloody easy.&nbsp; This extension method will allow us to get rid of magic strings when expecting to map to a property of a simple class (such as a model or DTO)</p><p><script src="https://gist.github.com/632863.js"></script></p><p>And you can now call it like this&hellip;</p><p><script src="https://gist.github.com/632864.js"></script></p><p>Neat!</p><p>One more bit of proof that lambda expressions are awesome &ndash; true there is reflection involved so it&rsquo;s going to be slower than magic strings but in my daily use I haven&rsquo;t really noticed any performance hits so (thanks to Jeff Atwood @ <a href="http://www.codinghorror.com">codinghorror.com</a>) I can give it a &ldquo;Works on my Machine&rdquo; badge.</p><p><img title="6a0120a85dcdae970b0128776ff992970c-pi[1]" src="http://codinghorror.typepad.com/.a/6a0120a85dcdae970b0128776ff992970c-pi" border="0" height="193" alt="6a0120a85dcdae970b0128776ff992970c-pi[1]" width="200"></p>