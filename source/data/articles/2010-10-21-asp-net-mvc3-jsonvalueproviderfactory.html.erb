--- 
layout: post
title: ASP.NET MVC3 JsonValueProviderFactory
published: true
categories: [ASP.NET MVC, JSON]
---
  <p><a href="http://www.asp.net/mvc/mvc3" target="_blank">ASP.NET MVC 3</a></p><p>Anyone who&rsquo;s been involved in an&nbsp;ASP.NET MVC project that is quite Ajax heavy  will probably have noticed that something was always missing.&nbsp; Imagine this  front end scenario,</p><p><script src="https://gist.github.com/639171.js"></script></p><p>Which posts to the following action</p><p><script src="https://gist.github.com/639226.js"></script></p><p>We have a login screen that is submitted via ajax.&nbsp; Now this is quite a  contrived example (ideally you&rsquo;d be&nbsp;performing a normal post via ajax in  this&nbsp;situation) but there are many instances where this sort practise would  apply (ExtJS&rsquo; RESTful DataWriters for example).&nbsp;</p><h2>MVC 2</h2><p>In MVC 2 this wouldn&rsquo;t work immediately.&nbsp; The default model binder in MVC 2  uses Request parameters to bind&nbsp;to model properties but in this case there are  none as the ajax content is the body of the request.</p><p>To accommodate this sort of request in MVC 2 we had to provide a custom model  binder that knows how to deal with JSON requests,</p><p><script src="https://gist.github.com/639234.js"></script></p><p>And attribute our actions model argument telling it to use this binder,</p><p><script src="https://gist.github.com/639242.js"></script></p><p>It&rsquo;ll do the job but it&rsquo;s incredibly messy.&nbsp;</p><h2>MVC 3</h2><p>MCV3 fills this gap thanks to the JsonValueProviderFactory.&nbsp; The JVPF  operates at a higher level than a model binder.&nbsp; Basically what it does when a  JSON request is received is that it pulls the values&nbsp;out of the JSON body&nbsp;as key  value pairs which means they are available to the model binders including the  default model binder.&nbsp; No special wiring required, no custom model binders  (unless of course you want one) just out-of-the-box workingness!</p><p><script src="https://gist.github.com/639226.js"></script></p><p>I know most of this post was taken up by MVC2 specific implementation but  isn&rsquo;t that really the point?&nbsp; MVC3 is a nice refinement of MVC2 there isn&rsquo;t  anything new exactly but the core stuff that is there has been made easier and  more configurable.</p>