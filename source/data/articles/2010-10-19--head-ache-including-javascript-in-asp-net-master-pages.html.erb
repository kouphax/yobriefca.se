--- 
layout: post
title: "< HEAD >ache: Including JavaScript in ASP.NET Master Pages"
published: true
categories: [.NET, JavaScript]
---
  <h2>Problem</h2><p>Include a Javascript file in the head of of an ASP.NET WebForms Master Page whose src attribute should contain an absolute (from Application Root) path e.g.http://localhost:8080/js/jquery-1.3.2.js&nbsp;(single application server) or <a href="http://localhost:8080/MyProject/js/jquery-1.3.2.js">http://localhost:8080/MyProject/js/jquery-1.3.2.js</a> (multi application server).&nbsp; Sounds simple enough but it&rsquo;s surprisingly difficult.</p><h3>Attempt 1: Use a fixed path. (Partial Success)</h3><p><script src="https://gist.github.com/634782.js"></script></p><p>While this &ldquo;works&rdquo; it isn&rsquo;t exactly the most resilient to server changes &ndash; what if we move to/from a single/multi application server?&nbsp; We need to re-write all our URL&rsquo;s</p><h3>Attempt 2: Use Application Root Reference (~) (Fail)</h3><p><script src="https://gist.github.com/634783.js"></script></p><p>This just plain doesn&rsquo;t work because script tags do not get parsed by ASP page renderer so the URL doesn&rsquo;t get converted and what you see here is what you end up with on the page which obviously isn&rsquo;t correct.</p><h3>Attempt 3: Use Server Code (&lt;%= %&gt;) (Partial Success/Fail)</h3><p><script src="https://gist.github.com/634784.js"></script></p><p>Again this is going to fail in certain situations (but not all).&nbsp; This will fail when your head tag has a runat=&rdquo;server&rdquo; attribute present.&nbsp; In some cases you can simply remove the attribute but if you are using the &ldquo;out-of-the-box&rdquo; CSS Themes/Skins you NEED this.</p><h3>Attempt 4: Use a Second &lt;HEAD&gt; Element (Partial Success)</h3><p><script src="https://gist.github.com/634785.js"></script></p><p>This will work as you would expect &ndash; the only problem is that it isn&rsquo;t valid Markup and will fail if you throw it through W3C Validators.</p><h3>Attempt 5: Add script tags &ldquo;Outside&rdquo; Head Element (Partial Success)</h3><p><script src="https://gist.github.com/634788.js"></script></p><p>Again this will work the only problem is you can never guarantee another developer won&rsquo;t stick code (which is dependant on your global script) BEFORE your inclusion of said script which is a bit of a &lt;head&gt;ache (i.e. in the &lt;head&gt; element &ndash; get it?).</p><h3>Attempt 6: Insert Script Tags via MasterPage Page_Load Event (Success)</h3><p><script src="https://gist.github.com/634790.js"></script></p><p>I suppose this is the first real successful attempt.&nbsp; It does what it says by dynamically creating new Script tag element and inserting them to the top of &lt;head&gt;.&nbsp; I inserted everything at the top of the head so no matter where people put their scripts it&rsquo;s going to have all global resources available.&nbsp; The only problem with this is that EVERY Page_Load event is going to dynamically inject new Elements into the head and it&rsquo;s not exactly a very clean separation of mark-up and code.</p><h3>Attempt 7/Solution 1: Use Data Binding to Evaluate src Attribute (AKA The Holmes Technique)</h3><p>ASPX</p><p><script src="https://gist.github.com/634791.js"></script></p><p>Jonny Holmes&nbsp;<a href="http://leedumond.com/blog/the-controls-collection-cannot-be-modified-because-the-control-contains-code-blocks/">uncovered</a>&nbsp;a more elegant solution to this issue and it is described above.&nbsp; It gets around the issue of not being able to use &lt;%= %&gt; tags by using a Data Binding Expression.&nbsp; And all you have to do is perform a DataBind() during the Page_Load event and you&rsquo;re sorted like&nbsp;<a href="http://www.youtube.com/watch?v=e0Mzr_A-Q0I">Ebenezer</a>.</p><p><script src="https://gist.github.com/634793.js"></script></p><p>Anyone got any other methods to do this?</p>