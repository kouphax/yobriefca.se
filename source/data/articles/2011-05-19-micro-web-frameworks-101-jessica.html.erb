---
layout:     post
title:      "Micro Web Frameworks in .NET 101: Jessica"
published:  true
categories: [.NET]
---
  <p>Now I have got the <a href=":/blog/2011/05/18/why-would-you-use-micro-web-frameworks-in-net">opinion piece</a> out of the way I can start the bit I like &#8211; dissecting the various technologies that could be classed as <em>micro web frameworks</em>.  First on the table is <a href=":http://jessicafx.org">Jessica</a>.</p><h2>Getting Started &#8211; Hello World</h2><p>Getting a simple Hello World set up in <a href=":http://jessicafx.org">Jessica</a> involves (optionally) taking more out than you put in.  <a href=":http://jessicafx.org">Jessica</a> requires very little configuration so creating a new web project, deleting all the extra files and folders, trimming the <code>web.config</code> and emptying the <code>Global.asax.cs</code> makes for a nice blank canvas to start with.</p><p class="img-holder"><img src="/media/images/blog/project-before-and-after.png" alt=""></p><p>Next step is pretty difficult :-).  Within the <a href="http://nuget.org">NuGet</a> Package Manager Console just install the Jessica package</p><p class="minimal-gist"><script src="https://gist.github.com/979313.js?file=InstallJessica.ps"></script></p><p>Once installed be need to tell Jess to initialise/bootstrap itself when the application starts by calling the initialise method in the <code>Application_Start</code> method of the <code>Global.asax.cs</code></p><script src="https://gist.github.com/979324.js?file=Global.asax.cs"></script><p>At this point it&#8217;s also possible to supply a number of configuration options but we will touch on this later along with the optional configuration <span class="caps">XML</span>.  Now that Jess is setup to configure itself all we need to do now is define the module that will handle our complex Hello World output.</p><p>Modules form the basis of Jessica each one holding a number of routes (based on URL&#8217;s and <span class="caps">HTTP</span> verbs) and associated actions.  Our app will have a single module,</p><script src="https://gist.github.com/979345.js?file=MainModule.cs"></script><p>This simple module defines a single route that will match any standard <code>GET</code> request for the root of the app. And that&#8217;s it.  When you run the app Jess will inspect the assembly and find all the modules and wire up the routes.</p><h2>The Rest of the Pie</h2><p>Obviously serving plain bits of text is a bit useless so there are plenty of things that Jessica offers that makes it, well, actually useful.</p><h3>Configuration</h3><p>Jessica can be configured programatically or via <span class="caps">XML</span> config.  A number of things you can currently set include,</p><ul>	<li>Environment &#8211; the environment you build in e.g. <code>development</code>, <code>test</code>, <code>release</code>.  Default <code>development</code></li>	<li>Public Directory &#8211; The directory to be used to server static content (html, js, css, images) that require no preprocessing. Default <code>public</code></li>	<li>Views Directory &#8211; The directory to be used to serve views that can be dynamically rendered (Razor, Textile, Markdown, Liquid etc.).  Default <code>views</code></li></ul><p>The <span class="caps">XML</span> config is outlined below but each of these properties can be set in the <code>Global.asax.cs</code> programatically as well via the <code>Jess.Configuration</code> properties.</p><script src="https://gist.github.com/979475.js?file=Web.config.xml"></script><h3>Routes and Actions</h3><p>Routes may be defined as a literal path such as <code>/users</code> or <code>/store/toys</code> or with variable segments such as <code>/user/:id</code> or <code>/blog/:year/:month/:day</code>.  Variable segments are then parsed out of the route url and the values added to the action argument.</p><p class="minimal-gist"><script src="https://gist.github.com/980298.js?file=Routes.cs"></script></p><p>That seems to be about the extent of the route manipulation for now.  Would be nice to see the other Sinatra stuff included such as <a href="http://www.sinatrarb.com/intro#Routes">splats</a>, <a href="http://www.sinatrarb.com/intro#Routes">regular expressions</a> and <a href="http://www.sinatrarb.com/intro#Conditions">conditions</a>.</p><p>Actions are fairly simple they take a dynamic object and are expected to return a Jessica <code>Response</code> object.  The dynamic object passed in contains a number of things such as route parameters, querystring parameters and the current HttpContext.  As an added niceness the Jessica <code>Response</code> object has a number of <a href="http://msdn.microsoft.com/en-us/library/z5z9kes2(v=vs.71).aspx">implicit</a> type conversions that allow us to return simpler objects</p><script src="https://gist.github.com/980308.js?file=ImplicitTypes.cs"></script><h3>Static Content</h3><p>Jessica allows us to return static content simply.  First of all all routes are first checked for the existence of a file at that <span class="caps">URL</span>.  If a file is found it is served, if not then Jessica goes to the route table and works it&#8217;s magic.  Putting resources in the <code>publicDir</code> allows Jessica to serve static content from the route actions and the <code>Response</code> object comes with a number of nice helpers to help make your static actions neater.</p><script src="https://gist.github.com/980313.js?file=JessicaResponse.cs"></script><h3>Views</h3><p>What web technology would be complete without the ability to serve non-static views?  Oddly enough Jessica, out of the box at least, comes with no view engines.  I suspect this is because dynamic view rendering isn&#8217;t technically something that should form the basis of a web framework &#8211; thats the job of the view engines.  Jessica does however come with an extension point of adding X amount of view engines &#8211; <code>Jess.ViewEngines</code>.  There is also a healthy volume of view engines available for Jessica,</p><ul>	<li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Razor">Razor</a></li>	<li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Spark">Spark</a></li>	<li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-DotLiquid">DotLiquid</a></li>	<li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Markdown">Markdown</a></li>	<li><a href="http://nuget.org/List/Packages/Jessica-ViewEngine-Textile">Textile</a></li></ul><p>Rendering a view from an action is also very simple</p><script src="https://gist.github.com/980288.js?file=ViewJessica.cs"></script><p>The first option renders a simple view called index while the second takes a model object that is pushed into the scope of the view and can be used to build the view.  Jessica will loop through it&#8217;s <code>ViewEngines</code> collection and attempt to resolve the view name to a file in the specified <code>viewsDir</code> folder.  If it finds a matching view it will render it.</p><p>I am going to take the lead from Jessica itself and not dive into the various view choices for now.  They are pretty self explanatory anyway.</p><h2>Summing Up</h2><p>So thats the 101, the skinny, the lowdown, the starter for 10, the basics and other random statements of <a href=":http://jessicafx.org">Jessica</a>. Hopefully this covers the vast majority of what v0.83 of Jessica offers.  It&#8217;s a nice minimla framework that attempts to stick to Sinatra&#8217;s philosophy.  It would be nice to see a few more of Sinatras features creeping in especially route <a href="http://www.sinatrarb.com/intro#Conditions">conditions</a>.  There is also some nice high level error handling being introduced (for v0.9 I assume) for handling application wide errors and 404&#8217;s.  I plan on talking about these when they make an appearance.</p><p>Corrections, comments and criticisms below please.</p>