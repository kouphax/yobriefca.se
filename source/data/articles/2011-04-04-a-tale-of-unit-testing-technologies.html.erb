--- 
layout: post
title: A Tale of Unit Testing Technologies
published: true
categories: [Testing, .NET, JavaScript]
---
  <p>I&rsquo;ve had a big bad dirty secret for a while now.&nbsp; One I&rsquo;ve kept hidden from my friend and colleagues for years.&nbsp; But now its time to come clean...... here goes..... hold onto your pants.</p><blockquote>&lt;pause for dramatic effect&gt;<br>I hardly ever write unit tests!<br>&lt;gasps&gt;</blockquote><p>I&rsquo;ve come clean and it feels good.&nbsp; Another reason why it feels good is that it is slowly but surely becoming a falsehood.&nbsp; I&rsquo;ve had my eyes opened recently to the art of BDD and discovered that I&rsquo;ve simply been doing it wrong - I was so busy writing code first and then tests to fit my, possibly incorrect, assumptions that tests failed to hold any worthwhile value &mdash; time wasted in my mind.&nbsp; Also when writing said tests I was too worried on the internal mechanics of the &ldquo;unit&rdquo; being tested and not about its intended behaviour &mdash; essentially missing the point and time wasted once more.&nbsp; Being a man that has no time for, well, time wasting I feel I have come full circle on why I didn&rsquo;t test.&nbsp; In the past at least....</p><p>But I digress.... Where was I?&nbsp; Ah yes I&rsquo;ve had my eyes opened - I&rsquo;ve been doing it right.&nbsp; Yep I&rsquo;ve gone all TDD/BDD - write a failing test, write some code to make it work, make the test fail again and so on and so forth.&nbsp; Its been a good experience.&nbsp; I finally see the benefit in it.&nbsp; Yes, it takes slightly longer and it&rsquo;s hard to break old habits but the amount of times I&rsquo;ve been tripped up by assumptions and edge cases that would only normally be found during system testing after a frustrating debugging session with plenty of hair pulling and swearing.</p><p>Since the whole behaviour driven enlightenment I&rsquo;ve been trying to find a suitable set of technologies that allow me to perfect my new found approach and turn me into a fast and effective code cutting machine.&nbsp; NUnit is fine &mdash; it does the job but it&rsquo;s a task in itself to express what you want out of a test which slows things down.&nbsp; No if you're going to do it right you want the best tools.&nbsp; So I have decided to jump in head first and discover what testing tools are the most effective.&nbsp; I&rsquo;ve been through a few already , including,</p><ul><li>SpecFlow (C#)</li><li>MSpec (Machine.Specifications) (C#)&nbsp;</li><li>JSpec&nbsp; (JavaScript)</li><li>Should/Should.Fluent (C#)</li></ul><p>Here are a few of my thoughts so far.&nbsp;</p><h2>SpecFlow (<a href="http://www.specflow.org/">http://www.specflow.org/</a>)</h2><p>SpecFlow is essentially the .NET equivalent of Cucumber (from the Ruby world).&nbsp; Offering natural language syntax for defining scenarios that make up the behaviour of a feature.&nbsp; Its better as an example,</p><p><script src="https://gist.github.com/900860.js"></script></p><p>So you see the test here is written in pretty much straight english.&nbsp; It&rsquo;s easy to understand and this means even domain experts (aka &ldquo;the business folk&rdquo;) can help write them.&nbsp; So how does this end up being turned into executable tests.&nbsp; Well, initially you need to do a bit of wiring up using Step Definitions.</p><p><script src="https://gist.github.com/900863.js"></script></p><p>As you can see we can match up each line of the feature file with an appropriate executable action.&nbsp; We even have the power of regular expressions at our disposal - allowing us to reuse steps and build up a decent library that comes with us across projects.&nbsp; Some very very powerful stuff here &mdash; we can get everyone involved in writing these things,</p><ul><li>Developers and business users during design</li><li>Developers during development</li><li>Testers during system test &mdash; in fact why not write a feature as the &ldquo;Steps to reproduce&rdquo;?&nbsp; Win, win!</li></ul><p>The thing is...... well.... Technically speaking SpecFlow isn&rsquo;t really aimed at the fine grained, unit test level of testing.&nbsp; It&rsquo;s more about the higher level integration testing.&nbsp; I mean it&rsquo;s useable but it does become a bit awkward to express things in a reusable manner.&nbsp; The problem with that is things start feeling quite heavy weight and you need to do a lot of extra work to get them to fit.&nbsp; No I think, while SpecFlow is great for many things (automated testing, integration testing, system testing etc.) it&rsquo;s not the best fit for what I am looking for in this article - unit testing tools.</p><h2>MSpec (<a href="https://github.com/machine/machine.specifications">https://github.com/machine/machine.specifications</a>)</h2><p>Machine.Specifications (MSpec for short) is a Context/Specification framework geared towards 	removing language noise and simplifying tests.&nbsp;</p><p>Thats the official intention and I must admit I was initially taken by it.&nbsp; Rather than having a single huge class filled with methods representing tests MSpec takes the approach that a single class represents a single scenario and uses lambda expressions to offer the BDD style syntax (Because/It/Subject etc.).&nbsp; So lets take the Tag scenario described above and convert it to MSpec format,</p><p><script src="https://gist.github.com/901245.js"></script></p><p>It&rsquo;s quite simple and it really forces you to ensure your tests are as simple as possible.&nbsp; To be honest having used it on a project I&rsquo;m not 100% sold.&nbsp; I think its down to my personal coding style.&nbsp; I honestly think while it reduces line count it doesn&rsquo;t necessarily reduce language noise.&nbsp; Also having used on a project I found it quite awkward to write &mdash; the style is different to what I am used to and I guess with training that would change.&nbsp; As I say this is a personal opinion and I am happy to be shown a better approach.</p><h2>JSpec (<a href="http://visionmedia.github.com/jspec/">http://visionmedia.github.com/jspec/</a>)</h2><p>JSpec is a clever little JavaScript testing framework.&nbsp; I&rsquo;s no longer supported by it&rsquo;s creators (booooo!) but honestly its stable enough to use anyway.&nbsp; JSpec takes the RSpec DSL (a decent subset at least) and is capable of converting it to JavaScript for execution in the browser.&nbsp; It&rsquo;s got a heap of stuff in it,</p><ul><li>Mock Ajax</li><li>Stubbing</li><li>Fake timers</li></ul><p>Lets take a look at a simple example,</p><p><script src="https://gist.github.com/901253.js"></script></p><p>People who have used RSpec before will feel right at home.&nbsp; People who haven&rsquo;t should be able to understand exactly what is going on.&nbsp; Pretty - right?&nbsp; I thought so.&nbsp; For the people who think &mdash; &ldquo;ugh we don&rsquo;t need another dialect/language&rdquo; - wise up!&nbsp; Out of all the testing techs I&rsquo;ve used recently this one has been the most successful and the output it generates is nice and clean.</p><h2>Should/Should.Fluent (<a href="http://should.codeplex.com/">http://should.codeplex.com/</a>)</h2><p>This little gem isn&rsquo;t a framework in itself and can be used with any framework you care to use.&nbsp; Should provides a more expressive way of stating assertions in your code by making the code closer to natural language using extensions methods and nicer method names.&nbsp; Example I hear you say?&nbsp; Why certainly sirs and madams,</p><p><script src="https://gist.github.com/901260.js"></script></p><p>I stole this one from the Should Codeplex site (linked above) and it makes use of the fluent syntax (optional).&nbsp; OK technically it doesn&rsquo;t do much but it really helps when trying to express assertions in your tests.&nbsp; Highly recommend this one.</p><h2>Conclusion</h2><p>Thats the first lot of technologies covered but there are still plenty out there.&nbsp; I think my next port of call is to actually spin up IronRuby and get RSpec involved.&nbsp; After all it is the marker by which I am comparing these things so why did I not jump on it first of all?&nbsp; Perhaps I like to build up suspense :-P</p><p>Also worth pointing out is that I haven&rsquo;t touched upon technologies for mocking and stubbing - that is for another time.</p><p>As always heap criticism my way and I&rsquo;ll happily fight my corner and stubbornly refuse to back down :-P (second smilie within a few paragraphs time to end this post).</p><p>UPDATE: &nbsp;I've pushed some of my code to GitHub and intend to expand on this using the various other technologies. &nbsp;The repository can be found on my <a href="https://github.com/kouphax/unit-testing">repo on GitHub</a></p>