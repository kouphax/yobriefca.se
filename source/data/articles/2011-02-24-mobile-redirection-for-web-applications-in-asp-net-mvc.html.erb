--- 
layout: post
title: Mobile Redirection for Web Applications in ASP.NET MVC
published: true
categories: [Mobile, ASP.NET MVC, Web]
---
  <p><span style=""> </span>Mobile redirection is simple stuff but what happens when you need to deep link into the mobile application?</p><p>On a recent project we needed to produce mobile (iPad specifically)  equivalent.  The desktop app itself was developed using ExtJS (3.3.1) and had  three primary entry points,</p><ol><li>Logon Screen</li><li>Home Screen</li><li>Product Screen (New/View/Edit)</li></ol><p>Due to the way the project was implemented these became as 3 distinct  pages/controllers/actions.  Users could receive emails with links to a  particular product and they would go directly to that view (with a login  redirect if not previously authenticated).  The mobile solution, however,  written using Sencha Touch (consistent development experience, native-esque UI  with little effort) is a single page application.  This presents a problem when  the user is on a compatible mobile device and they receive a link to a  particular placement &ndash; how do we push that sort of deep linking into a single  page app.  Well on the client side frameworks such as Backbone.js, jQuery Mobile  and Sencha Touch [anyone got more please?] all offer history support using hash  navigation.  That's the client side sorted but how do we translate, say,  /Product/Show/12345 into /Mobile#placement/12345?</p><h2>MobileRedirectAttribute</h2><p>Firstly I created an extension of the AuthorizationAttribute that will act as  an interim redirection and request parser between the mobile and desktop  solutions.  Here&rsquo;s the code (usage follows),</p><p><script src="https://gist.github.com/841958.js"></script></p><h2>Usage</h2><p>So for our 3 entry points into our application we attribute the controller  actions with the MobileRedirectAttribute and give it a client fragment.</p><p><script src="https://gist.github.com/841961.js"></script></p><p>The client fragment is capable of translating tokens embedded within it ( as  :&lt;token_name&gt;) and replacing the token with a matching route value or  request parameter.  The ProductController Index action is a good example of  this.  A request to /Product/Index/12345 on a mobile device would translate  to /Mobile/#product/12345</p><h2>How It Works</h2><p>Pretty simple really.</p><ul><li>The attribute checks if the device is a compatible/mobile device.</li><li>If it is the retrieves the client fragment and extracts the tokens &ndash;  :&lt;token_name&gt;</li><li>It attempts to match the token names against request parameters first</li><li>If there is no parameter it then looks into the route values (eg. :id in the  above url isn;t a parameter but rather a route value)</li><li>It replaces the token with the real value</li><li>It performs a redirect to /Mobile#&lt;client_fragment&gt; which cancels the  execution of the action.</li></ul><h2>Other Points</h2><ul><li>It&rsquo;s probably not the most robust solution in that more complex scenarios  may not work as expected but it&rsquo;s a decent base that can be extended. </li><li>I have hardcoded the mobile route as it fitted my needs so I think that  should be externalised as well.</li><li>The determination of whether a device is a compatible device is facilitated  through Browser.IsMobileDevice.  This is for demonstration purposes only.  In  the project we use a different solution but it is a bit more long winded to  explain here.</li><li>The &ldquo;redirect to logon&rdquo; handling is performed within the app itself so that  is why the Logon view&rsquo;s fragment is simply &ldquo;home&rdquo;.</li></ul><p><h2 style="font-size: 1.5em;">Demo</h2></p><p>I've pushed a very quick and dirty demo of this onto GitHub for anyone interested -&nbsp;<a href="https://github.com/kouphax/mobileredirect-mvc/">https://github.com/kouphax/mobileredirect-mvc/</a> . &nbsp;It uses a really quick UserAgent.Contains("iPad") check for "mobile" detection so use and iPad or set your User Agent to try it out.</p><ul></ul><p>Any use to anyone out there?  Any problems with it?  Let me know.</p>