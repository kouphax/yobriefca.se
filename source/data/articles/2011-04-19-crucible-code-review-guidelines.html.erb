--- 
layout: post
title: Crucible Code Review Guidelines
published: true
categories: [Craftsmanship]
---
  <p>I&rsquo;ve been using Crucible on a number of projects for the last few months and I love it.&nbsp; So now comes the time we want to try and make a case for it to be rolled out to other projects in the company I work for.&nbsp; Along with the usual stuff such as cost of licenses, logistics, hardware need and so on I also need to consider education and best practise guidelines (oh I said &ldquo;best practise&rdquo; that term makes me feel slightly queasy) because after all &mdash; if people aren&rsquo;t using it right they probably wont see the benefit, stop using it and then we are back to square one with wasted time, money and effort.</p><p>Some of you may be thinking,</p><blockquote>&ldquo;But it&rsquo;s just a code review tool - what guidelines do you really need?&rdquo;</blockquote><p>But truth be told you do need some, and I learnt this the hard(ish) way.&nbsp; So here are some top tips to getting the most out of Crucible and at the same time possibly embettering (not a real word but should be) your development approach.</p><h2>Rule 1: Review Early, Review Often</h2><p>Don&rsquo;t wait for a whole week before committing 600 files as a single review &mdash; no ones going to actually do a proper review as they don&rsquo;t have time or patience.&nbsp; Generally speaking your work should be sufficiently broken down so that you can do a few hours of work, commit that code and submit that changeset as a review.&nbsp; Typically speaking a small review may only take about 5 minutes or so to review per person which is a lot easier than having to actually book time to read an entire books worth of code.&nbsp; Obviously don&rsquo;t be going insane on this.&nbsp; A code review should encompass a complete feature and not some arbitrary files that are only a small piece of the puzzle.&nbsp; Feel free to merge changesets where necessary too.</p><h2>Rule 2: Refrain from adding new content to old reviews</h2><p>I&rsquo;ve seen a few cases were a bunch of files have been added to a review and this review has been used over and over with people adding files and new versions until the whole thing had pretty much the entire codebase included.&nbsp; Needless to say that&rsquo;s wrong.&nbsp; Create a review and don&rsquo;t be adding new files or versions too it unless it&rsquo;s in the early stages of review and it is deemed necessary.&nbsp; Don&rsquo;t be afraid of kicking off more than one review - it&rsquo;s not a crime, in fact it&rsquo;s advised</p><h2>Rule 3: Don&rsquo;t be TOO iterative</h2><p>Another problem I&rsquo;ve experienced is that a review can run for a very long time.&nbsp; This is linked to Rule 2 in that, based on my review comments, people will make the changes and bring that file in that review up to date.&nbsp; This leads to further comments and the whole thing just consumes too much time.&nbsp; Crucible gives you the power to do this but you need a bit of discipline to simply know when to stop and when to start a new review.</p><p>In recent projects I have been performing a review, making comments etc. and completing the review (unless there is anything serious I want to make sure gets addressed ASAP).&nbsp; When changes are made they generally get picked up in the next set of reviews anyway and as I talk to my team all the time I can give a brief sanity review when the changes are made. &nbsp;</p><p>Making your submitted reviews lightweight helps with this.</p><h2>Rule 4: Keep reviews small</h2><p>Again similar to Rule 1 and 2.&nbsp; Don&rsquo;t be submitting hundreds of files for a review.&nbsp; If you need to make a big review considering breaking it down into smaller feature sets and describing this in the review.&nbsp; It makes it easier for reviewers to perform the review and for yourself to make the changes quickly (if any)</p><h2>Rule 5: Let everyone get involved</h2><p>Gone are the days when a single (supposedly) smart person performs all reviews.&nbsp; Social code reviews are and should be the future.&nbsp; Embrace this.&nbsp; Every single dev on my projects are added to reviews by default, even people with little to no experience of the technology.&nbsp; Not only does it help people spot things that others may miss but it also&nbsp;</p><ul><li>generates debate and discussion around coding style</li><li>helps people get an understanding of the coding practise in the project</li><li>acts as a learning tool for people</li><li>helps people feel more involved in the project and team</li></ul><h2>Conclusion (cause I can&rsquo;t think of a better word)</h2><p>Hopefully these guidelines give you a better understanding of how I work and how I get maximum benefit from Crucible.&nbsp; After all it is just a tool and therefore open to abuse.&nbsp; Honestly it&rsquo;s better than our previous approach (literally using Word documents) and I can&rsquo;t imagine anyone would prefer our old approach to this.&nbsp; Does anyone else have any recommendations around the use of Crucible?</p>